/* generated from model Automata */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package automata._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class AutomataScopeBuilder  {

    /* generated by template core.Attribute*/
 protected  AutomataScopeBuilder realBuilder ;

    /* generated by template core.Attribute*/
 protected  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.TypeVarSymbol> typeVarSymbols ;

    /* generated by template core.Attribute*/
 protected  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.FieldSymbol> fieldSymbols ;

    /* generated by template core.Attribute*/
 protected  com.google.common.collect.LinkedListMultimap<String,automata._symboltable.AutomatonSymbol> automatonSymbols ;

    /* generated by template core.Attribute*/
 protected  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.MethodSymbol> methodSymbols ;

    /* generated by template core.Attribute*/
 protected  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.TypeSymbol> typeSymbols ;

    /* generated by template core.Attribute*/
 protected  boolean typeVarSymbolsAlreadyResolved ;

    /* generated by template core.Attribute*/
 protected  boolean fieldSymbolsAlreadyResolved ;

    /* generated by template core.Attribute*/
 protected  boolean automatonSymbolsAlreadyResolved ;

    /* generated by template core.Attribute*/
 protected  boolean methodSymbolsAlreadyResolved ;

    /* generated by template core.Attribute*/
 protected  boolean typeSymbolsAlreadyResolved ;

    /* generated by template core.Attribute*/
 protected  automata._symboltable.IAutomataScope enclosingScope ;

    /* generated by template core.Attribute*/
 protected  Optional<de.monticore.symboltable.IScopeSpanningSymbol> spanningSymbol = Optional.empty();

    /* generated by template core.Attribute*/
 protected  boolean shadowing ;

    /* generated by template core.Attribute*/
 protected  boolean exportingSymbols = true;

    /* generated by template core.Attribute*/
 protected  Optional<String> name = Optional.empty();

    /* generated by template core.Attribute*/
 protected  Optional<de.monticore.ast.ASTNode> astNode = Optional.empty();

    /* generated by template core.Attribute*/
 protected  List<automata._symboltable.IAutomataScope> subScopes = new java.util.ArrayList<>();


    /* generated by template core.Constructor*/
 protected  AutomataScopeBuilder()  {
    this.realBuilder = (AutomataScopeBuilder) this;
}


    /* generated by template core.Method*/
 public  AutomataScope build ()  {
      /* generated by template _symboltable.scope.Build*/

  AutomataScope scope = new AutomataScope(shadowing);
  this.spanningSymbol.ifPresent(scope::setSpanningSymbol);
  scope.setExportingSymbols(this.exportingSymbols);
scope.setEnclosingScope(this.enclosingScope);
  scope.setSubScopes(this.subScopes);
  if (this.isPresentAstNode()) {
    scope.setAstNode(this.getAstNode());
  } else {
    scope.setAstNodeAbsent();
  }
  this.name.ifPresent(scope::setName);
  this.subScopes.forEach(s -> s.setEnclosingScope(scope));
  return scope;
}

    /* generated by template core.Method*/
 public  boolean isValid ()  {
      /* generated by template _ast.builder.IsValidMethod*/

        if (typeVarSymbols == null) {
            return false;
        }
        if (fieldSymbols == null) {
            return false;
        }
        if (automatonSymbols == null) {
            return false;
        }
        if (methodSymbols == null) {
            return false;
        }
        if (typeSymbols == null) {
            return false;
        }
        if (enclosingScope == null) {
            return false;
        }
        return true;

}

    /* generated by template core.Method*/
 public  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.TypeVarSymbol> getTypeVarSymbols ()  {
      /* generated by template methods.Get*/

return this.typeVarSymbols;

}

    /* generated by template core.Method*/
 public  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.FieldSymbol> getFieldSymbols ()  {
      /* generated by template methods.Get*/

return this.fieldSymbols;

}

    /* generated by template core.Method*/
 public  com.google.common.collect.LinkedListMultimap<String,automata._symboltable.AutomatonSymbol> getAutomatonSymbols ()  {
      /* generated by template methods.Get*/

return this.automatonSymbols;

}

    /* generated by template core.Method*/
 public  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.MethodSymbol> getMethodSymbols ()  {
      /* generated by template methods.Get*/

return this.methodSymbols;

}

    /* generated by template core.Method*/
 public  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.TypeSymbol> getTypeSymbols ()  {
      /* generated by template methods.Get*/

return this.typeSymbols;

}

    /* generated by template core.Method*/
 public  boolean isTypeVarSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.typeVarSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isFieldSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.fieldSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isAutomatonSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.automatonSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isMethodSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.methodSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isTypeSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.typeSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomataScope getEnclosingScope ()  {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  de.monticore.symboltable.IScopeSpanningSymbol getSpanningSymbol ()  {
      /* generated by template methods.opt.Get*/

if (isPresentSpanningSymbol()) {
return this.spanningSymbol.get();
}
Log.error("0xA7003x645 SpanningSymbol can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentSpanningSymbol ()  {
      /* generated by template methods.opt.IsPresent*/

return this.spanningSymbol.isPresent();

}

    /* generated by template core.Method*/
 public  boolean isShadowing ()  {
      /* generated by template methods.Get*/

return this.shadowing;

}

    /* generated by template core.Method*/
 public  boolean isExportingSymbols ()  {
      /* generated by template methods.Get*/

return this.exportingSymbols;

}

    /* generated by template core.Method*/
 public  String getName ()  {
      /* generated by template methods.opt.Get*/

if (isPresentName()) {
return this.name.get();
}
Log.error("0xA7003x909 Name can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentName ()  {
      /* generated by template methods.opt.IsPresent*/

return this.name.isPresent();

}

    /* generated by template core.Method*/
 public  de.monticore.ast.ASTNode getAstNode ()  {
      /* generated by template methods.opt.Get*/

if (isPresentAstNode()) {
return this.astNode.get();
}
Log.error("0xA7003x557 AstNode can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentAstNode ()  {
      /* generated by template methods.opt.IsPresent*/

return this.astNode.isPresent();

}

    /* generated by template core.Method*/
 public  boolean containsSubScope (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllSubScopes (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptySubScopes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<automata._symboltable.IAutomataScope> iteratorSubScopes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeSubScopes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().size();

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomataScope[] toArraySubScopes (automata._symboltable.IAutomataScope[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArraySubScopes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<automata._symboltable.IAutomataScope> spliteratorSubScopes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<automata._symboltable.IAutomataScope> streamSubScopes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().stream();

}

    /* generated by template core.Method*/
 public  Stream<automata._symboltable.IAutomataScope> parallelStreamSubScopes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().parallelStream();

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomataScope getSubScope (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfSubScope (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfSubScope (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsSubScopes (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeSubScopes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<automata._symboltable.IAutomataScope> listIteratorSubScopes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<automata._symboltable.IAutomataScope> listIteratorSubScopes (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<automata._symboltable.IAutomataScope> subListSubScopes (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getSubScopeList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<automata._symboltable.IAutomataScope> getSubScopeList ()  {
      /* generated by template methods.Get*/

return this.subScopes;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setTypeVarSymbols (com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.TypeVarSymbol> typeVarSymbols)  {
      /* generated by template _ast.builder.Set*/

    this.typeVarSymbols = typeVarSymbols;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setFieldSymbols (com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.FieldSymbol> fieldSymbols)  {
      /* generated by template _ast.builder.Set*/

    this.fieldSymbols = fieldSymbols;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setAutomatonSymbols (com.google.common.collect.LinkedListMultimap<String,automata._symboltable.AutomatonSymbol> automatonSymbols)  {
      /* generated by template _ast.builder.Set*/

    this.automatonSymbols = automatonSymbols;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setMethodSymbols (com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.MethodSymbol> methodSymbols)  {
      /* generated by template _ast.builder.Set*/

    this.methodSymbols = methodSymbols;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setTypeSymbols (com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.TypeSymbol> typeSymbols)  {
      /* generated by template _ast.builder.Set*/

    this.typeSymbols = typeSymbols;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setTypeVarSymbolsAlreadyResolved (boolean typeVarSymbolsAlreadyResolved)  {
      /* generated by template _ast.builder.Set*/

    this.typeVarSymbolsAlreadyResolved = typeVarSymbolsAlreadyResolved;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setFieldSymbolsAlreadyResolved (boolean fieldSymbolsAlreadyResolved)  {
      /* generated by template _ast.builder.Set*/

    this.fieldSymbolsAlreadyResolved = fieldSymbolsAlreadyResolved;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setAutomatonSymbolsAlreadyResolved (boolean automatonSymbolsAlreadyResolved)  {
      /* generated by template _ast.builder.Set*/

    this.automatonSymbolsAlreadyResolved = automatonSymbolsAlreadyResolved;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setMethodSymbolsAlreadyResolved (boolean methodSymbolsAlreadyResolved)  {
      /* generated by template _ast.builder.Set*/

    this.methodSymbolsAlreadyResolved = methodSymbolsAlreadyResolved;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setTypeSymbolsAlreadyResolved (boolean typeSymbolsAlreadyResolved)  {
      /* generated by template _ast.builder.Set*/

    this.typeSymbolsAlreadyResolved = typeSymbolsAlreadyResolved;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setEnclosingScope (automata._symboltable.IAutomataScope enclosingScope)  {
      /* generated by template _ast.builder.Set*/

    this.enclosingScope = enclosingScope;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setSpanningSymbol (de.monticore.symboltable.IScopeSpanningSymbol spanningSymbol)  {
      /* generated by template _ast.builder.opt.Set*/

    this.spanningSymbol = Optional.ofNullable(spanningSymbol);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setSpanningSymbolAbsent ()  {
      /* generated by template _ast.builder.opt.SetAbsent*/

    this.spanningSymbol = Optional.empty();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setShadowing (boolean shadowing)  {
      /* generated by template _ast.builder.Set*/

    this.shadowing = shadowing;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setExportingSymbols (boolean exportingSymbols)  {
      /* generated by template _ast.builder.Set*/

    this.exportingSymbols = exportingSymbols;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setName (String name)  {
      /* generated by template _ast.builder.opt.Set*/

    this.name = Optional.ofNullable(name);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setNameAbsent ()  {
      /* generated by template _ast.builder.opt.SetAbsent*/

    this.name = Optional.empty();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setAstNode (de.monticore.ast.ASTNode astNode)  {
      /* generated by template _ast.builder.opt.Set*/

    this.astNode = Optional.ofNullable(astNode);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setAstNodeAbsent ()  {
      /* generated by template _ast.builder.opt.SetAbsent*/

    this.astNode = Optional.empty();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder clearSubScopes ()  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().clear();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder addSubScope (automata._symboltable.IAutomataScope element)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().add(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder addAllSubScopes (Collection<? extends automata._symboltable.IAutomataScope> collection)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().addAll(collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder removeSubScope (Object element)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().remove(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder removeAllSubScopes (Collection<?> collection)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().removeAll(collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder retainAllSubScopes (Collection<?> collection)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().retainAll(collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder removeIfSubScope (Predicate<? super automata._symboltable.IAutomataScope> filter)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().removeIf(filter);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder forEachSubScopes (Consumer<? super automata._symboltable.IAutomataScope> action)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().forEach(action);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder addSubScope (int index,automata._symboltable.IAutomataScope element)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().add(index, element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder addAllSubScopes (int index,Collection<? extends automata._symboltable.IAutomataScope> collection)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().addAll(index, collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder removeSubScope (int index)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().remove(index);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setSubScope (int index,automata._symboltable.IAutomataScope element)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().set(index, element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder replaceAllSubScopes (UnaryOperator<automata._symboltable.IAutomataScope> operator)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().replaceAll(operator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder sortSubScopes (Comparator<? super automata._symboltable.IAutomataScope> comparator)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getSubScopeList().sort(comparator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  AutomataScopeBuilder setSubScopeList (List<automata._symboltable.IAutomataScope> subScopes)  {
      /* generated by template _ast.builder.Set*/

    this.subScopes = subScopes;
    return this.realBuilder;

}

}
