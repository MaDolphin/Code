/* generated from model Automata */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package automata._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class AutomataGlobalScope extends automata._symboltable.AutomataScope  implements automata._symboltable.IAutomataGlobalScope {

    /* generated by template core.Attribute*/
 protected  de.monticore.io.paths.ModelPath modelPath ;

    /* generated by template core.Attribute*/
 protected  AutomataLanguage automataLanguage ;

    /* generated by template core.Attribute*/
 protected  final  Map<String,Set<AutomataModelLoader>> modelName2ModelLoaderCache  = new HashMap<>();

    /* generated by template core.Attribute*/
 protected  List<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> adaptedTypeVarSymbolResolvingDelegate  = new ArrayList<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate>();

    /* generated by template core.Attribute*/
 protected  List<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> adaptedFieldSymbolResolvingDelegate  = new ArrayList<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate>();

    /* generated by template core.Attribute*/
 protected  List<automata._symboltable.IAutomatonSymbolResolvingDelegate> adaptedAutomatonSymbolResolvingDelegate  = new ArrayList<automata._symboltable.IAutomatonSymbolResolvingDelegate>();

    /* generated by template core.Attribute*/
 protected  List<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> adaptedMethodSymbolResolvingDelegate  = new ArrayList<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate>();

    /* generated by template core.Attribute*/
 protected  List<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> adaptedTypeSymbolResolvingDelegate  = new ArrayList<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate>();


    /* generated by template core.Constructor*/
 public  AutomataGlobalScope(de.monticore.io.paths.ModelPath modelPath,AutomataLanguage language)  {
    this.modelPath = Log.errorIfNull(modelPath);
    this.automataLanguage = Log.errorIfNull(language);
}


    /* generated by template core.Method*/
 public  de.monticore.io.paths.ModelPath getModelPath ()  {
      /* generated by template methods.Get*/

return this.modelPath;

}

    /* generated by template core.Method*/
 public  AutomataLanguage getAutomataLanguage ()  {
      /* generated by template methods.Get*/

return this.automataLanguage;

}

    /* generated by template core.Method*/
 public  String getName ()  {
      Log.error("0xA6101x131 Global scopes do not have names.");
    return null;
}

    /* generated by template core.Method*/
 public  boolean isPresentName ()  {
      return false;
}

    /* generated by template core.Method*/
 public  void cache (String calculatedModelName)  {
      /* generated by template _symboltable.globalscope.CacheMethod*/

  AutomataModelLoader modelLoader = this.getAutomataLanguage().getModelLoader() ;
  if (modelName2ModelLoaderCache.containsKey(calculatedModelName)) {
    modelName2ModelLoaderCache.get(calculatedModelName).add(modelLoader);
  } else {
    final Set<AutomataModelLoader> ml = new LinkedHashSet<>();
    ml.add(modelLoader);
    modelName2ModelLoaderCache.put(calculatedModelName, ml);
  }
}

    /* generated by template core.Method*/
 public  boolean continueWithModelLoader (String calculatedModelName,AutomataModelLoader modelLoader)  {
          return !modelName2ModelLoaderCache.containsKey(calculatedModelName)
      || !modelName2ModelLoaderCache.get(calculatedModelName).contains(modelLoader);
}

    /* generated by template core.Method*/
 public  boolean containsAdaptedTypeVarSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllAdaptedTypeVarSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyAdaptedTypeVarSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> iteratorAdaptedTypeVarSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeAdaptedTypeVarSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().size();

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate[] toArrayAdaptedTypeVarSymbolResolvingDelegate (de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayAdaptedTypeVarSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> spliteratorAdaptedTypeVarSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> streamAdaptedTypeVarSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().stream();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> parallelStreamAdaptedTypeVarSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().parallelStream();

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate getAdaptedTypeVarSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfAdaptedTypeVarSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfAdaptedTypeVarSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsAdaptedTypeVarSymbolResolvingDelegate (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeAdaptedTypeVarSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> listIteratorAdaptedTypeVarSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> listIteratorAdaptedTypeVarSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> subListAdaptedTypeVarSymbolResolvingDelegate (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> getAdaptedTypeVarSymbolResolvingDelegateList ()  {
      /* generated by template methods.Get*/

return this.adaptedTypeVarSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  void clearAdaptedTypeVarSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedTypeVarSymbolResolvingDelegateList().clear();

}

    /* generated by template core.Method*/
 public  boolean addAdaptedTypeVarSymbolResolvingDelegate (de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedTypeVarSymbolResolvingDelegate (Collection<? extends de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeAdaptedTypeVarSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllAdaptedTypeVarSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllAdaptedTypeVarSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfAdaptedTypeVarSymbolResolvingDelegate (Predicate<? super de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachAdaptedTypeVarSymbolResolvingDelegate (Consumer<? super de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> action)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedTypeVarSymbolResolvingDelegateList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addAdaptedTypeVarSymbolResolvingDelegate (int index,de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedTypeVarSymbolResolvingDelegateList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedTypeVarSymbolResolvingDelegate (int index,Collection<? extends de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate removeAdaptedTypeVarSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().remove(index);

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate setAdaptedTypeVarSymbolResolvingDelegate (int index,de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeVarSymbolResolvingDelegateList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllAdaptedTypeVarSymbolResolvingDelegate (UnaryOperator<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedTypeVarSymbolResolvingDelegateList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortAdaptedTypeVarSymbolResolvingDelegate (Comparator<? super de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedTypeVarSymbolResolvingDelegateList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setAdaptedTypeVarSymbolResolvingDelegateList (List<de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate> adaptedTypeVarSymbolResolvingDelegate)  {
      /* generated by template methods.Set*/

this.adaptedTypeVarSymbolResolvingDelegate = adaptedTypeVarSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  boolean containsAdaptedFieldSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllAdaptedFieldSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyAdaptedFieldSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> iteratorAdaptedFieldSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeAdaptedFieldSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().size();

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate[] toArrayAdaptedFieldSymbolResolvingDelegate (de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayAdaptedFieldSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> spliteratorAdaptedFieldSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> streamAdaptedFieldSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().stream();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> parallelStreamAdaptedFieldSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().parallelStream();

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate getAdaptedFieldSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfAdaptedFieldSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfAdaptedFieldSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsAdaptedFieldSymbolResolvingDelegate (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeAdaptedFieldSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> listIteratorAdaptedFieldSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> listIteratorAdaptedFieldSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> subListAdaptedFieldSymbolResolvingDelegate (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> getAdaptedFieldSymbolResolvingDelegateList ()  {
      /* generated by template methods.Get*/

return this.adaptedFieldSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  void clearAdaptedFieldSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedFieldSymbolResolvingDelegateList().clear();

}

    /* generated by template core.Method*/
 public  boolean addAdaptedFieldSymbolResolvingDelegate (de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedFieldSymbolResolvingDelegate (Collection<? extends de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeAdaptedFieldSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllAdaptedFieldSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllAdaptedFieldSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfAdaptedFieldSymbolResolvingDelegate (Predicate<? super de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachAdaptedFieldSymbolResolvingDelegate (Consumer<? super de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> action)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedFieldSymbolResolvingDelegateList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addAdaptedFieldSymbolResolvingDelegate (int index,de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedFieldSymbolResolvingDelegateList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedFieldSymbolResolvingDelegate (int index,Collection<? extends de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate removeAdaptedFieldSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().remove(index);

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate setAdaptedFieldSymbolResolvingDelegate (int index,de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedFieldSymbolResolvingDelegateList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllAdaptedFieldSymbolResolvingDelegate (UnaryOperator<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedFieldSymbolResolvingDelegateList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortAdaptedFieldSymbolResolvingDelegate (Comparator<? super de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedFieldSymbolResolvingDelegateList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setAdaptedFieldSymbolResolvingDelegateList (List<de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate> adaptedFieldSymbolResolvingDelegate)  {
      /* generated by template methods.Set*/

this.adaptedFieldSymbolResolvingDelegate = adaptedFieldSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  boolean containsAdaptedAutomatonSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllAdaptedAutomatonSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<automata._symboltable.IAutomatonSymbolResolvingDelegate> iteratorAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().size();

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomatonSymbolResolvingDelegate[] toArrayAdaptedAutomatonSymbolResolvingDelegate (automata._symboltable.IAutomatonSymbolResolvingDelegate[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<automata._symboltable.IAutomatonSymbolResolvingDelegate> spliteratorAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<automata._symboltable.IAutomatonSymbolResolvingDelegate> streamAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().stream();

}

    /* generated by template core.Method*/
 public  Stream<automata._symboltable.IAutomatonSymbolResolvingDelegate> parallelStreamAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().parallelStream();

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomatonSymbolResolvingDelegate getAdaptedAutomatonSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfAdaptedAutomatonSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfAdaptedAutomatonSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsAdaptedAutomatonSymbolResolvingDelegate (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<automata._symboltable.IAutomatonSymbolResolvingDelegate> listIteratorAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<automata._symboltable.IAutomatonSymbolResolvingDelegate> listIteratorAdaptedAutomatonSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<automata._symboltable.IAutomatonSymbolResolvingDelegate> subListAdaptedAutomatonSymbolResolvingDelegate (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<automata._symboltable.IAutomatonSymbolResolvingDelegate> getAdaptedAutomatonSymbolResolvingDelegateList ()  {
      /* generated by template methods.Get*/

return this.adaptedAutomatonSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  void clearAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedAutomatonSymbolResolvingDelegateList().clear();

}

    /* generated by template core.Method*/
 public  boolean addAdaptedAutomatonSymbolResolvingDelegate (automata._symboltable.IAutomatonSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedAutomatonSymbolResolvingDelegate (Collection<? extends automata._symboltable.IAutomatonSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeAdaptedAutomatonSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllAdaptedAutomatonSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllAdaptedAutomatonSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfAdaptedAutomatonSymbolResolvingDelegate (Predicate<? super automata._symboltable.IAutomatonSymbolResolvingDelegate> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachAdaptedAutomatonSymbolResolvingDelegate (Consumer<? super automata._symboltable.IAutomatonSymbolResolvingDelegate> action)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedAutomatonSymbolResolvingDelegateList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addAdaptedAutomatonSymbolResolvingDelegate (int index,automata._symboltable.IAutomatonSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedAutomatonSymbolResolvingDelegateList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedAutomatonSymbolResolvingDelegate (int index,Collection<? extends automata._symboltable.IAutomatonSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomatonSymbolResolvingDelegate removeAdaptedAutomatonSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().remove(index);

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomatonSymbolResolvingDelegate setAdaptedAutomatonSymbolResolvingDelegate (int index,automata._symboltable.IAutomatonSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllAdaptedAutomatonSymbolResolvingDelegate (UnaryOperator<automata._symboltable.IAutomatonSymbolResolvingDelegate> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedAutomatonSymbolResolvingDelegateList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortAdaptedAutomatonSymbolResolvingDelegate (Comparator<? super automata._symboltable.IAutomatonSymbolResolvingDelegate> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedAutomatonSymbolResolvingDelegateList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setAdaptedAutomatonSymbolResolvingDelegateList (List<automata._symboltable.IAutomatonSymbolResolvingDelegate> adaptedAutomatonSymbolResolvingDelegate)  {
      /* generated by template methods.Set*/

this.adaptedAutomatonSymbolResolvingDelegate = adaptedAutomatonSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  boolean containsAdaptedMethodSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllAdaptedMethodSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyAdaptedMethodSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> iteratorAdaptedMethodSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeAdaptedMethodSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().size();

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate[] toArrayAdaptedMethodSymbolResolvingDelegate (de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayAdaptedMethodSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> spliteratorAdaptedMethodSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> streamAdaptedMethodSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().stream();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> parallelStreamAdaptedMethodSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().parallelStream();

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate getAdaptedMethodSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfAdaptedMethodSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfAdaptedMethodSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsAdaptedMethodSymbolResolvingDelegate (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeAdaptedMethodSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> listIteratorAdaptedMethodSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> listIteratorAdaptedMethodSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> subListAdaptedMethodSymbolResolvingDelegate (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> getAdaptedMethodSymbolResolvingDelegateList ()  {
      /* generated by template methods.Get*/

return this.adaptedMethodSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  void clearAdaptedMethodSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedMethodSymbolResolvingDelegateList().clear();

}

    /* generated by template core.Method*/
 public  boolean addAdaptedMethodSymbolResolvingDelegate (de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedMethodSymbolResolvingDelegate (Collection<? extends de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeAdaptedMethodSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllAdaptedMethodSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllAdaptedMethodSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfAdaptedMethodSymbolResolvingDelegate (Predicate<? super de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachAdaptedMethodSymbolResolvingDelegate (Consumer<? super de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> action)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedMethodSymbolResolvingDelegateList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addAdaptedMethodSymbolResolvingDelegate (int index,de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedMethodSymbolResolvingDelegateList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedMethodSymbolResolvingDelegate (int index,Collection<? extends de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate removeAdaptedMethodSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().remove(index);

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate setAdaptedMethodSymbolResolvingDelegate (int index,de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedMethodSymbolResolvingDelegateList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllAdaptedMethodSymbolResolvingDelegate (UnaryOperator<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedMethodSymbolResolvingDelegateList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortAdaptedMethodSymbolResolvingDelegate (Comparator<? super de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedMethodSymbolResolvingDelegateList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setAdaptedMethodSymbolResolvingDelegateList (List<de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate> adaptedMethodSymbolResolvingDelegate)  {
      /* generated by template methods.Set*/

this.adaptedMethodSymbolResolvingDelegate = adaptedMethodSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  boolean containsAdaptedTypeSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllAdaptedTypeSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyAdaptedTypeSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> iteratorAdaptedTypeSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeAdaptedTypeSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().size();

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate[] toArrayAdaptedTypeSymbolResolvingDelegate (de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayAdaptedTypeSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> spliteratorAdaptedTypeSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> streamAdaptedTypeSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().stream();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> parallelStreamAdaptedTypeSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().parallelStream();

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate getAdaptedTypeSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfAdaptedTypeSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfAdaptedTypeSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsAdaptedTypeSymbolResolvingDelegate (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeAdaptedTypeSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> listIteratorAdaptedTypeSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> listIteratorAdaptedTypeSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> subListAdaptedTypeSymbolResolvingDelegate (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> getAdaptedTypeSymbolResolvingDelegateList ()  {
      /* generated by template methods.Get*/

return this.adaptedTypeSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  void clearAdaptedTypeSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedTypeSymbolResolvingDelegateList().clear();

}

    /* generated by template core.Method*/
 public  boolean addAdaptedTypeSymbolResolvingDelegate (de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedTypeSymbolResolvingDelegate (Collection<? extends de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeAdaptedTypeSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllAdaptedTypeSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllAdaptedTypeSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfAdaptedTypeSymbolResolvingDelegate (Predicate<? super de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachAdaptedTypeSymbolResolvingDelegate (Consumer<? super de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> action)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedTypeSymbolResolvingDelegateList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addAdaptedTypeSymbolResolvingDelegate (int index,de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedTypeSymbolResolvingDelegateList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedTypeSymbolResolvingDelegate (int index,Collection<? extends de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate removeAdaptedTypeSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().remove(index);

}

    /* generated by template core.Method*/
 public  de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate setAdaptedTypeSymbolResolvingDelegate (int index,de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedTypeSymbolResolvingDelegateList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllAdaptedTypeSymbolResolvingDelegate (UnaryOperator<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedTypeSymbolResolvingDelegateList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortAdaptedTypeSymbolResolvingDelegate (Comparator<? super de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedTypeSymbolResolvingDelegateList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setAdaptedTypeSymbolResolvingDelegateList (List<de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate> adaptedTypeSymbolResolvingDelegate)  {
      /* generated by template methods.Set*/

this.adaptedTypeSymbolResolvingDelegate = adaptedTypeSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  boolean isAutomatonSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.automatonSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setAutomatonSymbolsAlreadyResolved (boolean automatonSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.automatonSymbolsAlreadyResolved = automatonSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isTypeSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.typeSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setTypeSymbolsAlreadyResolved (boolean typeSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.typeSymbolsAlreadyResolved = typeSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isTypeVarSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.typeVarSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setTypeVarSymbolsAlreadyResolved (boolean typeVarSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.typeVarSymbolsAlreadyResolved = typeVarSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isFieldSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.fieldSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setFieldSymbolsAlreadyResolved (boolean fieldSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.fieldSymbolsAlreadyResolved = fieldSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isMethodSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.methodSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setMethodSymbolsAlreadyResolved (boolean methodSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.methodSymbolsAlreadyResolved = methodSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomataScope getEnclosingScope ()  {
      Log.error("0xA6100x418 GlobalScope AutomataGlobalScope has no EnclosingScope, so you cannot call methodgetEnclosingScope.");
    return null;
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (automata._symboltable.IAutomataScope enclosingScope)  {
      Log.error("0xA6100x796 GlobalScope AutomataGlobalScope has no EnclosingScope, so you cannot call methodsetEnclosingScope.");
}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.TypeSymbol> resolveAdaptedType (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<de.monticore.types.typesymbols._symboltable.TypeSymbol> predicate)  {
      /* generated by template _symboltable.globalscope.ResolveAdapted*/

List<de.monticore.types.typesymbols._symboltable.TypeSymbol> adaptedSymbols = new ArrayList<de.monticore.types.typesymbols._symboltable.TypeSymbol>();
for (de.monticore.types.typesymbols._symboltable.ITypeSymbolResolvingDelegate symDel : adaptedTypeSymbolResolvingDelegate) {
adaptedSymbols.addAll(symDel.resolveAdaptedTypeSymbol(foundSymbols, name, modifier, predicate));
}
return adaptedSymbols;
}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.TypeVarSymbol> resolveAdaptedTypeVar (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<de.monticore.types.typesymbols._symboltable.TypeVarSymbol> predicate)  {
      /* generated by template _symboltable.globalscope.ResolveAdapted*/

List<de.monticore.types.typesymbols._symboltable.TypeVarSymbol> adaptedSymbols = new ArrayList<de.monticore.types.typesymbols._symboltable.TypeVarSymbol>();
for (de.monticore.types.typesymbols._symboltable.ITypeVarSymbolResolvingDelegate symDel : adaptedTypeVarSymbolResolvingDelegate) {
adaptedSymbols.addAll(symDel.resolveAdaptedTypeVarSymbol(foundSymbols, name, modifier, predicate));
}
return adaptedSymbols;
}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.FieldSymbol> resolveAdaptedField (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<de.monticore.types.typesymbols._symboltable.FieldSymbol> predicate)  {
      /* generated by template _symboltable.globalscope.ResolveAdapted*/

List<de.monticore.types.typesymbols._symboltable.FieldSymbol> adaptedSymbols = new ArrayList<de.monticore.types.typesymbols._symboltable.FieldSymbol>();
for (de.monticore.types.typesymbols._symboltable.IFieldSymbolResolvingDelegate symDel : adaptedFieldSymbolResolvingDelegate) {
adaptedSymbols.addAll(symDel.resolveAdaptedFieldSymbol(foundSymbols, name, modifier, predicate));
}
return adaptedSymbols;
}

    /* generated by template core.Method*/
 public  List<de.monticore.types.typesymbols._symboltable.MethodSymbol> resolveAdaptedMethod (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<de.monticore.types.typesymbols._symboltable.MethodSymbol> predicate)  {
      /* generated by template _symboltable.globalscope.ResolveAdapted*/

List<de.monticore.types.typesymbols._symboltable.MethodSymbol> adaptedSymbols = new ArrayList<de.monticore.types.typesymbols._symboltable.MethodSymbol>();
for (de.monticore.types.typesymbols._symboltable.IMethodSymbolResolvingDelegate symDel : adaptedMethodSymbolResolvingDelegate) {
adaptedSymbols.addAll(symDel.resolveAdaptedMethodSymbol(foundSymbols, name, modifier, predicate));
}
return adaptedSymbols;
}

    /* generated by template core.Method*/
 public  List<automata._symboltable.AutomatonSymbol> resolveAdaptedAutomaton (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<automata._symboltable.AutomatonSymbol> predicate)  {
      /* generated by template _symboltable.globalscope.ResolveAdapted*/

List<automata._symboltable.AutomatonSymbol> adaptedSymbols = new ArrayList<automata._symboltable.AutomatonSymbol>();
for (automata._symboltable.IAutomatonSymbolResolvingDelegate symDel : adaptedAutomatonSymbolResolvingDelegate) {
adaptedSymbols.addAll(symDel.resolveAdaptedAutomatonSymbol(foundSymbols, name, modifier, predicate));
}
return adaptedSymbols;
}

}
