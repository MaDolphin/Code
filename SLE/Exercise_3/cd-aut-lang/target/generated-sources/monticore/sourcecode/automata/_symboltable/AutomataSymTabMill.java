/* generated from model Automata */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package automata._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class AutomataSymTabMill  {

    /* generated by template core.Attribute*/
 protected  static  AutomataSymTabMill mill ;

    /* generated by template core.Attribute*/
 protected  static  AutomataSymTabMill automatonSymbol ;

    /* generated by template core.Attribute*/
 protected  static  AutomataSymTabMill automatonSymbolLoader ;

    /* generated by template core.Attribute*/
 protected  static  AutomataSymTabMill automataModelLoader ;

    /* generated by template core.Attribute*/
 protected  static  AutomataSymTabMill automataSymbolTableCreator ;

    /* generated by template core.Attribute*/
 protected  static  AutomataSymTabMill automataSymbolTableCreatorDelegator ;

    /* generated by template core.Attribute*/
 protected  static  AutomataSymTabMill automataGlobalScope ;

    /* generated by template core.Attribute*/
 protected  static  AutomataSymTabMill automataArtifactScope ;

    /* generated by template core.Attribute*/
 protected  static  AutomataSymTabMill automataScope ;


    /* generated by template core.Constructor*/
 protected  AutomataSymTabMill()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 protected  static  AutomataSymTabMill getMill ()  {
      /* generated by template _symboltable.symTabMill.GetMill*/

  if (mill == null) {
    mill = new AutomataSymTabMill();
  }
  return mill;
}

    /* generated by template core.Method*/
 public  static  void initMe (AutomataSymTabMill a)  {
      /* generated by template _symboltable.symTabMill.InitMe*/

  mill = a;
  automatonSymbol = mill;
  automatonSymbolLoader = mill;
  automataModelLoader = mill;
  automataSymbolTableCreator = mill;
  automataSymbolTableCreatorDelegator = mill;
  automataGlobalScope = mill;
  automataArtifactScope = mill;
  automataScope = mill;

}

    /* generated by template core.Method*/
 public  static  void init ()  {
      mill = new AutomataSymTabMill();
}

    /* generated by template core.Method*/
 public  static  void reset ()  {
      /* generated by template _symboltable.symTabMill.Reset*/

  mill = null;
  automatonSymbol = null;
  automatonSymbolLoader = null;
  automataModelLoader = null;
  automataSymbolTableCreator = null;
  automataSymbolTableCreatorDelegator = null;
  automataGlobalScope = null;
  automataArtifactScope = null;
  automataScope = null;
  de.monticore.types.mcbasictypes._symboltable.MCBasicTypesSymTabMill.reset();
  de.monticore.mcbasics._symboltable.MCBasicsSymTabMill.reset();
  de.monticore.types.typesymbols._symboltable.TypeSymbolsSymTabMill.reset();

}

    /* generated by template core.Method*/
 protected  AutomatonSymbolBuilder _automatonSymbolBuilder ()  {
      return new AutomatonSymbolBuilder();
}

    /* generated by template core.Method*/
 public  static  AutomatonSymbolBuilder automatonSymbolBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (automatonSymbol == null) {
    automatonSymbol = getMill();
  }
  return automatonSymbol._automatonSymbolBuilder();
}

    /* generated by template core.Method*/
 protected  AutomatonSymbolLoaderBuilder _automatonSymbolLoaderBuilder ()  {
      return new AutomatonSymbolLoaderBuilder();
}

    /* generated by template core.Method*/
 public  static  AutomatonSymbolLoaderBuilder automatonSymbolLoaderBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (automatonSymbolLoader == null) {
    automatonSymbolLoader = getMill();
  }
  return automatonSymbolLoader._automatonSymbolLoaderBuilder();
}

    /* generated by template core.Method*/
 protected  AutomataModelLoaderBuilder _automataModelLoaderBuilder ()  {
      return new AutomataModelLoaderBuilder();
}

    /* generated by template core.Method*/
 public  static  AutomataModelLoaderBuilder automataModelLoaderBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (automataModelLoader == null) {
    automataModelLoader = getMill();
  }
  return automataModelLoader._automataModelLoaderBuilder();
}

    /* generated by template core.Method*/
 protected  AutomataSymbolTableCreatorBuilder _automataSymbolTableCreatorBuilder ()  {
      return new AutomataSymbolTableCreatorBuilder();
}

    /* generated by template core.Method*/
 public  static  AutomataSymbolTableCreatorBuilder automataSymbolTableCreatorBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (automataSymbolTableCreator == null) {
    automataSymbolTableCreator = getMill();
  }
  return automataSymbolTableCreator._automataSymbolTableCreatorBuilder();
}

    /* generated by template core.Method*/
 protected  AutomataSymbolTableCreatorDelegatorBuilder _automataSymbolTableCreatorDelegatorBuilder ()  {
      return new AutomataSymbolTableCreatorDelegatorBuilder();
}

    /* generated by template core.Method*/
 public  static  AutomataSymbolTableCreatorDelegatorBuilder automataSymbolTableCreatorDelegatorBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (automataSymbolTableCreatorDelegator == null) {
    automataSymbolTableCreatorDelegator = getMill();
  }
  return automataSymbolTableCreatorDelegator._automataSymbolTableCreatorDelegatorBuilder();
}

    /* generated by template core.Method*/
 protected  AutomataGlobalScopeBuilder _automataGlobalScopeBuilder ()  {
      return new AutomataGlobalScopeBuilder();
}

    /* generated by template core.Method*/
 public  static  AutomataGlobalScopeBuilder automataGlobalScopeBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (automataGlobalScope == null) {
    automataGlobalScope = getMill();
  }
  return automataGlobalScope._automataGlobalScopeBuilder();
}

    /* generated by template core.Method*/
 protected  AutomataArtifactScopeBuilder _automataArtifactScopeBuilder ()  {
      return new AutomataArtifactScopeBuilder();
}

    /* generated by template core.Method*/
 public  static  AutomataArtifactScopeBuilder automataArtifactScopeBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (automataArtifactScope == null) {
    automataArtifactScope = getMill();
  }
  return automataArtifactScope._automataArtifactScopeBuilder();
}

    /* generated by template core.Method*/
 protected  AutomataScopeBuilder _automataScopeBuilder ()  {
      return new AutomataScopeBuilder();
}

    /* generated by template core.Method*/
 public  static  AutomataScopeBuilder automataScopeBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (automataScope == null) {
    automataScope = getMill();
  }
  return automataScope._automataScopeBuilder();
}

    /* generated by template core.Method*/
 public  static  de.monticore.types.typesymbols._symboltable.TypeSymbolBuilder typeSymbolBuilder ()  {
      return de.monticore.types.typesymbols._symboltable.TypeSymbolsSymTabMill.typeSymbolBuilder();
}

    /* generated by template core.Method*/
 public  static  de.monticore.types.typesymbols._symboltable.TypeVarSymbolBuilder typeVarSymbolBuilder ()  {
      return de.monticore.types.typesymbols._symboltable.TypeSymbolsSymTabMill.typeVarSymbolBuilder();
}

    /* generated by template core.Method*/
 public  static  de.monticore.types.typesymbols._symboltable.FieldSymbolBuilder fieldSymbolBuilder ()  {
      return de.monticore.types.typesymbols._symboltable.TypeSymbolsSymTabMill.fieldSymbolBuilder();
}

    /* generated by template core.Method*/
 public  static  de.monticore.types.typesymbols._symboltable.MethodSymbolBuilder methodSymbolBuilder ()  {
      return de.monticore.types.typesymbols._symboltable.TypeSymbolsSymTabMill.methodSymbolBuilder();
}

}
