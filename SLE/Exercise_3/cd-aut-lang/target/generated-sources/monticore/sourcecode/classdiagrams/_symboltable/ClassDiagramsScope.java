/* generated from model ClassDiagrams */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package classdiagrams._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ClassDiagramsScope  implements classdiagrams._symboltable.IClassDiagramsScope {

    /* generated by template core.Attribute*/
 protected  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.TypeVarSymbol> typeVarSymbols = com.google.common.collect.LinkedListMultimap.create();

    /* generated by template core.Attribute*/
 protected  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.FieldSymbol> fieldSymbols = com.google.common.collect.LinkedListMultimap.create();

    /* generated by template core.Attribute*/
 protected  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.MethodSymbol> methodSymbols = com.google.common.collect.LinkedListMultimap.create();

    /* generated by template core.Attribute*/
 protected  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.TypeSymbol> typeSymbols = com.google.common.collect.LinkedListMultimap.create();

    /* generated by template core.Attribute*/
 protected  com.google.common.collect.LinkedListMultimap<String,classdiagrams._symboltable.CDDefinitionSymbol> cDDefinitionSymbols = com.google.common.collect.LinkedListMultimap.create();

    /* generated by template core.Attribute*/
 protected  boolean typeVarSymbolsAlreadyResolved = false;

    /* generated by template core.Attribute*/
 protected  boolean fieldSymbolsAlreadyResolved = false;

    /* generated by template core.Attribute*/
 protected  boolean methodSymbolsAlreadyResolved = false;

    /* generated by template core.Attribute*/
 protected  boolean typeSymbolsAlreadyResolved = false;

    /* generated by template core.Attribute*/
 protected  boolean cDDefinitionSymbolsAlreadyResolved = false;

    /* generated by template core.Attribute*/
 protected  classdiagrams._symboltable.IClassDiagramsScope enclosingScope ;

    /* generated by template core.Attribute*/
 protected  Optional<de.monticore.symboltable.IScopeSpanningSymbol> spanningSymbol = Optional.empty();

    /* generated by template core.Attribute*/
 protected  boolean shadowing ;

    /* generated by template core.Attribute*/
 protected  boolean exportingSymbols = true;

    /* generated by template core.Attribute*/
 protected  Optional<String> name = Optional.empty();

    /* generated by template core.Attribute*/
 protected  Optional<de.monticore.ast.ASTNode> astNode = Optional.empty();

    /* generated by template core.Attribute*/
 protected  List<classdiagrams._symboltable.IClassDiagramsScope> subScopes = new java.util.ArrayList<>();


    /* generated by template core.Constructor*/
 public  ClassDiagramsScope()  {
    super();
    this.name = Optional.empty();
}

    /* generated by template core.Constructor*/
 public  ClassDiagramsScope(boolean shadowing)  {
    this.shadowing = shadowing;
    this.name = Optional.empty();
}

    /* generated by template core.Constructor*/
 public  ClassDiagramsScope(classdiagrams._symboltable.IClassDiagramsScope enclosingScope)  {
    this(enclosingScope, false);
}

    /* generated by template core.Constructor*/
 public  ClassDiagramsScope(classdiagrams._symboltable.IClassDiagramsScope enclosingScope,boolean shadowing)  {
    this.setEnclosingScope(enclosingScope);
    this.shadowing = shadowing; 
    this.name = Optional.empty();
}


    /* generated by template core.Method*/
 public  void add (de.monticore.types.typesymbols._symboltable.TypeVarSymbol symbol)  {
      this.typeVarSymbols.put(symbol.getName(), symbol);
    symbol.setEnclosingScope(this);
}

    /* generated by template core.Method*/
 public  void remove (de.monticore.types.typesymbols._symboltable.TypeVarSymbol symbol)  {
      this.typeVarSymbols.remove(symbol.getName(), symbol);
}

    /* generated by template core.Method*/
 public  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.TypeVarSymbol> getTypeVarSymbols ()  {
      return this.typeVarSymbols;
}

    /* generated by template core.Method*/
 public  void add (de.monticore.types.typesymbols._symboltable.FieldSymbol symbol)  {
      this.fieldSymbols.put(symbol.getName(), symbol);
    symbol.setEnclosingScope(this);
}

    /* generated by template core.Method*/
 public  void remove (de.monticore.types.typesymbols._symboltable.FieldSymbol symbol)  {
      this.fieldSymbols.remove(symbol.getName(), symbol);
}

    /* generated by template core.Method*/
 public  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.FieldSymbol> getFieldSymbols ()  {
      return this.fieldSymbols;
}

    /* generated by template core.Method*/
 public  void add (de.monticore.types.typesymbols._symboltable.MethodSymbol symbol)  {
      this.methodSymbols.put(symbol.getName(), symbol);
    symbol.setEnclosingScope(this);
}

    /* generated by template core.Method*/
 public  void remove (de.monticore.types.typesymbols._symboltable.MethodSymbol symbol)  {
      this.methodSymbols.remove(symbol.getName(), symbol);
}

    /* generated by template core.Method*/
 public  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.MethodSymbol> getMethodSymbols ()  {
      return this.methodSymbols;
}

    /* generated by template core.Method*/
 public  void add (de.monticore.types.typesymbols._symboltable.TypeSymbol symbol)  {
      this.typeSymbols.put(symbol.getName(), symbol);
    symbol.setEnclosingScope(this);
}

    /* generated by template core.Method*/
 public  void remove (de.monticore.types.typesymbols._symboltable.TypeSymbol symbol)  {
      this.typeSymbols.remove(symbol.getName(), symbol);
}

    /* generated by template core.Method*/
 public  com.google.common.collect.LinkedListMultimap<String,de.monticore.types.typesymbols._symboltable.TypeSymbol> getTypeSymbols ()  {
      return this.typeSymbols;
}

    /* generated by template core.Method*/
 public  void add (classdiagrams._symboltable.CDDefinitionSymbol symbol)  {
      this.cDDefinitionSymbols.put(symbol.getName(), symbol);
    symbol.setEnclosingScope(this);
}

    /* generated by template core.Method*/
 public  void remove (classdiagrams._symboltable.CDDefinitionSymbol symbol)  {
      this.cDDefinitionSymbols.remove(symbol.getName(), symbol);
}

    /* generated by template core.Method*/
 public  com.google.common.collect.LinkedListMultimap<String,classdiagrams._symboltable.CDDefinitionSymbol> getCDDefinitionSymbols ()  {
      return this.cDDefinitionSymbols;
}

    /* generated by template core.Method*/
 public  boolean isTypeVarSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.typeVarSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setTypeVarSymbolsAlreadyResolved (boolean typeVarSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.typeVarSymbolsAlreadyResolved = typeVarSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isFieldSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.fieldSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setFieldSymbolsAlreadyResolved (boolean fieldSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.fieldSymbolsAlreadyResolved = fieldSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isMethodSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.methodSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setMethodSymbolsAlreadyResolved (boolean methodSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.methodSymbolsAlreadyResolved = methodSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isTypeSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.typeSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setTypeSymbolsAlreadyResolved (boolean typeSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.typeSymbolsAlreadyResolved = typeSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isCDDefinitionSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.cDDefinitionSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setCDDefinitionSymbolsAlreadyResolved (boolean cDDefinitionSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.cDDefinitionSymbolsAlreadyResolved = cDDefinitionSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  int getSymbolsSize ()  {
      /* generated by template _symboltable.scope.GetSymbolSize*/

    return
  typeVarSymbols.size()  + 
  fieldSymbols.size()  + 
  methodSymbols.size()  + 
  typeSymbols.size()  + 
  cDDefinitionSymbols.size() 
  ;
}

    /* generated by template core.Method*/
 public  classdiagrams._symboltable.IClassDiagramsScope getEnclosingScope ()  {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (classdiagrams._symboltable.IClassDiagramsScope enclosingScope)  {
      /* generated by template _symboltable.scope.SetEnclosingScope*/
if (this.enclosingScope != null && enclosingScope != null) {
if (this.enclosingScope == enclosingScope) {
      return;
    }
    Log.warn("0xA1042 Scope \"" + getName() + "\" has already an enclosing scope.");
  }

  // remove this scope from current (old) enclosing scope, if exists.
if (this.enclosingScope != null) {
this.enclosingScope.removeSubScope(this);
  }

  // add this scope to new enclosing scope, if exists.
if (enclosingScope != null) {
enclosingScope.addSubScope(this);
  }

  // set new enclosing scope (or empty)
  this.enclosingScope = enclosingScope;
}

    /* generated by template core.Method*/
 public  de.monticore.symboltable.IScopeSpanningSymbol getSpanningSymbol ()  {
      /* generated by template methods.opt.Get*/

if (isPresentSpanningSymbol()) {
return this.spanningSymbol.get();
}
Log.error("0xA7003x245 SpanningSymbol can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentSpanningSymbol ()  {
      /* generated by template methods.opt.IsPresent*/

return this.spanningSymbol.isPresent();

}

    /* generated by template core.Method*/
 public  void setSpanningSymbol (de.monticore.symboltable.IScopeSpanningSymbol spanningSymbol)  {
      /* generated by template _symboltable.scope.SetSpanningSymbol*/

  /* generated by template methods.opt.Set*/

this.spanningSymbol = Optional.ofNullable(spanningSymbol);

  setName(spanningSymbol.getName());
}

    /* generated by template core.Method*/
 public  void setSpanningSymbolAbsent ()  {
      /* generated by template _symboltable.scope.SetSpanningSymbolAbsent*/

  /* generated by template methods.opt.SetAbsent*/

this.spanningSymbol = Optional.empty();

  setNameAbsent();
}

    /* generated by template core.Method*/
 public  boolean isShadowing ()  {
      /* generated by template methods.Get*/

return this.shadowing;

}

    /* generated by template core.Method*/
 public  void setShadowing (boolean shadowing)  {
      /* generated by template methods.Set*/

this.shadowing = shadowing;

}

    /* generated by template core.Method*/
 public  boolean isExportingSymbols ()  {
      /* generated by template methods.Get*/

return this.exportingSymbols;

}

    /* generated by template core.Method*/
 public  void setExportingSymbols (boolean exportingSymbols)  {
      /* generated by template methods.Set*/

this.exportingSymbols = exportingSymbols;

}

    /* generated by template core.Method*/
 public  String getName ()  {
      /* generated by template methods.opt.Get*/

if (isPresentName()) {
return this.name.get();
}
Log.error("0xA7003x855 Name can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentName ()  {
      /* generated by template methods.opt.IsPresent*/

return this.name.isPresent();

}

    /* generated by template core.Method*/
 public  void setName (String name)  {
      /* generated by template methods.opt.Set*/

this.name = Optional.ofNullable(name);

}

    /* generated by template core.Method*/
 public  void setNameAbsent ()  {
      /* generated by template methods.opt.SetAbsent*/

this.name = Optional.empty();

}

    /* generated by template core.Method*/
 public  de.monticore.ast.ASTNode getAstNode ()  {
      /* generated by template methods.opt.Get*/

if (isPresentAstNode()) {
return this.astNode.get();
}
Log.error("0xA7003x771 AstNode can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentAstNode ()  {
      /* generated by template methods.opt.IsPresent*/

return this.astNode.isPresent();

}

    /* generated by template core.Method*/
 public  void setAstNode (de.monticore.ast.ASTNode astNode)  {
      /* generated by template methods.opt.Set*/

this.astNode = Optional.ofNullable(astNode);

}

    /* generated by template core.Method*/
 public  void setAstNodeAbsent ()  {
      /* generated by template methods.opt.SetAbsent*/

this.astNode = Optional.empty();

}

    /* generated by template core.Method*/
 public  void addSubScope (classdiagrams._symboltable.IClassDiagramsScope subScope)  {
      /* generated by template _symboltable.scope.AddSubScope*/
  if (!this.subScopes.contains(subScope)) {
    this.subScopes.add(subScope);
    subScope.setEnclosingScope(this);
  }
}

    /* generated by template core.Method*/
 public  void removeSubScope (classdiagrams._symboltable.IClassDiagramsScope subScope)  {
      /* generated by template _symboltable.scope.RemoveSubScope*/
  this.subScopes.remove(subScope);
if (subScope.getEnclosingScope() != null && subScope.getEnclosingScope() == this) {
    subScope.setEnclosingScope(null);
  }
}

    /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.IClassDiagramsScope> getSubScopes ()  {
      /* generated by template _symboltable.scope.GetSubScopes*/
  return com.google.common.collect.ImmutableList.copyOf(subScopes);
}

    /* generated by template core.Method*/
 public  void setSubScopes (List<classdiagrams._symboltable.IClassDiagramsScope> subScopes)  {
      /* generated by template _symboltable.scope.SetSubScopes*/
  this.subScopes.forEach(this::removeSubScope);
  subScopes.forEach(this::addSubScope);
}

    /* generated by template core.Method*/
 public  void accept (classdiagrams._visitor.ClassDiagramsScopeVisitor visitor)  {
      visitor.handle(this);
}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mcsimplegenerictypes._visitor.MCSimpleGenericTypesScopeVisitor visitor)  {
      /* generated by template _symboltable.scope.Accept*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsScopeVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsScopeVisitor) visitor);
  } else {
    throw new UnsupportedOperationException("0xA7010x525 Scope node type ClassDiagramsScope expected a visitor of type classdiagrams._visitor.ClassDiagramsScopeVisitor, but got de.monticore.types.mcsimplegenerictypes._visitor.MCSimpleGenericTypesScopeVisitor.");
  }
}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsScopeVisitor visitor)  {
      /* generated by template _symboltable.scope.Accept*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsScopeVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsScopeVisitor) visitor);
  } else {
    throw new UnsupportedOperationException("0xA7010x192 Scope node type ClassDiagramsScope expected a visitor of type classdiagrams._visitor.ClassDiagramsScopeVisitor, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsScopeVisitor.");
  }
}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mccollectiontypes._visitor.MCCollectionTypesScopeVisitor visitor)  {
      /* generated by template _symboltable.scope.Accept*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsScopeVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsScopeVisitor) visitor);
  } else {
    throw new UnsupportedOperationException("0xA7010x860 Scope node type ClassDiagramsScope expected a visitor of type classdiagrams._visitor.ClassDiagramsScopeVisitor, but got de.monticore.types.mccollectiontypes._visitor.MCCollectionTypesScopeVisitor.");
  }
}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mcbasictypes._visitor.MCBasicTypesScopeVisitor visitor)  {
      /* generated by template _symboltable.scope.Accept*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsScopeVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsScopeVisitor) visitor);
  } else {
    throw new UnsupportedOperationException("0xA7010x208 Scope node type ClassDiagramsScope expected a visitor of type classdiagrams._visitor.ClassDiagramsScopeVisitor, but got de.monticore.types.mcbasictypes._visitor.MCBasicTypesScopeVisitor.");
  }
}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsScopeVisitor visitor)  {
      /* generated by template _symboltable.scope.Accept*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsScopeVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsScopeVisitor) visitor);
  } else {
    throw new UnsupportedOperationException("0xA7010x676 Scope node type ClassDiagramsScope expected a visitor of type classdiagrams._visitor.ClassDiagramsScopeVisitor, but got de.monticore.mcbasics._visitor.MCBasicsScopeVisitor.");
  }
}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.typesymbols._visitor.TypeSymbolsScopeVisitor visitor)  {
      /* generated by template _symboltable.scope.Accept*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsScopeVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsScopeVisitor) visitor);
  } else {
    throw new UnsupportedOperationException("0xA7010x831 Scope node type ClassDiagramsScope expected a visitor of type classdiagrams._visitor.ClassDiagramsScopeVisitor, but got de.monticore.types.typesymbols._visitor.TypeSymbolsScopeVisitor.");
  }
}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisScopeVisitor visitor)  {
      /* generated by template _symboltable.scope.Accept*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsScopeVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsScopeVisitor) visitor);
  } else {
    throw new UnsupportedOperationException("0xA7010x865 Scope node type ClassDiagramsScope expected a visitor of type classdiagrams._visitor.ClassDiagramsScopeVisitor, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisScopeVisitor.");
  }
}

    /* generated by template core.Method*/
 public  void addSubScope (de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope subScope)  {
      this.addSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void removeSubScope (de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope subScope)  {
      this.removeSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope newEnclosingScope)  {
      this.setEnclosingScope((classdiagrams._symboltable.IClassDiagramsScope) newEnclosingScope);
}

    /* generated by template core.Method*/
 public  void addSubScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope subScope)  {
      this.addSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void removeSubScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope subScope)  {
      this.removeSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope newEnclosingScope)  {
      this.setEnclosingScope((classdiagrams._symboltable.IClassDiagramsScope) newEnclosingScope);
}

    /* generated by template core.Method*/
 public  void addSubScope (de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope subScope)  {
      this.addSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void removeSubScope (de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope subScope)  {
      this.removeSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope newEnclosingScope)  {
      this.setEnclosingScope((classdiagrams._symboltable.IClassDiagramsScope) newEnclosingScope);
}

    /* generated by template core.Method*/
 public  void addSubScope (de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope subScope)  {
      this.addSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void removeSubScope (de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope subScope)  {
      this.removeSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope newEnclosingScope)  {
      this.setEnclosingScope((classdiagrams._symboltable.IClassDiagramsScope) newEnclosingScope);
}

    /* generated by template core.Method*/
 public  void addSubScope (de.monticore.mcbasics._symboltable.IMCBasicsScope subScope)  {
      this.addSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void removeSubScope (de.monticore.mcbasics._symboltable.IMCBasicsScope subScope)  {
      this.removeSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope newEnclosingScope)  {
      this.setEnclosingScope((classdiagrams._symboltable.IClassDiagramsScope) newEnclosingScope);
}

    /* generated by template core.Method*/
 public  void addSubScope (de.monticore.types.typesymbols._symboltable.ITypeSymbolsScope subScope)  {
      this.addSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void removeSubScope (de.monticore.types.typesymbols._symboltable.ITypeSymbolsScope subScope)  {
      this.removeSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.typesymbols._symboltable.ITypeSymbolsScope newEnclosingScope)  {
      this.setEnclosingScope((classdiagrams._symboltable.IClassDiagramsScope) newEnclosingScope);
}

    /* generated by template core.Method*/
 public  void addSubScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope subScope)  {
      this.addSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void removeSubScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope subScope)  {
      this.removeSubScope((classdiagrams._symboltable.IClassDiagramsScope) subScope);
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope newEnclosingScope)  {
      this.setEnclosingScope((classdiagrams._symboltable.IClassDiagramsScope) newEnclosingScope);
}

}
