/* generated from model ClassDiagrams */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package classdiagrams._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTCDInterface extends ASTCNode  implements classdiagrams._ast.ASTCDType,classdiagrams._ast.ASTClassDiagramsNode {

    /* generated by template core.Attribute*/
 protected  Optional<classdiagrams._ast.ASTModifier> modifier = Optional.empty();

    /* generated by template core.Attribute*/
 protected  java.util.List<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> r__interfaces = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  java.util.List<classdiagrams._ast.ASTCDAttribute> cDAttributes = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  java.util.List<classdiagrams._ast.ASTCDMethod> cDMethods = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  String name ;

    /* generated by template core.Attribute*/
 protected  classdiagrams._symboltable.IClassDiagramsScope enclosingScope ;


    /* generated by template core.Constructor*/
 protected  ASTCDInterface()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)  {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTCDInterface comp;
    if ((o instanceof ASTCDInterface)) {
      comp = (ASTCDInterface) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing modifier   
    if ( this.modifier.isPresent() != comp.modifier.isPresent() ||
      (this.modifier.isPresent() && !this.modifier.get().deepEquals(comp.modifier.get(), forceSameOrder)) ) {
      return false;
    }
    // comparing r__interfaces
    if (this.r__interfaces.size() != comp.r__interfaces.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> it1 = this.r__interfaces.iterator();
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> it2 = comp.r__interfaces.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> it1 = this.r__interfaces.iterator();
        while (it1.hasNext()) {
          de.monticore.types.mcbasictypes._ast.ASTMCObjectType oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> it2 = comp.r__interfaces.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing cDAttributes
    if (this.cDAttributes.size() != comp.cDAttributes.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<classdiagrams._ast.ASTCDAttribute> it1 = this.cDAttributes.iterator();
        Iterator<classdiagrams._ast.ASTCDAttribute> it2 = comp.cDAttributes.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<classdiagrams._ast.ASTCDAttribute> it1 = this.cDAttributes.iterator();
        while (it1.hasNext()) {
          classdiagrams._ast.ASTCDAttribute oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<classdiagrams._ast.ASTCDAttribute> it2 = comp.cDAttributes.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing cDMethods
    if (this.cDMethods.size() != comp.cDMethods.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<classdiagrams._ast.ASTCDMethod> it1 = this.cDMethods.iterator();
        Iterator<classdiagrams._ast.ASTCDMethod> it2 = comp.cDMethods.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<classdiagrams._ast.ASTCDMethod> it1 = this.cDMethods.iterator();
        while (it1.hasNext()) {
          classdiagrams._ast.ASTCDMethod oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<classdiagrams._ast.ASTCDMethod> it2 = comp.cDMethods.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)  {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithComments*/

      ASTCDInterface comp;
    if ((o instanceof ASTCDInterface)) {
      comp = (ASTCDInterface) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing modifier
    if ( this.modifier.isPresent() != comp.modifier.isPresent() ||
      (this.modifier.isPresent() && !this.modifier.get().deepEqualsWithComments(comp.modifier.get(), forceSameOrder)) ) {
      return false;
    }
    // comparing r__interfaces
    if (this.r__interfaces.size() != comp.r__interfaces.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> it1 = this.r__interfaces.iterator();
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> it2 = comp.r__interfaces.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> it1 = this.r__interfaces.iterator();
        while (it1.hasNext()) {
          de.monticore.types.mcbasictypes._ast.ASTMCObjectType oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> it2 = comp.r__interfaces.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing cDAttributes
    if (this.cDAttributes.size() != comp.cDAttributes.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<classdiagrams._ast.ASTCDAttribute> it1 = this.cDAttributes.iterator();
        Iterator<classdiagrams._ast.ASTCDAttribute> it2 = comp.cDAttributes.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<classdiagrams._ast.ASTCDAttribute> it1 = this.cDAttributes.iterator();
        while (it1.hasNext()) {
          classdiagrams._ast.ASTCDAttribute oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<classdiagrams._ast.ASTCDAttribute> it2 = comp.cDAttributes.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing cDMethods
    if (this.cDMethods.size() != comp.cDMethods.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<classdiagrams._ast.ASTCDMethod> it1 = this.cDMethods.iterator();
        Iterator<classdiagrams._ast.ASTCDMethod> it2 = comp.cDMethods.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<classdiagrams._ast.ASTCDMethod> it1 = this.cDMethods.iterator();
        while (it1.hasNext()) {
          classdiagrams._ast.ASTCDMethod oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<classdiagrams._ast.ASTCDMethod> it2 = comp.cDMethods.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)  {
      /* generated by template data.EqualAttributes*/

      ASTCDInterface comp;
    if ((o instanceof ASTCDInterface)) {
      comp = (ASTCDInterface) o;
    } else {
      return false;
    }
	// comparing name 
    if ( (this.name == null && comp.name != null) 
      || (this.name != null && !this.name.equals(comp.name)) ) {
      return false;
    }
    return true;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)  {
      /* generated by template data.EqualsWithComments*/

      ASTCDInterface comp;
    if ((o instanceof ASTCDInterface)) {
      comp = (ASTCDInterface) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTCDInterface deepClone ()  {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTCDInterface deepClone (ASTCDInterface result)  {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

    if (isPresentModifier()){
      result.setModifier(getModifier().deepClone());
    } else {
      result.setModifierAbsent();
    }
      getInterfaceList().forEach(s -> result.r__interfaces.add(s.deepClone()));
      getCDAttributeList().forEach(s -> result.cDAttributes.add(s.deepClone()));
      getCDMethodList().forEach(s -> result.cDMethods.add(s.deepClone()));
      result.setName(getName());
      result.setEnclosingScope(getEnclosingScope());
    
    return result;

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTModifier getModifier ()  {
      /* generated by template methods.opt.Get*/

if (isPresentModifier()) {
return this.modifier.get();
}
Log.error("0xA7003x300 Modifier can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentModifier ()  {
      /* generated by template methods.opt.IsPresent*/

return this.modifier.isPresent();

}

    /* generated by template core.Method*/
 public  boolean containsInterface (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllInterfaces (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> iteratorInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().size();

}

    /* generated by template core.Method*/
 public  de.monticore.types.mcbasictypes._ast.ASTMCObjectType[] toArrayInterfaces (de.monticore.types.mcbasictypes._ast.ASTMCObjectType[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> spliteratorInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> streamInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().stream();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> parallelStreamInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().parallelStream();

}

    /* generated by template core.Method*/
 public  de.monticore.types.mcbasictypes._ast.ASTMCObjectType getInterface (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfInterface (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfInterface (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsInterfaces (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> listIteratorInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> listIteratorInterfaces (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> subListInterfaces (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> getInterfaceList ()  {
      /* generated by template methods.Get*/

return this.r__interfaces;

}

    /* generated by template core.Method*/
 public  boolean containsCDAttribute (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllCDAttributes (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyCDAttributes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<classdiagrams._ast.ASTCDAttribute> iteratorCDAttributes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeCDAttributes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().size();

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDAttribute[] toArrayCDAttributes (classdiagrams._ast.ASTCDAttribute[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayCDAttributes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<classdiagrams._ast.ASTCDAttribute> spliteratorCDAttributes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<classdiagrams._ast.ASTCDAttribute> streamCDAttributes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().stream();

}

    /* generated by template core.Method*/
 public  Stream<classdiagrams._ast.ASTCDAttribute> parallelStreamCDAttributes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().parallelStream();

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDAttribute getCDAttribute (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfCDAttribute (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfCDAttribute (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsCDAttributes (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeCDAttributes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<classdiagrams._ast.ASTCDAttribute> listIteratorCDAttributes ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<classdiagrams._ast.ASTCDAttribute> listIteratorCDAttributes (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<classdiagrams._ast.ASTCDAttribute> subListCDAttributes (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<classdiagrams._ast.ASTCDAttribute> getCDAttributeList ()  {
      /* generated by template methods.Get*/

return this.cDAttributes;

}

    /* generated by template core.Method*/
 public  boolean containsCDMethod (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllCDMethods (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyCDMethods ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<classdiagrams._ast.ASTCDMethod> iteratorCDMethods ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeCDMethods ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().size();

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDMethod[] toArrayCDMethods (classdiagrams._ast.ASTCDMethod[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayCDMethods ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<classdiagrams._ast.ASTCDMethod> spliteratorCDMethods ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<classdiagrams._ast.ASTCDMethod> streamCDMethods ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().stream();

}

    /* generated by template core.Method*/
 public  Stream<classdiagrams._ast.ASTCDMethod> parallelStreamCDMethods ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().parallelStream();

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDMethod getCDMethod (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfCDMethod (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfCDMethod (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsCDMethods (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeCDMethods ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<classdiagrams._ast.ASTCDMethod> listIteratorCDMethods ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<classdiagrams._ast.ASTCDMethod> listIteratorCDMethods (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<classdiagrams._ast.ASTCDMethod> subListCDMethods (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<classdiagrams._ast.ASTCDMethod> getCDMethodList ()  {
      /* generated by template methods.Get*/

return this.cDMethods;

}

    /* generated by template core.Method*/
 public  String getName ()  {
      /* generated by template methods.Get*/

return this.name;

}

    /* generated by template core.Method*/
 public  void setModifier (classdiagrams._ast.ASTModifier modifier)  {
      /* generated by template methods.opt.Set*/

this.modifier = Optional.ofNullable(modifier);

}

    /* generated by template core.Method*/
 public  void setModifierAbsent ()  {
      /* generated by template methods.opt.SetAbsent*/

this.modifier = Optional.empty();

}

    /* generated by template core.Method*/
 public  void clearInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

this.getInterfaceList().clear();

}

    /* generated by template core.Method*/
 public  boolean addInterface (de.monticore.types.mcbasictypes._ast.ASTMCObjectType element)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllInterfaces (Collection<? extends de.monticore.types.mcbasictypes._ast.ASTMCObjectType> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeInterface (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllInterfaces (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllInterfaces (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfInterface (Predicate<? super de.monticore.types.mcbasictypes._ast.ASTMCObjectType> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachInterfaces (Consumer<? super de.monticore.types.mcbasictypes._ast.ASTMCObjectType> action)  {
      /* generated by template methods.MethodDelegate*/

this.getInterfaceList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addInterface (int index,de.monticore.types.mcbasictypes._ast.ASTMCObjectType element)  {
      /* generated by template methods.MethodDelegate*/

this.getInterfaceList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllInterfaces (int index,Collection<? extends de.monticore.types.mcbasictypes._ast.ASTMCObjectType> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  de.monticore.types.mcbasictypes._ast.ASTMCObjectType removeInterface (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().remove(index);

}

    /* generated by template core.Method*/
 public  de.monticore.types.mcbasictypes._ast.ASTMCObjectType setInterface (int index,de.monticore.types.mcbasictypes._ast.ASTMCObjectType element)  {
      /* generated by template methods.MethodDelegate*/

return this.getInterfaceList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllInterfaces (UnaryOperator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getInterfaceList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortInterfaces (Comparator<? super de.monticore.types.mcbasictypes._ast.ASTMCObjectType> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getInterfaceList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setInterfaceList (List<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> r__interfaces)  {
      /* generated by template methods.Set*/

this.r__interfaces = r__interfaces;

}

    /* generated by template core.Method*/
 public  void clearCDAttributes ()  {
      /* generated by template methods.MethodDelegate*/

this.getCDAttributeList().clear();

}

    /* generated by template core.Method*/
 public  boolean addCDAttribute (classdiagrams._ast.ASTCDAttribute element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllCDAttributes (Collection<? extends classdiagrams._ast.ASTCDAttribute> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeCDAttribute (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllCDAttributes (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllCDAttributes (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfCDAttribute (Predicate<? super classdiagrams._ast.ASTCDAttribute> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachCDAttributes (Consumer<? super classdiagrams._ast.ASTCDAttribute> action)  {
      /* generated by template methods.MethodDelegate*/

this.getCDAttributeList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addCDAttribute (int index,classdiagrams._ast.ASTCDAttribute element)  {
      /* generated by template methods.MethodDelegate*/

this.getCDAttributeList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllCDAttributes (int index,Collection<? extends classdiagrams._ast.ASTCDAttribute> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDAttribute removeCDAttribute (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().remove(index);

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDAttribute setCDAttribute (int index,classdiagrams._ast.ASTCDAttribute element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDAttributeList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllCDAttributes (UnaryOperator<classdiagrams._ast.ASTCDAttribute> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getCDAttributeList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortCDAttributes (Comparator<? super classdiagrams._ast.ASTCDAttribute> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getCDAttributeList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setCDAttributeList (List<classdiagrams._ast.ASTCDAttribute> cDAttributes)  {
      /* generated by template methods.Set*/

this.cDAttributes = cDAttributes;

}

    /* generated by template core.Method*/
 public  void clearCDMethods ()  {
      /* generated by template methods.MethodDelegate*/

this.getCDMethodList().clear();

}

    /* generated by template core.Method*/
 public  boolean addCDMethod (classdiagrams._ast.ASTCDMethod element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllCDMethods (Collection<? extends classdiagrams._ast.ASTCDMethod> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeCDMethod (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllCDMethods (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllCDMethods (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfCDMethod (Predicate<? super classdiagrams._ast.ASTCDMethod> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachCDMethods (Consumer<? super classdiagrams._ast.ASTCDMethod> action)  {
      /* generated by template methods.MethodDelegate*/

this.getCDMethodList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addCDMethod (int index,classdiagrams._ast.ASTCDMethod element)  {
      /* generated by template methods.MethodDelegate*/

this.getCDMethodList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllCDMethods (int index,Collection<? extends classdiagrams._ast.ASTCDMethod> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDMethod removeCDMethod (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().remove(index);

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDMethod setCDMethod (int index,classdiagrams._ast.ASTCDMethod element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDMethodList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllCDMethods (UnaryOperator<classdiagrams._ast.ASTCDMethod> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getCDMethodList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortCDMethods (Comparator<? super classdiagrams._ast.ASTCDMethod> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getCDMethodList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setCDMethodList (List<classdiagrams._ast.ASTCDMethod> cDMethods)  {
      /* generated by template methods.Set*/

this.cDMethods = cDMethods;

}

    /* generated by template core.Method*/
 public  void setName (String name)  {
      /* generated by template methods.Set*/

this.name = name;

}

    /* generated by template core.Method*/
 public  void accept (classdiagrams._visitor.ClassDiagramsVisitor visitor)  {
      /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mcsimplegenerictypes._visitor.MCSimpleGenericTypesVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x140 AST node type ASTCDInterface expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.mcsimplegenerictypes._visitor.MCSimpleGenericTypesVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x140 AST node type ASTCDInterface expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mccollectiontypes._visitor.MCCollectionTypesVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x140 AST node type ASTCDInterface expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.mccollectiontypes._visitor.MCCollectionTypesVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x140 AST node type ASTCDInterface expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x140 AST node type ASTCDInterface expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.mcbasics._visitor.MCBasicsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.typesymbols._visitor.TypeSymbolsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x140 AST node type ASTCDInterface expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.typesymbols._visitor.TypeSymbolsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x140 AST node type ASTCDInterface expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTCDInterface _construct ()  {
      return classdiagrams._ast.ClassDiagramsNodeFactory.createASTCDInterface();
}

    /* generated by template core.Method*/
 public  Collection<de.monticore.ast.ASTNode> get_Children ()  {
      /* generated by template _ast.ast_class.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if (isPresentModifier()) {
          result.add(getModifier());
        }
        result.addAll(getInterfaceList());
        result.addAll(getCDAttributeList());
        result.addAll(getCDMethodList());
    return result;

}

    /* generated by template core.Method*/
 public  classdiagrams._symboltable.IClassDiagramsScope getEnclosingScope ()  {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (classdiagrams._symboltable.IClassDiagramsScope enclosingScope)  {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x629The EnclosingScope form type de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x221The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x007The EnclosingScope form type de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x942The EnclosingScope form type de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x026The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.typesymbols._symboltable.ITypeSymbolsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x367The EnclosingScope form type de.monticore.types.typesymbols._symboltable.ITypeSymbolsScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x456The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

}
