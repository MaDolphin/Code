/* generated from model ClassDiagrams */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package classdiagrams._cocos;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;

/* generated by template core.Annotations*/
// empty template

 public  class ClassDiagramsCoCoChecker  implements classdiagrams._visitor.ClassDiagramsInheritanceVisitor {

    /* generated by template core.Attribute*/
 private  classdiagrams._visitor.ClassDiagramsVisitor realThis = this;

    /* generated by template core.Attribute*/
 private  List<classdiagrams._cocos.ClassDiagramsCoCoChecker> classdiagrams__cocos_ClassDiagramsCoCoChecker = new ArrayList<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTCDCompilationUnitCoCo> classdiagrams__ast_ASTCDCompilationUnitCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTCDDefinitionCoCo> classdiagrams__ast_ASTCDDefinitionCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTCDClassCoCo> classdiagrams__ast_ASTCDClassCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTTImplementsCoCo> classdiagrams__ast_ASTTImplementsCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTCDInterfaceCoCo> classdiagrams__ast_ASTCDInterfaceCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTCDAttributeCoCo> classdiagrams__ast_ASTCDAttributeCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTCDConstructorCoCo> classdiagrams__ast_ASTCDConstructorCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTCDMethodCoCo> classdiagrams__ast_ASTCDMethodCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTCDParameterCoCo> classdiagrams__ast_ASTCDParameterCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTModifierCoCo> classdiagrams__ast_ASTModifierCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTCDTypeCoCo> classdiagrams__ast_ASTCDTypeCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTCDFieldCoCo> classdiagrams__ast_ASTCDFieldCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTCDMethOrConstrCoCo> classdiagrams__ast_ASTCDMethOrConstrCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<classdiagrams._cocos.ClassDiagramsASTClassDiagramsNodeCoCo> classdiagrams__ast_ASTClassDiagramsNodeCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  List<de.monticore.types.mcsimplegenerictypes._cocos.MCSimpleGenericTypesCoCoChecker> de_monticore_types_mcsimplegenerictypes__cocos_MCSimpleGenericTypesCoCoChecker = new ArrayList<>(Arrays.asList(new de.monticore.types.mcsimplegenerictypes._cocos.MCSimpleGenericTypesCoCoChecker()));

    /* generated by template core.Attribute*/
 private  List<de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsCoCoChecker> de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker = new ArrayList<>(Arrays.asList(new de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsCoCoChecker()));

    /* generated by template core.Attribute*/
 private  List<de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesCoCoChecker> de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker = new ArrayList<>(Arrays.asList(new de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesCoCoChecker()));

    /* generated by template core.Attribute*/
 private  List<de.monticore.types.mcbasictypes._cocos.MCBasicTypesCoCoChecker> de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker = new ArrayList<>(Arrays.asList(new de.monticore.types.mcbasictypes._cocos.MCBasicTypesCoCoChecker()));

    /* generated by template core.Attribute*/
 private  List<de.monticore.mcbasics._cocos.MCBasicsCoCoChecker> de_monticore_mcbasics__cocos_MCBasicsCoCoChecker = new ArrayList<>(Arrays.asList(new de.monticore.mcbasics._cocos.MCBasicsCoCoChecker()));

    /* generated by template core.Attribute*/
 private  List<de.monticore.types.typesymbols._cocos.TypeSymbolsCoCoChecker> de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker = new ArrayList<>(Arrays.asList(new de.monticore.types.typesymbols._cocos.TypeSymbolsCoCoChecker()));

    /* generated by template core.Attribute*/
 private  List<de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisCoCoChecker> de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker = new ArrayList<>(Arrays.asList(new de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisCoCoChecker()));


    /* generated by template core.Constructor*/
 public  ClassDiagramsCoCoChecker()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  classdiagrams._visitor.ClassDiagramsVisitor getRealThis ()  {
      /* generated by template methods.Get*/

return this.realThis;

}

    /* generated by template core.Method*/
 public  void setRealThis (classdiagrams._visitor.ClassDiagramsVisitor realThis)  {
      /* generated by template methods.Set*/

this.realThis = realThis;

}

    /* generated by template core.Method*/
 public  void addChecker (classdiagrams._cocos.ClassDiagramsCoCoChecker checker)  {
      this.classdiagrams__cocos_ClassDiagramsCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (classdiagrams._ast.ASTClassDiagramsNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTCDCompilationUnitCoCo coco)  {
      classdiagrams__ast_ASTCDCompilationUnitCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDCompilationUnit node)  {
      for (classdiagrams._cocos.ClassDiagramsASTCDCompilationUnitCoCo coco : classdiagrams__ast_ASTCDCompilationUnitCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTCDDefinitionCoCo coco)  {
      classdiagrams__ast_ASTCDDefinitionCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDDefinition node)  {
      for (classdiagrams._cocos.ClassDiagramsASTCDDefinitionCoCo coco : classdiagrams__ast_ASTCDDefinitionCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTCDClassCoCo coco)  {
      classdiagrams__ast_ASTCDClassCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDClass node)  {
      for (classdiagrams._cocos.ClassDiagramsASTCDClassCoCo coco : classdiagrams__ast_ASTCDClassCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTTImplementsCoCo coco)  {
      classdiagrams__ast_ASTTImplementsCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTTImplements node)  {
      for (classdiagrams._cocos.ClassDiagramsASTTImplementsCoCo coco : classdiagrams__ast_ASTTImplementsCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTCDInterfaceCoCo coco)  {
      classdiagrams__ast_ASTCDInterfaceCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDInterface node)  {
      for (classdiagrams._cocos.ClassDiagramsASTCDInterfaceCoCo coco : classdiagrams__ast_ASTCDInterfaceCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTCDAttributeCoCo coco)  {
      classdiagrams__ast_ASTCDAttributeCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDAttribute node)  {
      for (classdiagrams._cocos.ClassDiagramsASTCDAttributeCoCo coco : classdiagrams__ast_ASTCDAttributeCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTCDConstructorCoCo coco)  {
      classdiagrams__ast_ASTCDConstructorCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDConstructor node)  {
      for (classdiagrams._cocos.ClassDiagramsASTCDConstructorCoCo coco : classdiagrams__ast_ASTCDConstructorCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTCDMethodCoCo coco)  {
      classdiagrams__ast_ASTCDMethodCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDMethod node)  {
      for (classdiagrams._cocos.ClassDiagramsASTCDMethodCoCo coco : classdiagrams__ast_ASTCDMethodCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTCDParameterCoCo coco)  {
      classdiagrams__ast_ASTCDParameterCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDParameter node)  {
      for (classdiagrams._cocos.ClassDiagramsASTCDParameterCoCo coco : classdiagrams__ast_ASTCDParameterCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTModifierCoCo coco)  {
      classdiagrams__ast_ASTModifierCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTModifier node)  {
      for (classdiagrams._cocos.ClassDiagramsASTModifierCoCo coco : classdiagrams__ast_ASTModifierCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTCDTypeCoCo coco)  {
      classdiagrams__ast_ASTCDTypeCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDType node)  {
      for (classdiagrams._cocos.ClassDiagramsASTCDTypeCoCo coco : classdiagrams__ast_ASTCDTypeCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTCDFieldCoCo coco)  {
      classdiagrams__ast_ASTCDFieldCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDField node)  {
      for (classdiagrams._cocos.ClassDiagramsASTCDFieldCoCo coco : classdiagrams__ast_ASTCDFieldCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTCDMethOrConstrCoCo coco)  {
      classdiagrams__ast_ASTCDMethOrConstrCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDMethOrConstr node)  {
      for (classdiagrams._cocos.ClassDiagramsASTCDMethOrConstrCoCo coco : classdiagrams__ast_ASTCDMethOrConstrCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (classdiagrams._cocos.ClassDiagramsASTClassDiagramsNodeCoCo coco)  {
      classdiagrams__ast_ASTClassDiagramsNodeCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTClassDiagramsNode node)  {
      for (classdiagrams._cocos.ClassDiagramsASTClassDiagramsNodeCoCo coco : classdiagrams__ast_ASTClassDiagramsNodeCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
classdiagrams__cocos_ClassDiagramsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  void addChecker (de.monticore.types.mcsimplegenerictypes._cocos.MCSimpleGenericTypesCoCoChecker checker)  {
      this.de_monticore_types_mcsimplegenerictypes__cocos_MCSimpleGenericTypesCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (de.monticore.types.mcsimplegenerictypes._ast.ASTMCSimpleGenericTypesNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcsimplegenerictypes._cocos.MCSimpleGenericTypesASTMCBasicGenericTypeCoCo coco)  {
      de_monticore_types_mcsimplegenerictypes__cocos_MCSimpleGenericTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcsimplegenerictypes._ast.ASTMCBasicGenericType node)  {
      de_monticore_types_mcsimplegenerictypes__cocos_MCSimpleGenericTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcsimplegenerictypes._cocos.MCSimpleGenericTypesASTMCCustomTypeArgumentCoCo coco)  {
      de_monticore_types_mcsimplegenerictypes__cocos_MCSimpleGenericTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcsimplegenerictypes._ast.ASTMCCustomTypeArgument node)  {
      de_monticore_types_mcsimplegenerictypes__cocos_MCSimpleGenericTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcsimplegenerictypes._cocos.MCSimpleGenericTypesASTMCSimpleGenericTypesNodeCoCo coco)  {
      de_monticore_types_mcsimplegenerictypes__cocos_MCSimpleGenericTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcsimplegenerictypes._ast.ASTMCSimpleGenericTypesNode node)  {
      de_monticore_types_mcsimplegenerictypes__cocos_MCSimpleGenericTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  void addChecker (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsCoCoChecker checker)  {
      this.de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNullLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTNullLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBooleanLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTCharLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTCharLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTStringLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNatLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTNatLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNatLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicLongLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicLongLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicFloatLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicFloatLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicDoubleLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicDoubleLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNumericLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNumericLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTMCCommonLiteralsNodeCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  void addChecker (de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesCoCoChecker checker)  {
      this.de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (de.monticore.types.mccollectiontypes._ast.ASTMCCollectionTypesNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesASTMCListTypeCoCo coco)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mccollectiontypes._ast.ASTMCListType node)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesASTMCOptionalTypeCoCo coco)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mccollectiontypes._ast.ASTMCOptionalType node)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesASTMCMapTypeCoCo coco)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mccollectiontypes._ast.ASTMCMapType node)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesASTMCSetTypeCoCo coco)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mccollectiontypes._ast.ASTMCSetType node)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesASTMCBasicTypeArgumentCoCo coco)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mccollectiontypes._ast.ASTMCBasicTypeArgument node)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesASTMCPrimitiveTypeArgumentCoCo coco)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mccollectiontypes._ast.ASTMCPrimitiveTypeArgument node)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesASTMCGenericTypeCoCo coco)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mccollectiontypes._ast.ASTMCGenericType node)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesASTMCTypeArgumentCoCo coco)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mccollectiontypes._ast.ASTMCTypeArgument node)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mccollectiontypes._cocos.MCCollectionTypesASTMCCollectionTypesNodeCoCo coco)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mccollectiontypes._ast.ASTMCCollectionTypesNode node)  {
      de_monticore_types_mccollectiontypes__cocos_MCCollectionTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  void addChecker (de.monticore.types.mcbasictypes._cocos.MCBasicTypesCoCoChecker checker)  {
      this.de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (de.monticore.types.mcbasictypes._ast.ASTMCBasicTypesNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCQualifiedNameCoCo coco)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName node)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCImportStatementCoCo coco)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcbasictypes._ast.ASTMCImportStatement node)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCPrimitiveTypeCoCo coco)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType node)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCQualifiedTypeCoCo coco)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType node)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCReturnTypeCoCo coco)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcbasictypes._ast.ASTMCReturnType node)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCVoidTypeCoCo coco)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcbasictypes._ast.ASTMCVoidType node)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCTypeCoCo coco)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcbasictypes._ast.ASTMCType node)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCObjectTypeCoCo coco)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcbasictypes._ast.ASTMCObjectType node)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCBasicTypesNodeCoCo coco)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.mcbasictypes._ast.ASTMCBasicTypesNode node)  {
      de_monticore_types_mcbasictypes__cocos_MCBasicTypesCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  void addChecker (de.monticore.mcbasics._cocos.MCBasicsCoCoChecker checker)  {
      this.de_monticore_mcbasics__cocos_MCBasicsCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (de.monticore.mcbasics._ast.ASTMCBasicsNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.mcbasics._cocos.MCBasicsASTMCBasicsNodeCoCo coco)  {
      de_monticore_mcbasics__cocos_MCBasicsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.mcbasics._ast.ASTMCBasicsNode node)  {
      de_monticore_mcbasics__cocos_MCBasicsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  void addChecker (de.monticore.types.typesymbols._cocos.TypeSymbolsCoCoChecker checker)  {
      this.de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (de.monticore.types.typesymbols._ast.ASTTypeSymbolsNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.typesymbols._cocos.TypeSymbolsASTTypeCoCo coco)  {
      de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.typesymbols._ast.ASTType node)  {
      de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.typesymbols._cocos.TypeSymbolsASTTypeVarCoCo coco)  {
      de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.typesymbols._ast.ASTTypeVar node)  {
      de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.typesymbols._cocos.TypeSymbolsASTFieldCoCo coco)  {
      de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.typesymbols._ast.ASTField node)  {
      de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.typesymbols._cocos.TypeSymbolsASTMethodCoCo coco)  {
      de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.typesymbols._ast.ASTMethod node)  {
      de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.types.typesymbols._cocos.TypeSymbolsASTTypeSymbolsNodeCoCo coco)  {
      de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.types.typesymbols._ast.ASTTypeSymbolsNode node)  {
      de_monticore_types_typesymbols__cocos_TypeSymbolsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  void addChecker (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisCoCoChecker checker)  {
      this.de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTLiteralCoCo coco)  {
      de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mcliteralsbasis._ast.ASTLiteral node)  {
      de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  classdiagrams._cocos.ClassDiagramsCoCoChecker addCoCo (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTMCLiteralsBasisNodeCoCo coco)  {
      de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode node)  {
      de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker.stream().forEach(c -> c.visit(node));
}

}
