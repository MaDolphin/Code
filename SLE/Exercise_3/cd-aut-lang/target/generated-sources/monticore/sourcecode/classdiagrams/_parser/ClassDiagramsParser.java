/* generated by template parser.MCParser*/



package classdiagrams._parser;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;

import java.util.Optional;
import de.monticore.antlr4.MCConcreteParser;
import de.monticore.antlr4.MCErrorListener;

import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;

public class ClassDiagramsParser extends MCConcreteParser {

  protected ClassDiagramsAntlrParser create(String filename) throws IOException {
    ClassDiagramsAntlrLexer lexer = new ClassDiagramsAntlrLexer(new  ANTLRFileStream(filename, StandardCharsets.UTF_8.name()));
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    ClassDiagramsAntlrParser parser = new ClassDiagramsAntlrParser(tokens);
    lexer.setMCParser(parser);  
    lexer.removeErrorListeners();
    lexer.addErrorListener(new MCErrorListener(parser));
    parser.setFilename(filename);
    setError(false);
    return parser;
  }
  
  protected ClassDiagramsAntlrParser create(Reader reader) throws IOException {
    ClassDiagramsAntlrLexer lexer = new ClassDiagramsAntlrLexer(new ANTLRInputStream(reader));
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    ClassDiagramsAntlrParser parser = new ClassDiagramsAntlrParser(tokens);
    lexer.setMCParser(parser);  
    lexer.removeErrorListeners();
    lexer.addErrorListener(new MCErrorListener(parser));
    parser.setFilename("StringReader");
    setError(false);
    return parser;
  }
  
  /**
   * @see de.monticore.antlr4.MCConcreteParser#parse(java.lang.String)
   */
  @Override
  public Optional<classdiagrams._ast.ASTCDCompilationUnit> parse(String fileName) throws IOException {
    return parseCDCompilationUnit(fileName);
  }
  
  /**
   * @see de.monticore.antlr4.MCConcreteParser#parse(java.io.Reader)
   */
  @Override
  public Optional<classdiagrams._ast.ASTCDCompilationUnit> parse(Reader reader) throws IOException {
    return parseCDCompilationUnit(reader);
  }
  
  public Optional<classdiagrams._ast.ASTCDCompilationUnit> parse_String(String str) throws IOException {
    return parse_StringCDCompilationUnit(str);
  }
 
    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mcliteralsbasis._ast.ASTLiteral> parseLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mcliteralsbasis._ast.ASTLiteral ast;
    ast = parser.literal_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mcliteralsbasis._ast.ASTLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mcliteralsbasis._ast.ASTLiteral> parseLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mcliteralsbasis._ast.ASTLiteral ast;
    ast = parser.literal_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mcliteralsbasis._ast.ASTLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mcliteralsbasis._ast.ASTLiteral> parse_StringLiteral(String str) throws IOException {
    return parseLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTNullLiteral> parseNullLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTNullLiteral ast;
    ast = parser.nullLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTNullLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNullLiteral> parseNullLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTNullLiteral ast;
    ast = parser.nullLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTNullLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNullLiteral> parse_StringNullLiteral(String str) throws IOException {
    return parseNullLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral> parseBooleanLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral ast;
    ast = parser.booleanLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral> parseBooleanLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral ast;
    ast = parser.booleanLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral> parse_StringBooleanLiteral(String str) throws IOException {
    return parseBooleanLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTCharLiteral> parseCharLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTCharLiteral ast;
    ast = parser.charLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTCharLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTCharLiteral> parseCharLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTCharLiteral ast;
    ast = parser.charLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTCharLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTCharLiteral> parse_StringCharLiteral(String str) throws IOException {
    return parseCharLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parseStringLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTStringLiteral ast;
    ast = parser.stringLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parseStringLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTStringLiteral ast;
    ast = parser.stringLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parse_StringStringLiteral(String str) throws IOException {
    return parseStringLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTNatLiteral> parseNatLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTNatLiteral ast;
    ast = parser.natLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTNatLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNatLiteral> parseNatLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTNatLiteral ast;
    ast = parser.natLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTNatLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNatLiteral> parse_StringNatLiteral(String str) throws IOException {
    return parseNatLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral> parseSignedNatLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral ast;
    ast = parser.signedNatLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral> parseSignedNatLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral ast;
    ast = parser.signedNatLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral> parse_StringSignedNatLiteral(String str) throws IOException {
    return parseSignedNatLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral> parseBasicLongLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral ast;
    ast = parser.basicLongLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral> parseBasicLongLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral ast;
    ast = parser.basicLongLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral> parse_StringBasicLongLiteral(String str) throws IOException {
    return parseBasicLongLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral> parseSignedBasicLongLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral ast;
    ast = parser.signedBasicLongLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral> parseSignedBasicLongLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral ast;
    ast = parser.signedBasicLongLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral> parse_StringSignedBasicLongLiteral(String str) throws IOException {
    return parseSignedBasicLongLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral> parseBasicFloatLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral ast;
    ast = parser.basicFloatLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral> parseBasicFloatLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral ast;
    ast = parser.basicFloatLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral> parse_StringBasicFloatLiteral(String str) throws IOException {
    return parseBasicFloatLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral> parseSignedBasicFloatLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral ast;
    ast = parser.signedBasicFloatLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral> parseSignedBasicFloatLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral ast;
    ast = parser.signedBasicFloatLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral> parse_StringSignedBasicFloatLiteral(String str) throws IOException {
    return parseSignedBasicFloatLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral> parseBasicDoubleLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral ast;
    ast = parser.basicDoubleLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral> parseBasicDoubleLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral ast;
    ast = parser.basicDoubleLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral> parse_StringBasicDoubleLiteral(String str) throws IOException {
    return parseBasicDoubleLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral> parseSignedBasicDoubleLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral ast;
    ast = parser.signedBasicDoubleLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral> parseSignedBasicDoubleLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral ast;
    ast = parser.signedBasicDoubleLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral> parse_StringSignedBasicDoubleLiteral(String str) throws IOException {
    return parseSignedBasicDoubleLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral> parseSignedLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral ast;
    ast = parser.signedLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral> parseSignedLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral ast;
    ast = parser.signedLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral> parse_StringSignedLiteral(String str) throws IOException {
    return parseSignedLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral> parseNumericLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral ast;
    ast = parser.numericLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral> parseNumericLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral ast;
    ast = parser.numericLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral> parse_StringNumericLiteral(String str) throws IOException {
    return parseNumericLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral> parseSignedNumericLiteral(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral ast;
    ast = parser.signedNumericLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral> parseSignedNumericLiteral(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral ast;
    ast = parser.signedNumericLiteral_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral> parse_StringSignedNumericLiteral(String str) throws IOException {
    return parseSignedNumericLiteral(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> parseMCQualifiedName(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName ast;
    ast = parser.mCQualifiedName_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> parseMCQualifiedName(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName ast;
    ast = parser.mCQualifiedName_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> parse_StringMCQualifiedName(String str) throws IOException {
    return parseMCQualifiedName(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> parseMCImportStatement(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mcbasictypes._ast.ASTMCImportStatement ast;
    ast = parser.mCImportStatement_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> parseMCImportStatement(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mcbasictypes._ast.ASTMCImportStatement ast;
    ast = parser.mCImportStatement_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> parse_StringMCImportStatement(String str) throws IOException {
    return parseMCImportStatement(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType> parseMCPrimitiveType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType ast;
    ast = parser.mCPrimitiveType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType> parseMCPrimitiveType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType ast;
    ast = parser.mCPrimitiveType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType> parse_StringMCPrimitiveType(String str) throws IOException {
    return parseMCPrimitiveType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType> parseMCQualifiedType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType ast;
    ast = parser.mCQualifiedType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType> parseMCQualifiedType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType ast;
    ast = parser.mCQualifiedType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType> parse_StringMCQualifiedType(String str) throws IOException {
    return parseMCQualifiedType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mcbasictypes._ast.ASTMCReturnType> parseMCReturnType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mcbasictypes._ast.ASTMCReturnType ast;
    ast = parser.mCReturnType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCReturnType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCReturnType> parseMCReturnType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mcbasictypes._ast.ASTMCReturnType ast;
    ast = parser.mCReturnType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCReturnType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCReturnType> parse_StringMCReturnType(String str) throws IOException {
    return parseMCReturnType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mcbasictypes._ast.ASTMCVoidType> parseMCVoidType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mcbasictypes._ast.ASTMCVoidType ast;
    ast = parser.mCVoidType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCVoidType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCVoidType> parseMCVoidType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mcbasictypes._ast.ASTMCVoidType ast;
    ast = parser.mCVoidType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCVoidType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCVoidType> parse_StringMCVoidType(String str) throws IOException {
    return parseMCVoidType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mcbasictypes._ast.ASTMCType> parseMCType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mcbasictypes._ast.ASTMCType ast;
    ast = parser.mCType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCType> parseMCType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mcbasictypes._ast.ASTMCType ast;
    ast = parser.mCType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCType> parse_StringMCType(String str) throws IOException {
    return parseMCType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> parseMCObjectType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mcbasictypes._ast.ASTMCObjectType ast;
    ast = parser.mCObjectType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> parseMCObjectType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mcbasictypes._ast.ASTMCObjectType ast;
    ast = parser.mCObjectType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> parse_StringMCObjectType(String str) throws IOException {
    return parseMCObjectType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mccollectiontypes._ast.ASTMCListType> parseMCListType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mccollectiontypes._ast.ASTMCListType ast;
    ast = parser.mCListType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCListType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCListType> parseMCListType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mccollectiontypes._ast.ASTMCListType ast;
    ast = parser.mCListType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCListType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCListType> parse_StringMCListType(String str) throws IOException {
    return parseMCListType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mccollectiontypes._ast.ASTMCOptionalType> parseMCOptionalType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mccollectiontypes._ast.ASTMCOptionalType ast;
    ast = parser.mCOptionalType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCOptionalType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCOptionalType> parseMCOptionalType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mccollectiontypes._ast.ASTMCOptionalType ast;
    ast = parser.mCOptionalType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCOptionalType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCOptionalType> parse_StringMCOptionalType(String str) throws IOException {
    return parseMCOptionalType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mccollectiontypes._ast.ASTMCMapType> parseMCMapType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mccollectiontypes._ast.ASTMCMapType ast;
    ast = parser.mCMapType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCMapType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCMapType> parseMCMapType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mccollectiontypes._ast.ASTMCMapType ast;
    ast = parser.mCMapType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCMapType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCMapType> parse_StringMCMapType(String str) throws IOException {
    return parseMCMapType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mccollectiontypes._ast.ASTMCSetType> parseMCSetType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mccollectiontypes._ast.ASTMCSetType ast;
    ast = parser.mCSetType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCSetType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCSetType> parseMCSetType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mccollectiontypes._ast.ASTMCSetType ast;
    ast = parser.mCSetType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCSetType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCSetType> parse_StringMCSetType(String str) throws IOException {
    return parseMCSetType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mccollectiontypes._ast.ASTMCBasicTypeArgument> parseMCBasicTypeArgument(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mccollectiontypes._ast.ASTMCBasicTypeArgument ast;
    ast = parser.mCBasicTypeArgument_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCBasicTypeArgument> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCBasicTypeArgument> parseMCBasicTypeArgument(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mccollectiontypes._ast.ASTMCBasicTypeArgument ast;
    ast = parser.mCBasicTypeArgument_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCBasicTypeArgument> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCBasicTypeArgument> parse_StringMCBasicTypeArgument(String str) throws IOException {
    return parseMCBasicTypeArgument(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mccollectiontypes._ast.ASTMCPrimitiveTypeArgument> parseMCPrimitiveTypeArgument(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mccollectiontypes._ast.ASTMCPrimitiveTypeArgument ast;
    ast = parser.mCPrimitiveTypeArgument_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCPrimitiveTypeArgument> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCPrimitiveTypeArgument> parseMCPrimitiveTypeArgument(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mccollectiontypes._ast.ASTMCPrimitiveTypeArgument ast;
    ast = parser.mCPrimitiveTypeArgument_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCPrimitiveTypeArgument> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCPrimitiveTypeArgument> parse_StringMCPrimitiveTypeArgument(String str) throws IOException {
    return parseMCPrimitiveTypeArgument(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mccollectiontypes._ast.ASTMCGenericType> parseMCGenericType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mccollectiontypes._ast.ASTMCGenericType ast;
    ast = parser.mCGenericType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCGenericType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCGenericType> parseMCGenericType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mccollectiontypes._ast.ASTMCGenericType ast;
    ast = parser.mCGenericType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCGenericType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCGenericType> parse_StringMCGenericType(String str) throws IOException {
    return parseMCGenericType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mccollectiontypes._ast.ASTMCTypeArgument> parseMCTypeArgument(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mccollectiontypes._ast.ASTMCTypeArgument ast;
    ast = parser.mCTypeArgument_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCTypeArgument> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCTypeArgument> parseMCTypeArgument(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mccollectiontypes._ast.ASTMCTypeArgument ast;
    ast = parser.mCTypeArgument_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mccollectiontypes._ast.ASTMCTypeArgument> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mccollectiontypes._ast.ASTMCTypeArgument> parse_StringMCTypeArgument(String str) throws IOException {
    return parseMCTypeArgument(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mcsimplegenerictypes._ast.ASTMCBasicGenericType> parseMCBasicGenericType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mcsimplegenerictypes._ast.ASTMCBasicGenericType ast;
    ast = parser.mCBasicGenericType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcsimplegenerictypes._ast.ASTMCBasicGenericType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mcsimplegenerictypes._ast.ASTMCBasicGenericType> parseMCBasicGenericType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mcsimplegenerictypes._ast.ASTMCBasicGenericType ast;
    ast = parser.mCBasicGenericType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcsimplegenerictypes._ast.ASTMCBasicGenericType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mcsimplegenerictypes._ast.ASTMCBasicGenericType> parse_StringMCBasicGenericType(String str) throws IOException {
    return parseMCBasicGenericType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<de.monticore.types.mcsimplegenerictypes._ast.ASTMCCustomTypeArgument> parseMCCustomTypeArgument(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	de.monticore.types.mcsimplegenerictypes._ast.ASTMCCustomTypeArgument ast;
    ast = parser.mCCustomTypeArgument_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcsimplegenerictypes._ast.ASTMCCustomTypeArgument> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<de.monticore.types.mcsimplegenerictypes._ast.ASTMCCustomTypeArgument> parseMCCustomTypeArgument(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	de.monticore.types.mcsimplegenerictypes._ast.ASTMCCustomTypeArgument ast;
    ast = parser.mCCustomTypeArgument_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<de.monticore.types.mcsimplegenerictypes._ast.ASTMCCustomTypeArgument> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<de.monticore.types.mcsimplegenerictypes._ast.ASTMCCustomTypeArgument> parse_StringMCCustomTypeArgument(String str) throws IOException {
    return parseMCCustomTypeArgument(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTCDCompilationUnit> parseCDCompilationUnit(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTCDCompilationUnit ast;
    ast = parser.cDCompilationUnit_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDCompilationUnit> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTCDCompilationUnit> parseCDCompilationUnit(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTCDCompilationUnit ast;
    ast = parser.cDCompilationUnit_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDCompilationUnit> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTCDCompilationUnit> parse_StringCDCompilationUnit(String str) throws IOException {
    return parseCDCompilationUnit(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTCDDefinition> parseCDDefinition(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTCDDefinition ast;
    ast = parser.cDDefinition_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDDefinition> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTCDDefinition> parseCDDefinition(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTCDDefinition ast;
    ast = parser.cDDefinition_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDDefinition> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTCDDefinition> parse_StringCDDefinition(String str) throws IOException {
    return parseCDDefinition(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTCDClass> parseCDClass(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTCDClass ast;
    ast = parser.cDClass_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDClass> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTCDClass> parseCDClass(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTCDClass ast;
    ast = parser.cDClass_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDClass> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTCDClass> parse_StringCDClass(String str) throws IOException {
    return parseCDClass(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTTImplements> parseTImplements(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTTImplements ast;
    ast = parser.tImplements_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTTImplements> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTTImplements> parseTImplements(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTTImplements ast;
    ast = parser.tImplements_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTTImplements> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTTImplements> parse_StringTImplements(String str) throws IOException {
    return parseTImplements(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTCDInterface> parseCDInterface(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTCDInterface ast;
    ast = parser.cDInterface_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDInterface> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTCDInterface> parseCDInterface(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTCDInterface ast;
    ast = parser.cDInterface_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDInterface> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTCDInterface> parse_StringCDInterface(String str) throws IOException {
    return parseCDInterface(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTCDAttribute> parseCDAttribute(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTCDAttribute ast;
    ast = parser.cDAttribute_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDAttribute> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTCDAttribute> parseCDAttribute(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTCDAttribute ast;
    ast = parser.cDAttribute_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDAttribute> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTCDAttribute> parse_StringCDAttribute(String str) throws IOException {
    return parseCDAttribute(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTCDConstructor> parseCDConstructor(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTCDConstructor ast;
    ast = parser.cDConstructor_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDConstructor> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTCDConstructor> parseCDConstructor(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTCDConstructor ast;
    ast = parser.cDConstructor_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDConstructor> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTCDConstructor> parse_StringCDConstructor(String str) throws IOException {
    return parseCDConstructor(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTCDMethod> parseCDMethod(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTCDMethod ast;
    ast = parser.cDMethod_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDMethod> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTCDMethod> parseCDMethod(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTCDMethod ast;
    ast = parser.cDMethod_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDMethod> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTCDMethod> parse_StringCDMethod(String str) throws IOException {
    return parseCDMethod(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTCDParameter> parseCDParameter(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTCDParameter ast;
    ast = parser.cDParameter_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDParameter> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTCDParameter> parseCDParameter(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTCDParameter ast;
    ast = parser.cDParameter_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDParameter> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTCDParameter> parse_StringCDParameter(String str) throws IOException {
    return parseCDParameter(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTModifier> parseModifier(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTModifier ast;
    ast = parser.modifier_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTModifier> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTModifier> parseModifier(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTModifier ast;
    ast = parser.modifier_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTModifier> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTModifier> parse_StringModifier(String str) throws IOException {
    return parseModifier(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTCDType> parseCDType(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTCDType ast;
    ast = parser.cDType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTCDType> parseCDType(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTCDType ast;
    ast = parser.cDType_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTCDType> parse_StringCDType(String str) throws IOException {
    return parseCDType(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTCDField> parseCDField(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTCDField ast;
    ast = parser.cDField_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDField> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTCDField> parseCDField(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTCDField ast;
    ast = parser.cDField_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDField> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTCDField> parse_StringCDField(String str) throws IOException {
    return parseCDField(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<classdiagrams._ast.ASTCDMethOrConstr> parseCDMethOrConstr(String filename) throws IOException {   
    ClassDiagramsAntlrParser parser = create(filename);    
	classdiagrams._ast.ASTCDMethOrConstr ast;
    ast = parser.cDMethOrConstr_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDMethOrConstr> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<classdiagrams._ast.ASTCDMethOrConstr> parseCDMethOrConstr(Reader reader) throws IOException {
 	ClassDiagramsAntlrParser parser = create(reader);
	classdiagrams._ast.ASTCDMethOrConstr ast;
    ast = parser.cDMethOrConstr_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<classdiagrams._ast.ASTCDMethOrConstr> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<classdiagrams._ast.ASTCDMethOrConstr> parse_StringCDMethOrConstr(String str) throws IOException {
    return parseCDMethOrConstr(new StringReader(str));
  }
  


}
