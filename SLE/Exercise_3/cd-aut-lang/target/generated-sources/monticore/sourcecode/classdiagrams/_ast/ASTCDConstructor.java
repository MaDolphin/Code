/* generated from model ClassDiagrams */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package classdiagrams._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTCDConstructor extends ASTCNode  implements classdiagrams._ast.ASTCDMethOrConstr,classdiagrams._ast.ASTClassDiagramsNode {

    /* generated by template core.Attribute*/
 protected  classdiagrams._ast.ASTModifier modifier ;

    /* generated by template core.Attribute*/
 protected  java.util.List<classdiagrams._ast.ASTCDParameter> cDParameters = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  java.util.List<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> exceptions = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  String name ;

    /* generated by template core.Attribute*/
 protected  classdiagrams._symboltable.IClassDiagramsScope enclosingScope ;


    /* generated by template core.Constructor*/
 protected  ASTCDConstructor()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)  {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTCDConstructor comp;
    if ((o instanceof ASTCDConstructor)) {
      comp = (ASTCDConstructor) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
     // comparing modifier
     if ( (this.modifier == null && comp.modifier != null) ||
        (this.modifier != null && !this.modifier.deepEquals(comp.modifier, forceSameOrder)) ) {
        return false;
     }
    // comparing cDParameters
    if (this.cDParameters.size() != comp.cDParameters.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<classdiagrams._ast.ASTCDParameter> it1 = this.cDParameters.iterator();
        Iterator<classdiagrams._ast.ASTCDParameter> it2 = comp.cDParameters.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<classdiagrams._ast.ASTCDParameter> it1 = this.cDParameters.iterator();
        while (it1.hasNext()) {
          classdiagrams._ast.ASTCDParameter oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<classdiagrams._ast.ASTCDParameter> it2 = comp.cDParameters.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing exceptions
    if (this.exceptions.size() != comp.exceptions.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> it1 = this.exceptions.iterator();
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> it2 = comp.exceptions.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> it1 = this.exceptions.iterator();
        while (it1.hasNext()) {
          de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> it2 = comp.exceptions.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)  {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithComments*/

      ASTCDConstructor comp;
    if ((o instanceof ASTCDConstructor)) {
      comp = (ASTCDConstructor) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
      // comparing modifier
      if ( (this.modifier == null && comp.modifier != null) ||
        (this.modifier != null && !this.modifier.deepEqualsWithComments(comp.modifier, forceSameOrder)) ) {
        return false;
      }
    // comparing cDParameters
    if (this.cDParameters.size() != comp.cDParameters.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<classdiagrams._ast.ASTCDParameter> it1 = this.cDParameters.iterator();
        Iterator<classdiagrams._ast.ASTCDParameter> it2 = comp.cDParameters.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<classdiagrams._ast.ASTCDParameter> it1 = this.cDParameters.iterator();
        while (it1.hasNext()) {
          classdiagrams._ast.ASTCDParameter oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<classdiagrams._ast.ASTCDParameter> it2 = comp.cDParameters.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing exceptions
    if (this.exceptions.size() != comp.exceptions.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> it1 = this.exceptions.iterator();
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> it2 = comp.exceptions.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> it1 = this.exceptions.iterator();
        while (it1.hasNext()) {
          de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> it2 = comp.exceptions.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)  {
      /* generated by template data.EqualAttributes*/

      ASTCDConstructor comp;
    if ((o instanceof ASTCDConstructor)) {
      comp = (ASTCDConstructor) o;
    } else {
      return false;
    }
	// comparing name 
    if ( (this.name == null && comp.name != null) 
      || (this.name != null && !this.name.equals(comp.name)) ) {
      return false;
    }
    return true;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)  {
      /* generated by template data.EqualsWithComments*/

      ASTCDConstructor comp;
    if ((o instanceof ASTCDConstructor)) {
      comp = (ASTCDConstructor) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTCDConstructor deepClone ()  {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTCDConstructor deepClone (ASTCDConstructor result)  {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

    result.setModifier(getModifier().deepClone());
      getCDParameterList().forEach(s -> result.cDParameters.add(s.deepClone()));
      getExceptionList().forEach(s -> result.exceptions.add(s.deepClone()));
      result.setName(getName());
      result.setEnclosingScope(getEnclosingScope());
    
    return result;

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTModifier getModifier ()  {
      /* generated by template methods.Get*/

return this.modifier;

}

    /* generated by template core.Method*/
 public  boolean containsCDParameter (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllCDParameters (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyCDParameters ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<classdiagrams._ast.ASTCDParameter> iteratorCDParameters ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeCDParameters ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().size();

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDParameter[] toArrayCDParameters (classdiagrams._ast.ASTCDParameter[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayCDParameters ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<classdiagrams._ast.ASTCDParameter> spliteratorCDParameters ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<classdiagrams._ast.ASTCDParameter> streamCDParameters ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().stream();

}

    /* generated by template core.Method*/
 public  Stream<classdiagrams._ast.ASTCDParameter> parallelStreamCDParameters ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().parallelStream();

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDParameter getCDParameter (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfCDParameter (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfCDParameter (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsCDParameters (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeCDParameters ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<classdiagrams._ast.ASTCDParameter> listIteratorCDParameters ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<classdiagrams._ast.ASTCDParameter> listIteratorCDParameters (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<classdiagrams._ast.ASTCDParameter> subListCDParameters (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<classdiagrams._ast.ASTCDParameter> getCDParameterList ()  {
      /* generated by template methods.Get*/

return this.cDParameters;

}

    /* generated by template core.Method*/
 public  boolean containsException (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllExceptions (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyExceptions ()  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> iteratorExceptions ()  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeExceptions ()  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().size();

}

    /* generated by template core.Method*/
 public  de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName[] toArrayExceptions (de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayExceptions ()  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> spliteratorExceptions ()  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> streamExceptions ()  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().stream();

}

    /* generated by template core.Method*/
 public  Stream<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> parallelStreamExceptions ()  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().parallelStream();

}

    /* generated by template core.Method*/
 public  de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName getException (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfException (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfException (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsExceptions (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeExceptions ()  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> listIteratorExceptions ()  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> listIteratorExceptions (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> subListExceptions (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> getExceptionList ()  {
      /* generated by template methods.Get*/

return this.exceptions;

}

    /* generated by template core.Method*/
 public  String getName ()  {
      /* generated by template methods.Get*/

return this.name;

}

    /* generated by template core.Method*/
 public  void setModifier (classdiagrams._ast.ASTModifier modifier)  {
      /* generated by template methods.Set*/

this.modifier = modifier;

}

    /* generated by template core.Method*/
 public  void clearCDParameters ()  {
      /* generated by template methods.MethodDelegate*/

this.getCDParameterList().clear();

}

    /* generated by template core.Method*/
 public  boolean addCDParameter (classdiagrams._ast.ASTCDParameter element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllCDParameters (Collection<? extends classdiagrams._ast.ASTCDParameter> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeCDParameter (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllCDParameters (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllCDParameters (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfCDParameter (Predicate<? super classdiagrams._ast.ASTCDParameter> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachCDParameters (Consumer<? super classdiagrams._ast.ASTCDParameter> action)  {
      /* generated by template methods.MethodDelegate*/

this.getCDParameterList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addCDParameter (int index,classdiagrams._ast.ASTCDParameter element)  {
      /* generated by template methods.MethodDelegate*/

this.getCDParameterList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllCDParameters (int index,Collection<? extends classdiagrams._ast.ASTCDParameter> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDParameter removeCDParameter (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().remove(index);

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDParameter setCDParameter (int index,classdiagrams._ast.ASTCDParameter element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDParameterList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllCDParameters (UnaryOperator<classdiagrams._ast.ASTCDParameter> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getCDParameterList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortCDParameters (Comparator<? super classdiagrams._ast.ASTCDParameter> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getCDParameterList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setCDParameterList (List<classdiagrams._ast.ASTCDParameter> cDParameters)  {
      /* generated by template methods.Set*/

this.cDParameters = cDParameters;

}

    /* generated by template core.Method*/
 public  void clearExceptions ()  {
      /* generated by template methods.MethodDelegate*/

this.getExceptionList().clear();

}

    /* generated by template core.Method*/
 public  boolean addException (de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName element)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllExceptions (Collection<? extends de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeException (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllExceptions (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllExceptions (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfException (Predicate<? super de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachExceptions (Consumer<? super de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> action)  {
      /* generated by template methods.MethodDelegate*/

this.getExceptionList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addException (int index,de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName element)  {
      /* generated by template methods.MethodDelegate*/

this.getExceptionList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllExceptions (int index,Collection<? extends de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName removeException (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().remove(index);

}

    /* generated by template core.Method*/
 public  de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName setException (int index,de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName element)  {
      /* generated by template methods.MethodDelegate*/

return this.getExceptionList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllExceptions (UnaryOperator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getExceptionList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortExceptions (Comparator<? super de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getExceptionList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setExceptionList (List<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> exceptions)  {
      /* generated by template methods.Set*/

this.exceptions = exceptions;

}

    /* generated by template core.Method*/
 public  void setName (String name)  {
      /* generated by template methods.Set*/

this.name = name;

}

    /* generated by template core.Method*/
 public  void accept (classdiagrams._visitor.ClassDiagramsVisitor visitor)  {
      /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mcsimplegenerictypes._visitor.MCSimpleGenericTypesVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x054 AST node type ASTCDConstructor expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.mcsimplegenerictypes._visitor.MCSimpleGenericTypesVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x054 AST node type ASTCDConstructor expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mccollectiontypes._visitor.MCCollectionTypesVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x054 AST node type ASTCDConstructor expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.mccollectiontypes._visitor.MCCollectionTypesVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x054 AST node type ASTCDConstructor expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x054 AST node type ASTCDConstructor expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.mcbasics._visitor.MCBasicsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.typesymbols._visitor.TypeSymbolsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x054 AST node type ASTCDConstructor expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.typesymbols._visitor.TypeSymbolsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x054 AST node type ASTCDConstructor expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTCDConstructor _construct ()  {
      return classdiagrams._ast.ClassDiagramsNodeFactory.createASTCDConstructor();
}

    /* generated by template core.Method*/
 public  Collection<de.monticore.ast.ASTNode> get_Children ()  {
      /* generated by template _ast.ast_class.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if ( getModifier() != null ) {
          result.add(getModifier());
        }
        result.addAll(getCDParameterList());
        result.addAll(getExceptionList());
    return result;

}

    /* generated by template core.Method*/
 public  classdiagrams._symboltable.IClassDiagramsScope getEnclosingScope ()  {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (classdiagrams._symboltable.IClassDiagramsScope enclosingScope)  {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x239The EnclosingScope form type de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x923The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x638The EnclosingScope form type de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x362The EnclosingScope form type de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x198The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.typesymbols._symboltable.ITypeSymbolsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x370The EnclosingScope form type de.monticore.types.typesymbols._symboltable.ITypeSymbolsScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x156The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

}
