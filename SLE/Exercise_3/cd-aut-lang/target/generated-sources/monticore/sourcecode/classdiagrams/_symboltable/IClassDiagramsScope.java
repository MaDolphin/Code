/* generated from model ClassDiagrams */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package classdiagrams._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;


 public  interface IClassDiagramsScope extends de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope,de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope,de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope,de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope,de.monticore.mcbasics._symboltable.IMCBasicsScope,de.monticore.types.typesymbols._symboltable.ITypeSymbolsScope,de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope {



  /* generated by template core.Method*/
 abstract  public  boolean isCDDefinitionSymbolsAlreadyResolved () ;
  /* generated by template core.Method*/
 abstract  public  void setCDDefinitionSymbolsAlreadyResolved (boolean symbolAlreadyResolved) ;
  default /* generated by template core.Method*/
 public  Optional<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinition (String name)  {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveCDDefinitionMany(name ));
}

  default /* generated by template core.Method*/
 public  Optional<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinition (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)  {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveCDDefinitionMany(name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinition (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<classdiagrams._symboltable.CDDefinitionSymbol> predicate)  {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveCDDefinitionMany(name, modifier, predicate ));
}

  default /* generated by template core.Method*/
 public  Optional<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinition (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier)  {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveCDDefinitionMany(foundSymbols, name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionDown (String name)  {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveCDDefinitionDownMany(name ));
}

  default /* generated by template core.Method*/
 public  Optional<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionDown (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)  {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveCDDefinitionDownMany(name, modifier ));
}

  default /* generated by template core.Method*/
 public  Optional<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionDown (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<classdiagrams._symboltable.CDDefinitionSymbol> predicate)  {
      /* generated by template _symboltable.iscope.ResolveDelegate*/

  return getResolvedOrThrowException(resolveCDDefinitionDownMany(name, modifier, predicate ));
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionDownMany (String name)  {
      return this.resolveCDDefinitionDownMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,x -> true);
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionDownMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)  {
      return this.resolveCDDefinitionDownMany(false,name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionDownMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<classdiagrams._symboltable.CDDefinitionSymbol> predicate)  {
      return this.resolveCDDefinitionDownMany(false,name,modifier,predicate);
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionDownMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<classdiagrams._symboltable.CDDefinitionSymbol> predicate)  {
      /* generated by template _symboltable.iscope.ResolveDownMany*/

  if (!isCDDefinitionSymbolsAlreadyResolved()) {
    setCDDefinitionSymbolsAlreadyResolved(true);
  } else {
    return new ArrayList<>();
  }

  // 1. Conduct search locally in the current scope
  final List<classdiagrams._symboltable.CDDefinitionSymbol> resolved = this.resolveCDDefinitionLocallyMany(foundSymbols, name, modifier, predicate);

  foundSymbols = foundSymbols | resolved.size() > 0;

  final String resolveCall = "resolveDownMany(\"" + name + "\", \"" + "CDDefinitionSymbol"
    + "\") in scope \"" + (isPresentName() ? getName() : "") + "\"";
  Log.trace("START " + resolveCall + ". Found #" + resolved.size() + " (local)", "");
  // If no matching symbols have been found...
  if (resolved.isEmpty()) {
    // 2. Continue search in sub scopes and ...
    for (classdiagrams._symboltable.IClassDiagramsScope subScope : getSubScopes()) {
      final List<classdiagrams._symboltable.CDDefinitionSymbol> resolvedFromSub = subScope
        .continueAsCDDefinitionSubScope(foundSymbols, name, modifier, predicate);
      foundSymbols = foundSymbols | resolved.size() > 0;
      // 3. unify results
      resolved.addAll(resolvedFromSub);
    }
  }
  Log.trace("END " + resolveCall + ". Found #" + resolved.size(), "");
  setCDDefinitionSymbolsAlreadyResolved(false);
  return resolved;
}

  default /* generated by template core.Method*/
 public  Optional<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionLocally (String name)  {
       return getResolvedOrThrowException(this.resolveCDDefinitionLocallyMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,x -> true));
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionLocallyMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<classdiagrams._symboltable.CDDefinitionSymbol> predicate)  {
      /* generated by template _symboltable.iscope.ResolveManyLocally*/

  final List<classdiagrams._symboltable.CDDefinitionSymbol> resolvedSymbols = new ArrayList<>();

  try {
    Optional<classdiagrams._symboltable.CDDefinitionSymbol> resolvedSymbol = filterCDDefinition(name, getCDDefinitionSymbols());
    if (resolvedSymbol.isPresent()) {
      resolvedSymbols.add(resolvedSymbol.get());
    }
  } catch (de.monticore.symboltable.resolving.ResolvedSeveralEntriesForSymbolException e) {
    resolvedSymbols.addAll(e.getSymbols());
  }

  // filter out symbols that are not included within the access modifier
  List<classdiagrams._symboltable.CDDefinitionSymbol> filteredSymbols = filterSymbolsByAccessModifier(modifier, resolvedSymbols);
  filteredSymbols = new ArrayList<>(filteredSymbols.stream().filter(predicate).collect(java.util.stream.Collectors.toList()));

  // if no symbols found try to find adapted one
  if (filteredSymbols.isEmpty()) {
    filteredSymbols.addAll(resolveAdaptedCDDefinitionLocallyMany(foundSymbols, name, modifier, predicate));
    filteredSymbols = filterSymbolsByAccessModifier(modifier, filteredSymbols);
    filteredSymbols = new ArrayList<>(filteredSymbols.stream().filter(predicate).collect(java.util.stream.Collectors.toList()));
  }
  return filteredSymbols;
}

  default /* generated by template core.Method*/
 public  Optional<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionImported (String name)  {
      return this.resolveCDDefinitionLocally(name);
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionMany (String name)  {
      return this.resolveCDDefinitionMany(name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION);
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier)  {
      return this.resolveCDDefinitionMany(name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionMany (String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<classdiagrams._symboltable.CDDefinitionSymbol> predicate)  {
      return this.resolveCDDefinitionMany(false,name,modifier,predicate);
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionMany (String name,java.util.function.Predicate<classdiagrams._symboltable.CDDefinitionSymbol> predicate)  {
      return this.resolveCDDefinitionMany(false,name,de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION,predicate);
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier)  {
      return this.resolveCDDefinitionMany(foundSymbols,name,modifier,x -> true);
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveCDDefinitionMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<classdiagrams._symboltable.CDDefinitionSymbol> predicate)  {
      /* generated by template _symboltable.iscope.ResolveMany*/

  if (!isCDDefinitionSymbolsAlreadyResolved()) {
    setCDDefinitionSymbolsAlreadyResolved(true);
  } else {
    return new ArrayList<>();
  }

  final List<classdiagrams._symboltable.CDDefinitionSymbol> resolvedSymbols = this.resolveCDDefinitionLocallyMany(foundSymbols, name, modifier, predicate);
  if (!resolvedSymbols.isEmpty()) {
    setCDDefinitionSymbolsAlreadyResolved(false);
    return resolvedSymbols;
  }
  final List<classdiagrams._symboltable.CDDefinitionSymbol> resolvedFromEnclosing = continueCDDefinitionWithEnclosingScope((foundSymbols | resolvedSymbols.size() > 0), name, modifier, predicate);
  resolvedSymbols.addAll(resolvedFromEnclosing);
  setCDDefinitionSymbolsAlreadyResolved(false);
  return resolvedSymbols;
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> resolveAdaptedCDDefinitionLocallyMany (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<classdiagrams._symboltable.CDDefinitionSymbol> predicate)  {
      return new java.util.ArrayList<>();
}

  default /* generated by template core.Method*/
 public  Optional<classdiagrams._symboltable.CDDefinitionSymbol> filterCDDefinition (String name,com.google.common.collect.LinkedListMultimap<String,classdiagrams._symboltable.CDDefinitionSymbol> symbols)  {
      /* generated by template _symboltable.iscope.Filter*/

  final Set<classdiagrams._symboltable.CDDefinitionSymbol> resolvedSymbols = new LinkedHashSet<>();

  final String simpleName = de.se_rwth.commons.Names.getSimpleName(name);

  if (symbols.containsKey(simpleName)) {
    for (classdiagrams._symboltable.CDDefinitionSymbol symbol : symbols.get(simpleName)) {
      if (symbol.getName().equals(name) || symbol.getFullName().equals(name)) {
        resolvedSymbols.add(symbol);
      }
    }
  }

  return getResolvedOrThrowException(resolvedSymbols);
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> continueCDDefinitionWithEnclosingScope (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<classdiagrams._symboltable.CDDefinitionSymbol> predicate)  {
      /* generated by template _symboltable.iscope.ContinueWithEnclosingScope*/

if (checkIfContinueWithEnclosingScope(foundSymbols) && (getEnclosingScope() != null)) {
    return getEnclosingScope().resolveCDDefinitionMany(foundSymbols, name, modifier, predicate);
  }
  return new ArrayList<>();
}

  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> continueAsCDDefinitionSubScope (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<classdiagrams._symboltable.CDDefinitionSymbol> predicate)  {
      /* generated by template _symboltable.iscope.ContinueAsSubScope*/

  setCDDefinitionSymbolsAlreadyResolved(false);
  if (checkIfContinueAsSubScope(name)) {
    final String remainingSymbolName = getRemainingNameForResolveDown(name);
    return this.resolveCDDefinitionDownMany(foundSymbols, remainingSymbolName, modifier, predicate);
  }
  return new ArrayList<>();
}

  /* generated by template core.Method*/
 abstract  public  com.google.common.collect.LinkedListMultimap<String,classdiagrams._symboltable.CDDefinitionSymbol> getCDDefinitionSymbols () ;
  default /* generated by template core.Method*/
 public  List<classdiagrams._symboltable.CDDefinitionSymbol> getLocalCDDefinitionSymbols ()  {
      return getCDDefinitionSymbols().values();
}

  /* generated by template core.Method*/
 abstract  public  void add (classdiagrams._symboltable.CDDefinitionSymbol symbol) ;
  /* generated by template core.Method*/
 abstract  public  void remove (classdiagrams._symboltable.CDDefinitionSymbol symbol) ;
  /* generated by template core.Method*/
 abstract  public  List<? extends IClassDiagramsScope> getSubScopes () ;
  default /* generated by template core.Method*/
 public  void addSubScope (IClassDiagramsScope subScope)  {
      Log.error("0xA7013x558 The method \"addSubScope\" of interface \"IClassDiagramsScope\" is not implemented.");
}

  default /* generated by template core.Method*/
 public  void removeSubScope (IClassDiagramsScope subScope)  {
      Log.error("0xA7013x558 The method \"removeSubScope\" of interface \"IClassDiagramsScope\" is not implemented.");
}

  /* generated by template core.Method*/
 abstract  public  IClassDiagramsScope getEnclosingScope () ;
  /* generated by template core.Method*/
 abstract  public  void setEnclosingScope (IClassDiagramsScope enclosingScope) ;
  /* generated by template core.Method*/
 abstract  public  void accept (classdiagrams._visitor.ClassDiagramsScopeVisitor visitor) ;
}
