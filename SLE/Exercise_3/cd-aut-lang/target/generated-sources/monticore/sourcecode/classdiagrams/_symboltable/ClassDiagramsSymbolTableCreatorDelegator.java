/* generated from model ClassDiagrams */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package classdiagrams._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ClassDiagramsSymbolTableCreatorDelegator extends classdiagrams._visitor.ClassDiagramsDelegatorVisitor  {

    /* generated by template core.Attribute*/
 protected  Deque<classdiagrams._symboltable.IClassDiagramsScope> scopeStack = new java.util.ArrayDeque<>();

    /* generated by template core.Attribute*/
 protected  final  ClassDiagramsSymbolTableCreator symbolTable ;

    /* generated by template core.Attribute*/
 protected  classdiagrams._symboltable.IClassDiagramsGlobalScope globalScope ;


    /* generated by template core.Constructor*/
 public  ClassDiagramsSymbolTableCreatorDelegator(classdiagrams._symboltable.IClassDiagramsGlobalScope globalScope)  {
    /* generated by template _symboltable.symboltablecreatordelegator.Constructor*/

  this.scopeStack.push(globalScope);
  this.globalScope = globalScope;
  MCCollectionTypesSTCForClassDiagrams mCCollectionTypesSymbolTableCreator = new MCCollectionTypesSTCForClassDiagrams(scopeStack);
  setMCCollectionTypesVisitor(mCCollectionTypesSymbolTableCreator);

  MCBasicTypesSTCForClassDiagrams mCBasicTypesSymbolTableCreator = new MCBasicTypesSTCForClassDiagrams(scopeStack);
  setMCBasicTypesVisitor(mCBasicTypesSymbolTableCreator);

  MCLiteralsBasisSTCForClassDiagrams mCLiteralsBasisSymbolTableCreator = new MCLiteralsBasisSTCForClassDiagrams(scopeStack);
  setMCLiteralsBasisVisitor(mCLiteralsBasisSymbolTableCreator);

  TypeSymbolsSTCForClassDiagrams typeSymbolsSymbolTableCreator = new TypeSymbolsSTCForClassDiagrams(scopeStack);
  setTypeSymbolsVisitor(typeSymbolsSymbolTableCreator);

  MCCommonLiteralsSTCForClassDiagrams mCCommonLiteralsSymbolTableCreator = new MCCommonLiteralsSTCForClassDiagrams(scopeStack);
  setMCCommonLiteralsVisitor(mCCommonLiteralsSymbolTableCreator);

  MCSimpleGenericTypesSTCForClassDiagrams mCSimpleGenericTypesSymbolTableCreator = new MCSimpleGenericTypesSTCForClassDiagrams(scopeStack);
  setMCSimpleGenericTypesVisitor(mCSimpleGenericTypesSymbolTableCreator);

  symbolTable = new ClassDiagramsSymbolTableCreator(scopeStack);
  setClassDiagramsVisitor(symbolTable);
}


    /* generated by template core.Method*/
 public  classdiagrams._symboltable.ClassDiagramsArtifactScope createFromAST (classdiagrams._ast.ASTCDCompilationUnit rootNode)  {
      /* generated by template _symboltable.symboltablecreatordelegator.CreateFromAST*/

  classdiagrams._symboltable.ClassDiagramsArtifactScope as =  symbolTable.createFromAST(rootNode);
  if (as.isPresentName()){
    if (!as.getPackageName().isEmpty()){
      globalScope.cache(as.getPackageName() + "." + as.getName());
    } else {
      globalScope.cache(as.getName());
    }
  }
  return as;
}

}
