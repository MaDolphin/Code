/* generated by template od.DiagramVisitor*/




package classdiagrams._od;

import classdiagrams._visitor.ClassDiagramsVisitor;
import classdiagrams._ast.ASTClassDiagramsNode;
import de.monticore.prettyprint.IndentPrinter;
import de.se_rwth.commons.Names;
import de.se_rwth.commons.StringTransformations;
import de.monticore.generating.templateengine.reporting.commons.ReportingRepository;
import java.util.Iterator;

public class ClassDiagrams2OD implements ClassDiagramsVisitor {

  private ClassDiagramsVisitor realThis = this;

  protected IndentPrinter pp;

  protected ReportingRepository reporting;

  protected boolean printEmptyOptional = false;

  protected boolean printEmptyList = false;

  public ClassDiagrams2OD(IndentPrinter printer, ReportingRepository reporting) {
    this.reporting = reporting;
    this.pp = printer;
  }


      @Override
      public void handle(classdiagrams._ast.ASTCDCompilationUnit node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "classdiagrams._ast.ASTCDCompilationUnit");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        printAttribute("r__package", String.valueOf(node.getPackageList()));
        {
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCImportStatement> iter_mCImportStatement = node.getMCImportStatementList().iterator();
        boolean isEmpty = true;
        if (iter_mCImportStatement.hasNext()) {
       	  pp.print("mCImportStatement");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getMCImportStatementList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("mCImportStatement");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_mCImportStatement.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_mCImportStatement.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        if (null != node.getCDDefinition()) {
      		pp.print("cDDefinition");
          pp.print(" = ");
          node.getCDDefinition().accept(getRealThis());
          pp.println(";");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(classdiagrams._ast.ASTCDDefinition node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "classdiagrams._ast.ASTCDDefinition");
        pp.indent();
        if (node.isPresentSymbol()) {
        String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
          String spannedScopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope()));
          pp.println("spanningScope = " + spannedScopeName + ";");
        if (node.isPresentModifier()) {
     		  pp.print("modifier");
   			  pp.print(" = ");
          node.getModifier().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("modifier = absent;");
        }
        printAttribute("name", "\"" + String.valueOf(node.getName()) + "\"");
        {
        Iterator<classdiagrams._ast.ASTCDClass> iter_cDClass = node.getCDClassList().iterator();
        boolean isEmpty = true;
        if (iter_cDClass.hasNext()) {
       	  pp.print("cDClass");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getCDClassList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("cDClass");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_cDClass.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_cDClass.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        {
        Iterator<classdiagrams._ast.ASTCDInterface> iter_cDInterface = node.getCDInterfaceList().iterator();
        boolean isEmpty = true;
        if (iter_cDInterface.hasNext()) {
       	  pp.print("cDInterface");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getCDInterfaceList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("cDInterface");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_cDInterface.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_cDInterface.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(classdiagrams._ast.ASTCDClass node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "classdiagrams._ast.ASTCDClass");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (node.isPresentModifier()) {
     		  pp.print("modifier");
   			  pp.print(" = ");
          node.getModifier().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("modifier = absent;");
        }
        if (node.isPresentSuperclass()) {
     		  pp.print("superclass");
   			  pp.print(" = ");
          node.getSuperclass().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("superclass = absent;");
        }
        if (node.isPresentTImplements()) {
     		  pp.print("tImplements");
   			  pp.print(" = ");
          node.getTImplements().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("tImplements = absent;");
        }
        {
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> iter_r__interface = node.getInterfaceList().iterator();
        boolean isEmpty = true;
        if (iter_r__interface.hasNext()) {
       	  pp.print("r__interface");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getInterfaceList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("r__interface");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_r__interface.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_r__interface.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        {
        Iterator<classdiagrams._ast.ASTCDAttribute> iter_cDAttribute = node.getCDAttributeList().iterator();
        boolean isEmpty = true;
        if (iter_cDAttribute.hasNext()) {
       	  pp.print("cDAttribute");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getCDAttributeList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("cDAttribute");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_cDAttribute.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_cDAttribute.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        {
        Iterator<classdiagrams._ast.ASTCDConstructor> iter_cDConstructor = node.getCDConstructorList().iterator();
        boolean isEmpty = true;
        if (iter_cDConstructor.hasNext()) {
       	  pp.print("cDConstructor");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getCDConstructorList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("cDConstructor");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_cDConstructor.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_cDConstructor.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        {
        Iterator<classdiagrams._ast.ASTCDMethod> iter_cDMethod = node.getCDMethodList().iterator();
        boolean isEmpty = true;
        if (iter_cDMethod.hasNext()) {
       	  pp.print("cDMethod");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getCDMethodList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("cDMethod");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_cDMethod.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_cDMethod.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        printAttribute("name", "\"" + String.valueOf(node.getName()) + "\"");
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(classdiagrams._ast.ASTTImplements node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "classdiagrams._ast.ASTTImplements");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        printAttribute("name", "\"" + String.valueOf(node.getName()) + "\"");
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(classdiagrams._ast.ASTCDInterface node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "classdiagrams._ast.ASTCDInterface");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (node.isPresentModifier()) {
     		  pp.print("modifier");
   			  pp.print(" = ");
          node.getModifier().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("modifier = absent;");
        }
        {
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCObjectType> iter_r__interface = node.getInterfaceList().iterator();
        boolean isEmpty = true;
        if (iter_r__interface.hasNext()) {
       	  pp.print("r__interface");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getInterfaceList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("r__interface");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_r__interface.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_r__interface.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        {
        Iterator<classdiagrams._ast.ASTCDAttribute> iter_cDAttribute = node.getCDAttributeList().iterator();
        boolean isEmpty = true;
        if (iter_cDAttribute.hasNext()) {
       	  pp.print("cDAttribute");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getCDAttributeList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("cDAttribute");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_cDAttribute.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_cDAttribute.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        {
        Iterator<classdiagrams._ast.ASTCDMethod> iter_cDMethod = node.getCDMethodList().iterator();
        boolean isEmpty = true;
        if (iter_cDMethod.hasNext()) {
       	  pp.print("cDMethod");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getCDMethodList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("cDMethod");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_cDMethod.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_cDMethod.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        printAttribute("name", "\"" + String.valueOf(node.getName()) + "\"");
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(classdiagrams._ast.ASTCDAttribute node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "classdiagrams._ast.ASTCDAttribute");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (node.isPresentModifier()) {
     		  pp.print("modifier");
   			  pp.print(" = ");
          node.getModifier().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("modifier = absent;");
        }
        if (null != node.getMCType()) {
      		pp.print("mCType");
          pp.print(" = ");
          node.getMCType().accept(getRealThis());
          pp.println(";");
        }
        printAttribute("name", "\"" + String.valueOf(node.getName()) + "\"");
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(classdiagrams._ast.ASTCDConstructor node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "classdiagrams._ast.ASTCDConstructor");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (null != node.getModifier()) {
      		pp.print("modifier");
          pp.print(" = ");
          node.getModifier().accept(getRealThis());
          pp.println(";");
        }
        {
        Iterator<classdiagrams._ast.ASTCDParameter> iter_cDParameter = node.getCDParameterList().iterator();
        boolean isEmpty = true;
        if (iter_cDParameter.hasNext()) {
       	  pp.print("cDParameter");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getCDParameterList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("cDParameter");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_cDParameter.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_cDParameter.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        {
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> iter_exception = node.getExceptionList().iterator();
        boolean isEmpty = true;
        if (iter_exception.hasNext()) {
       	  pp.print("exception");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getExceptionList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("exception");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_exception.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_exception.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        printAttribute("name", "\"" + String.valueOf(node.getName()) + "\"");
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(classdiagrams._ast.ASTCDMethod node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "classdiagrams._ast.ASTCDMethod");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (null != node.getModifier()) {
      		pp.print("modifier");
          pp.print(" = ");
          node.getModifier().accept(getRealThis());
          pp.println(";");
        }
        if (null != node.getMCReturnType()) {
      		pp.print("mCReturnType");
          pp.print(" = ");
          node.getMCReturnType().accept(getRealThis());
          pp.println(";");
        }
        {
        Iterator<classdiagrams._ast.ASTCDParameter> iter_cDParameter = node.getCDParameterList().iterator();
        boolean isEmpty = true;
        if (iter_cDParameter.hasNext()) {
       	  pp.print("cDParameter");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getCDParameterList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("cDParameter");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_cDParameter.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_cDParameter.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        {
        Iterator<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> iter_exception = node.getExceptionList().iterator();
        boolean isEmpty = true;
        if (iter_exception.hasNext()) {
       	  pp.print("exception");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getExceptionList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("exception");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_exception.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_exception.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        printAttribute("name", "\"" + String.valueOf(node.getName()) + "\"");
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(classdiagrams._ast.ASTCDParameter node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "classdiagrams._ast.ASTCDParameter");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (null != node.getMCType()) {
      		pp.print("mCType");
          pp.print(" = ");
          node.getMCType().accept(getRealThis());
          pp.println(";");
        }
        printAttribute("name", "\"" + String.valueOf(node.getName()) + "\"");
        printAttribute("ellipsis", String.valueOf(node.isEllipsis()));
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(classdiagrams._ast.ASTModifier node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "classdiagrams._ast.ASTModifier");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        printAttribute("r__abstract", String.valueOf(node.isAbstract()));
        printAttribute("r__final", String.valueOf(node.isFinal()));
        printAttribute("r__static", String.valueOf(node.isStatic()));
        printAttribute("r__private", String.valueOf(node.isPrivate()));
        printAttribute("r__protected", String.valueOf(node.isProtected()));
        printAttribute("r__public", String.valueOf(node.isPublic()));
        printAttribute("r__derived", String.valueOf(node.isDerived()));
        pp.unindent();
        pp.print("}");
     }


  private void printAttribute(String name, String value) {
    pp.print(name);
    pp.print(" = ");
    pp.print(value);
    pp.println(";");
  }

  private void printObject(String objName, String objType) {
    pp.print(objName);
    pp.print(":");
    pp.print(Names.getSimpleName(objType));
    pp.println(" {");
  }

  public String printObjectDiagram(String modelName, ASTClassDiagramsNode node) {
    pp.clearBuffer();
    pp.setIndentLength(2);
    pp.print("objectdiagram ");
    pp.print(modelName);
    pp.println(" {");
    pp.indent();
    node.accept(getRealThis());
    pp.print(";");
    pp.unindent();
    pp.println("}");
    return pp.getContent();
  }

  @Override
  public void setRealThis(ClassDiagramsVisitor realThis) {
    this.realThis = realThis;
  }

  @Override
  public ClassDiagramsVisitor getRealThis() {
    return realThis;
  }

  /**
   * @return the printEmptyOptional
   */
  public boolean isPrintEmptyOptional() {
    return this.printEmptyOptional;
  }


  /**
   * @param printEmptyOptional the printEmptyOptional to set
   */
  public void setPrintEmptyOptional(boolean printEmptyOptional) {
    this.printEmptyOptional = printEmptyOptional;
  }


  /**
   * @return the printEmptyList
   */
  public boolean isPrintEmptyList() {
    return this.printEmptyList;
  }


  /**
   * @param printEmptyList the printEmptyList to set
   */
  public void setPrintEmptyList(boolean printEmptyList) {
    this.printEmptyList = printEmptyList;
  }

}

