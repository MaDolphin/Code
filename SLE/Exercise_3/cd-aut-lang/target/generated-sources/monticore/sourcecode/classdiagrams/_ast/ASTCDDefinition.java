/* generated from model ClassDiagrams */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package classdiagrams._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTCDDefinition extends ASTCNode  implements classdiagrams._ast.ASTClassDiagramsNode {

    /* generated by template core.Attribute*/
 protected  Optional<classdiagrams._ast.ASTModifier> modifier = Optional.empty();

    /* generated by template core.Attribute*/
 protected  String name ;

    /* generated by template core.Attribute*/
 protected  java.util.List<classdiagrams._ast.ASTCDClass> cDClasss = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  java.util.List<classdiagrams._ast.ASTCDInterface> cDInterfaces = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  Optional<classdiagrams._symboltable.CDDefinitionSymbol> symbol = Optional.empty();

    /* generated by template core.Attribute*/
 protected  classdiagrams._symboltable.IClassDiagramsScope spannedScope ;

    /* generated by template core.Attribute*/
 protected  classdiagrams._symboltable.IClassDiagramsScope enclosingScope ;


    /* generated by template core.Constructor*/
 protected  ASTCDDefinition()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)  {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTCDDefinition comp;
    if ((o instanceof ASTCDDefinition)) {
      comp = (ASTCDDefinition) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing modifier   
    if ( this.modifier.isPresent() != comp.modifier.isPresent() ||
      (this.modifier.isPresent() && !this.modifier.get().deepEquals(comp.modifier.get(), forceSameOrder)) ) {
      return false;
    }
    // comparing cDClasss
    if (this.cDClasss.size() != comp.cDClasss.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<classdiagrams._ast.ASTCDClass> it1 = this.cDClasss.iterator();
        Iterator<classdiagrams._ast.ASTCDClass> it2 = comp.cDClasss.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<classdiagrams._ast.ASTCDClass> it1 = this.cDClasss.iterator();
        while (it1.hasNext()) {
          classdiagrams._ast.ASTCDClass oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<classdiagrams._ast.ASTCDClass> it2 = comp.cDClasss.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing cDInterfaces
    if (this.cDInterfaces.size() != comp.cDInterfaces.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<classdiagrams._ast.ASTCDInterface> it1 = this.cDInterfaces.iterator();
        Iterator<classdiagrams._ast.ASTCDInterface> it2 = comp.cDInterfaces.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<classdiagrams._ast.ASTCDInterface> it1 = this.cDInterfaces.iterator();
        while (it1.hasNext()) {
          classdiagrams._ast.ASTCDInterface oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<classdiagrams._ast.ASTCDInterface> it2 = comp.cDInterfaces.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)  {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithComments*/

      ASTCDDefinition comp;
    if ((o instanceof ASTCDDefinition)) {
      comp = (ASTCDDefinition) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing modifier
    if ( this.modifier.isPresent() != comp.modifier.isPresent() ||
      (this.modifier.isPresent() && !this.modifier.get().deepEqualsWithComments(comp.modifier.get(), forceSameOrder)) ) {
      return false;
    }
    // comparing cDClasss
    if (this.cDClasss.size() != comp.cDClasss.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<classdiagrams._ast.ASTCDClass> it1 = this.cDClasss.iterator();
        Iterator<classdiagrams._ast.ASTCDClass> it2 = comp.cDClasss.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<classdiagrams._ast.ASTCDClass> it1 = this.cDClasss.iterator();
        while (it1.hasNext()) {
          classdiagrams._ast.ASTCDClass oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<classdiagrams._ast.ASTCDClass> it2 = comp.cDClasss.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing cDInterfaces
    if (this.cDInterfaces.size() != comp.cDInterfaces.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<classdiagrams._ast.ASTCDInterface> it1 = this.cDInterfaces.iterator();
        Iterator<classdiagrams._ast.ASTCDInterface> it2 = comp.cDInterfaces.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<classdiagrams._ast.ASTCDInterface> it1 = this.cDInterfaces.iterator();
        while (it1.hasNext()) {
          classdiagrams._ast.ASTCDInterface oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<classdiagrams._ast.ASTCDInterface> it2 = comp.cDInterfaces.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)  {
      /* generated by template data.EqualAttributes*/

      ASTCDDefinition comp;
    if ((o instanceof ASTCDDefinition)) {
      comp = (ASTCDDefinition) o;
    } else {
      return false;
    }
	// comparing name 
    if ( (this.name == null && comp.name != null) 
      || (this.name != null && !this.name.equals(comp.name)) ) {
      return false;
    }
    return true;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)  {
      /* generated by template data.EqualsWithComments*/

      ASTCDDefinition comp;
    if ((o instanceof ASTCDDefinition)) {
      comp = (ASTCDDefinition) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTCDDefinition deepClone ()  {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTCDDefinition deepClone (ASTCDDefinition result)  {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

    if (isPresentModifier()){
      result.setModifier(getModifier().deepClone());
    } else {
      result.setModifierAbsent();
    }
      result.setName(getName());
      getCDClassList().forEach(s -> result.cDClasss.add(s.deepClone()));
      getCDInterfaceList().forEach(s -> result.cDInterfaces.add(s.deepClone()));
    if (isPresentSymbol()){
      result.setSymbol(getSymbol());
    } else {
      result.setSymbolAbsent();
    }
      result.setSpannedScope(getSpannedScope());
      result.setEnclosingScope(getEnclosingScope());
    
    return result;

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTModifier getModifier ()  {
      /* generated by template methods.opt.Get*/

if (isPresentModifier()) {
return this.modifier.get();
}
Log.error("0xA7003x960 Modifier can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentModifier ()  {
      /* generated by template methods.opt.IsPresent*/

return this.modifier.isPresent();

}

    /* generated by template core.Method*/
 public  String getName ()  {
      /* generated by template methods.Get*/

return this.name;

}

    /* generated by template core.Method*/
 public  boolean containsCDClass (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllCDClasss (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyCDClasss ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<classdiagrams._ast.ASTCDClass> iteratorCDClasss ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeCDClasss ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().size();

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDClass[] toArrayCDClasss (classdiagrams._ast.ASTCDClass[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayCDClasss ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<classdiagrams._ast.ASTCDClass> spliteratorCDClasss ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<classdiagrams._ast.ASTCDClass> streamCDClasss ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().stream();

}

    /* generated by template core.Method*/
 public  Stream<classdiagrams._ast.ASTCDClass> parallelStreamCDClasss ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().parallelStream();

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDClass getCDClass (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfCDClass (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfCDClass (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsCDClasss (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeCDClasss ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<classdiagrams._ast.ASTCDClass> listIteratorCDClasss ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<classdiagrams._ast.ASTCDClass> listIteratorCDClasss (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<classdiagrams._ast.ASTCDClass> subListCDClasss (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<classdiagrams._ast.ASTCDClass> getCDClassList ()  {
      /* generated by template methods.Get*/

return this.cDClasss;

}

    /* generated by template core.Method*/
 public  boolean containsCDInterface (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllCDInterfaces (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyCDInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<classdiagrams._ast.ASTCDInterface> iteratorCDInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeCDInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().size();

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDInterface[] toArrayCDInterfaces (classdiagrams._ast.ASTCDInterface[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayCDInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<classdiagrams._ast.ASTCDInterface> spliteratorCDInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<classdiagrams._ast.ASTCDInterface> streamCDInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().stream();

}

    /* generated by template core.Method*/
 public  Stream<classdiagrams._ast.ASTCDInterface> parallelStreamCDInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().parallelStream();

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDInterface getCDInterface (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfCDInterface (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfCDInterface (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsCDInterfaces (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeCDInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<classdiagrams._ast.ASTCDInterface> listIteratorCDInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<classdiagrams._ast.ASTCDInterface> listIteratorCDInterfaces (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<classdiagrams._ast.ASTCDInterface> subListCDInterfaces (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<classdiagrams._ast.ASTCDInterface> getCDInterfaceList ()  {
      /* generated by template methods.Get*/

return this.cDInterfaces;

}

    /* generated by template core.Method*/
 public  void setModifier (classdiagrams._ast.ASTModifier modifier)  {
      /* generated by template methods.opt.Set*/

this.modifier = Optional.ofNullable(modifier);

}

    /* generated by template core.Method*/
 public  void setModifierAbsent ()  {
      /* generated by template methods.opt.SetAbsent*/

this.modifier = Optional.empty();

}

    /* generated by template core.Method*/
 public  void setName (String name)  {
      /* generated by template methods.Set*/

this.name = name;

}

    /* generated by template core.Method*/
 public  void clearCDClasss ()  {
      /* generated by template methods.MethodDelegate*/

this.getCDClassList().clear();

}

    /* generated by template core.Method*/
 public  boolean addCDClass (classdiagrams._ast.ASTCDClass element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllCDClasss (Collection<? extends classdiagrams._ast.ASTCDClass> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeCDClass (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllCDClasss (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllCDClasss (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfCDClass (Predicate<? super classdiagrams._ast.ASTCDClass> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachCDClasss (Consumer<? super classdiagrams._ast.ASTCDClass> action)  {
      /* generated by template methods.MethodDelegate*/

this.getCDClassList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addCDClass (int index,classdiagrams._ast.ASTCDClass element)  {
      /* generated by template methods.MethodDelegate*/

this.getCDClassList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllCDClasss (int index,Collection<? extends classdiagrams._ast.ASTCDClass> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDClass removeCDClass (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().remove(index);

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDClass setCDClass (int index,classdiagrams._ast.ASTCDClass element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDClassList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllCDClasss (UnaryOperator<classdiagrams._ast.ASTCDClass> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getCDClassList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortCDClasss (Comparator<? super classdiagrams._ast.ASTCDClass> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getCDClassList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setCDClassList (List<classdiagrams._ast.ASTCDClass> cDClasss)  {
      /* generated by template methods.Set*/

this.cDClasss = cDClasss;

}

    /* generated by template core.Method*/
 public  void clearCDInterfaces ()  {
      /* generated by template methods.MethodDelegate*/

this.getCDInterfaceList().clear();

}

    /* generated by template core.Method*/
 public  boolean addCDInterface (classdiagrams._ast.ASTCDInterface element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllCDInterfaces (Collection<? extends classdiagrams._ast.ASTCDInterface> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeCDInterface (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllCDInterfaces (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllCDInterfaces (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfCDInterface (Predicate<? super classdiagrams._ast.ASTCDInterface> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachCDInterfaces (Consumer<? super classdiagrams._ast.ASTCDInterface> action)  {
      /* generated by template methods.MethodDelegate*/

this.getCDInterfaceList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addCDInterface (int index,classdiagrams._ast.ASTCDInterface element)  {
      /* generated by template methods.MethodDelegate*/

this.getCDInterfaceList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllCDInterfaces (int index,Collection<? extends classdiagrams._ast.ASTCDInterface> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDInterface removeCDInterface (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().remove(index);

}

    /* generated by template core.Method*/
 public  classdiagrams._ast.ASTCDInterface setCDInterface (int index,classdiagrams._ast.ASTCDInterface element)  {
      /* generated by template methods.MethodDelegate*/

return this.getCDInterfaceList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllCDInterfaces (UnaryOperator<classdiagrams._ast.ASTCDInterface> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getCDInterfaceList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortCDInterfaces (Comparator<? super classdiagrams._ast.ASTCDInterface> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getCDInterfaceList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setCDInterfaceList (List<classdiagrams._ast.ASTCDInterface> cDInterfaces)  {
      /* generated by template methods.Set*/

this.cDInterfaces = cDInterfaces;

}

    /* generated by template core.Method*/
 public  void accept (classdiagrams._visitor.ClassDiagramsVisitor visitor)  {
      /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mcsimplegenerictypes._visitor.MCSimpleGenericTypesVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x862 AST node type ASTCDDefinition expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.mcsimplegenerictypes._visitor.MCSimpleGenericTypesVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x862 AST node type ASTCDDefinition expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mccollectiontypes._visitor.MCCollectionTypesVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x862 AST node type ASTCDDefinition expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.mccollectiontypes._visitor.MCCollectionTypesVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x862 AST node type ASTCDDefinition expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x862 AST node type ASTCDDefinition expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.mcbasics._visitor.MCBasicsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.types.typesymbols._visitor.TypeSymbolsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x862 AST node type ASTCDDefinition expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.types.typesymbols._visitor.TypeSymbolsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof classdiagrams._visitor.ClassDiagramsVisitor) {
    accept((classdiagrams._visitor.ClassDiagramsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x862 AST node type ASTCDDefinition expected a visitor of type classdiagrams._visitor.ClassDiagramsVisitor, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTCDDefinition _construct ()  {
      return classdiagrams._ast.ClassDiagramsNodeFactory.createASTCDDefinition();
}

    /* generated by template core.Method*/
 public  Collection<de.monticore.ast.ASTNode> get_Children ()  {
      /* generated by template _ast.ast_class.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if (isPresentModifier()) {
          result.add(getModifier());
        }
        result.addAll(getCDClassList());
        result.addAll(getCDInterfaceList());
    return result;

}

    /* generated by template core.Method*/
 public  classdiagrams._symboltable.CDDefinitionSymbol getSymbol ()  {
      /* generated by template methods.opt.Get*/

if (isPresentSymbol()) {
return this.symbol.get();
}
Log.error("0xA7003x414 Symbol can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentSymbol ()  {
      /* generated by template methods.opt.IsPresent*/

return this.symbol.isPresent();

}

    /* generated by template core.Method*/
 public  void setSymbol (classdiagrams._symboltable.CDDefinitionSymbol symbol)  {
      /* generated by template methods.opt.Set*/

this.symbol = Optional.ofNullable(symbol);

}

    /* generated by template core.Method*/
 public  void setSymbolAbsent ()  {
      /* generated by template methods.opt.SetAbsent*/

this.symbol = Optional.empty();

}

    /* generated by template core.Method*/
 public  classdiagrams._symboltable.IClassDiagramsScope getSpannedScope ()  {
      /* generated by template methods.Get*/

return this.spannedScope;

}

    /* generated by template core.Method*/
 public  void setSpannedScope (classdiagrams._symboltable.IClassDiagramsScope spannedScope)  {
      /* generated by template methods.Set*/

this.spannedScope = spannedScope;

}

    /* generated by template core.Method*/
 public  classdiagrams._symboltable.IClassDiagramsScope getEnclosingScope ()  {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (classdiagrams._symboltable.IClassDiagramsScope enclosingScope)  {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x805The EnclosingScope form type de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x357The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x571The EnclosingScope form type de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x667The EnclosingScope form type de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x803The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.types.typesymbols._symboltable.ITypeSymbolsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x041The EnclosingScope form type de.monticore.types.typesymbols._symboltable.ITypeSymbolsScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof classdiagrams._symboltable.IClassDiagramsScope){
    this.enclosingScope = (classdiagrams._symboltable.IClassDiagramsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x348The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type classdiagrams._symboltable.IClassDiagramsScope. Please call the Method setEnclosingScope with a parameter form type classdiagrams._symboltable.IClassDiagramsScope");
  }
}

}
