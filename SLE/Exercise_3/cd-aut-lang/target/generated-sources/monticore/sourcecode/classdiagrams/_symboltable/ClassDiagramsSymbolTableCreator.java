/* generated from model ClassDiagrams */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package classdiagrams._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ClassDiagramsSymbolTableCreator  implements classdiagrams._visitor.ClassDiagramsVisitor {

    /* generated by template core.Attribute*/
 protected  Deque<classdiagrams._symboltable.IClassDiagramsScope> scopeStack = new java.util.ArrayDeque<>();

    /* generated by template core.Attribute*/
 private  classdiagrams._visitor.ClassDiagramsVisitor realThis = this;

    /* generated by template core.Attribute*/
 protected  classdiagrams._symboltable.IClassDiagramsScope firstCreatedScope ;


    /* generated by template core.Constructor*/
 public  ClassDiagramsSymbolTableCreator(classdiagrams._symboltable.IClassDiagramsScope enclosingScope)  {
    putOnStack(Log.errorIfNull(enclosingScope));
}

    /* generated by template core.Constructor*/
 public  ClassDiagramsSymbolTableCreator(Deque<? extends classdiagrams._symboltable.IClassDiagramsScope> scopeStack)  {
    this.scopeStack = Log.errorIfNull((Deque<classdiagrams._symboltable.IClassDiagramsScope>)scopeStack);
}


    /* generated by template core.Method*/
 public  classdiagrams._visitor.ClassDiagramsVisitor getRealThis ()  {
      /* generated by template methods.Get*/

return this.realThis;

}

    /* generated by template core.Method*/
 public  void setRealThis (classdiagrams._visitor.ClassDiagramsVisitor realThis)  {
      /* generated by template methods.Set*/

this.realThis = realThis;

}

    /* generated by template core.Method*/
 public  classdiagrams._symboltable.IClassDiagramsScope getFirstCreatedScope ()  {
      /* generated by template methods.Get*/

return this.firstCreatedScope;

}

    /* generated by template core.Method*/
 public  classdiagrams._symboltable.ClassDiagramsArtifactScope createFromAST (classdiagrams._ast.ASTCDCompilationUnit rootNode)  {
      /* generated by template _symboltable.symboltablecreator.CreateFromAST*/

  Log.errorIfNull(rootNode, "0xA7004x869 Error by creating of the ClassDiagramsSymbolTableCreator symbol table: top ast node is null");
  classdiagrams._symboltable.ClassDiagramsArtifactScope artifactScope = new classdiagrams._symboltable.ClassDiagramsArtifactScope(Optional.empty(), "", new ArrayList<>());
  putOnStack(artifactScope);
  rootNode.accept(getRealThis());
  return artifactScope;
}

    /* generated by template core.Method*/
 public  void putOnStack (classdiagrams._symboltable.IClassDiagramsScope scope)  {
      /* generated by template _symboltable.symboltablecreator.PutOnStack*/
  Log.errorIfNull(scope);

if (scope.getEnclosingScope() == null && getCurrentScope().isPresent()) {
    scope.setEnclosingScope(getCurrentScope().get());
    getCurrentScope().get().addSubScope(scope);
} else if (scope.getEnclosingScope() != null && getCurrentScope().isPresent()) {
    if (scope.getEnclosingScope() != getCurrentScope().get()) {
      Log.warn("0xA1043 The enclosing scope is not the same as the current scope on the stack.");
    }
  }

  if (firstCreatedScope == null) {
    firstCreatedScope = scope;
  }

  scopeStack.addLast(scope);
}

    /* generated by template core.Method*/
 public  final  Optional<classdiagrams._symboltable.IClassDiagramsScope> getCurrentScope ()  {
      return Optional.ofNullable(scopeStack.peekLast());
}

    /* generated by template core.Method*/
 public  final  Optional<classdiagrams._symboltable.IClassDiagramsScope> removeCurrentScope ()  {
      return Optional.ofNullable(scopeStack.pollLast());
}

    /* generated by template core.Method*/
 protected  void setCDCompilationUnitScopeStack (Deque<classdiagrams._symboltable.IClassDiagramsScope> scopeStack)  {
      this.scopeStack = scopeStack;
}

    /* generated by template core.Method*/
 public  classdiagrams._symboltable.IClassDiagramsScope createScope (boolean shadowing)  {
      /* generated by template _symboltable.symboltablecreator.CreateScope*/

  classdiagrams._symboltable.IClassDiagramsScope scope = classdiagrams._symboltable.ClassDiagramsSymTabMill.classDiagramsScopeBuilder().build();
  scope.setShadowing(shadowing);
  return scope;
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDDefinition node)  {
      /* generated by template _symboltable.symboltablecreator.Visit*/

  classdiagrams._symboltable.CDDefinitionSymbol symbol = create_CDDefinition(node);
  initialize_CDDefinition(symbol, node);
  addToScopeAndLinkWithNode(symbol, node);
}

    /* generated by template core.Method*/
 public  void endVisit (classdiagrams._ast.ASTCDDefinition node)  {
      removeCurrentScope();
}

    /* generated by template core.Method*/
 protected  classdiagrams._symboltable.CDDefinitionSymbol create_CDDefinition (classdiagrams._ast.ASTCDDefinition ast)  {
      return new classdiagrams._symboltable.CDDefinitionSymbol(ast.getName());
}

    /* generated by template core.Method*/
 protected  void initialize_CDDefinition (classdiagrams._symboltable.CDDefinitionSymbol symbol,classdiagrams._ast.ASTCDDefinition ast)  {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 public  void addToScopeAndLinkWithNode (classdiagrams._symboltable.CDDefinitionSymbol symbol,classdiagrams._ast.ASTCDDefinition ast)  {
      /* generated by template _symboltable.symboltablecreator.AddToScopeAndLinkWithNode*/

  addToScope(symbol);
  classdiagrams._symboltable.IClassDiagramsScope scope = createScope(false);
  putOnStack(scope);
  symbol.setSpannedScope(scope);
  setLinkBetweenSymbolAndNode(symbol, ast);
}

    /* generated by template core.Method*/
 public  void setLinkBetweenSymbolAndNode (classdiagrams._symboltable.CDDefinitionSymbol symbol,classdiagrams._ast.ASTCDDefinition ast)  {
      /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSymbolAndNode*/

  // symbol -> ast
  symbol.setAstNode(ast);

  // ast -> symbol
  ast.setSymbol(symbol);
  ast.setEnclosingScope(symbol.getEnclosingScope());

  // ast -> spannedScope
  ast.setSpannedScope(symbol.getSpannedScope());

}

    /* generated by template core.Method*/
 public  void setLinkBetweenSpannedScopeAndNode (classdiagrams._symboltable.IClassDiagramsScope scope,classdiagrams._ast.ASTCDDefinition ast)  {
      /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSpannedScopeAndNode*/

  // scope -> ast
  scope.setAstNode(ast);

  // ast -> scope
  ast.setSpannedScope((classdiagrams._symboltable.ClassDiagramsScope) scope);
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDCompilationUnit node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDClass node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTTImplements node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDInterface node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDAttribute node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDConstructor node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDMethod node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTCDParameter node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (classdiagrams._ast.ASTModifier node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void addToScope (classdiagrams._symboltable.CDDefinitionSymbol symbol)  {
      /* generated by template _symboltable.symboltablecreator.AddToScope*/
  if (getCurrentScope().isPresent()) {
    getCurrentScope().get().add(symbol);
  } else {
    Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
  }

}

    /* generated by template core.Method*/
 public  void addToScope (de.monticore.types.typesymbols._symboltable.TypeSymbol symbol)  {
      /* generated by template _symboltable.symboltablecreator.AddToScope*/
  if (getCurrentScope().isPresent()) {
    getCurrentScope().get().add(symbol);
  } else {
    Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
  }

}

    /* generated by template core.Method*/
 public  void addToScope (de.monticore.types.typesymbols._symboltable.TypeVarSymbol symbol)  {
      /* generated by template _symboltable.symboltablecreator.AddToScope*/
  if (getCurrentScope().isPresent()) {
    getCurrentScope().get().add(symbol);
  } else {
    Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
  }

}

    /* generated by template core.Method*/
 public  void addToScope (de.monticore.types.typesymbols._symboltable.FieldSymbol symbol)  {
      /* generated by template _symboltable.symboltablecreator.AddToScope*/
  if (getCurrentScope().isPresent()) {
    getCurrentScope().get().add(symbol);
  } else {
    Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
  }

}

    /* generated by template core.Method*/
 public  void addToScope (de.monticore.types.typesymbols._symboltable.MethodSymbol symbol)  {
      /* generated by template _symboltable.symboltablecreator.AddToScope*/
  if (getCurrentScope().isPresent()) {
    getCurrentScope().get().add(symbol);
  } else {
    Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
  }

}

}
