/* (c) https://github.com/MontiCore/monticore */

grammar ClassDiagrams extends de.monticore.types.MCSimpleGenericTypes,
			    de.monticore.literals.MCCommonLiterals {

  /** ASTCDCompilationUnit represents the complete Diagram
    @attribute package          The package declaration of this Classdiagram
    @attribute MCImportStatements List of imported elements
    @attribute cDDefinition   
  */
  CDCompilationUnit =
    ("package" package:(Name& || ".")+ ";")? 
    (MCImportStatement)*
    CDDefinition;


  /** ASTCDDefinition represents a Classdiagram
    @attribute name           Name of this Classdiagram
    @attribute cDClasses      List of Classes of this Classdiagram
    @attribute cDInterfaces   List of Interfaces of this Classdiagram
    @attribute cDEnums        List of Enums of this Classdiagram
    @attribute cDAssociations List of Associations of this Classdiagram
  */
  symbol scope CDDefinition = Modifier? "classdiagram" Name "{"
  (   CDClass
    | CDInterface)* "}";

  // Exercise 5.2a
  interface symbol scope CDType = Name;

  // Exercise 5.2b
  symbolrule CDType =
    isPrivate: boolean
    isProtected: boolean
    isPublic: boolean
  ;

   interface CDField = Name;

   interface CDMethOrConstr = Name;


  /** ASTCDClass represents a Class in a Classdiagram
    @attribute modifier       Optional Modifier of this Class
    @attribute name           Name of this Class
    @attribute superclass     Optional Superclass of this Class
    @attribute interfaces     List of Interfaces implemented by this Class
    @attribute cDConstructors List of Constructors of this Class
    @attribute cDMethods      List of Methods of this Class
    @attribute cDAttributes   List of Attributes of this Class
  */
  CDClass implements CDType = Modifier?  "class" Name
  ( "extends"  superclass:MCObjectType)?
  ( TImplements interface:(MCObjectType || ",")+ )?
  ( "{"
    ( CDAttribute
    | CDConstructor
    | CDMethod )*
    "}"
  | ";" );

  // indirect token
  TImplements = { _input.LT(1).getText().equals("implements") }? Name; // implements is often association or role name (e.g., when creating the abstract syntax of CD4A itself or for the abstract syntax of Java)


  /** ASTCDInterface represents an Interface in a Classdiagram
    @attribute modifier       Optional Modifier of this Interface
    @attribute name           Name of this Interface
    @attribute interfaces     List of Interfaces extended by this Interface
    @attribute cDMethods      List of Methods of this Interface
    @attribute cDAttributes   List of Attributes of this Interface
  */
  CDInterface implements CDType = Modifier? "interface" Name
    ( "extends" interface:(MCObjectType || ",")+ )?
    ( "{"
      ( CDAttribute
      | CDMethod )*
      "}"
    | ";" );

  /** ASTCDAttribute represents an Attribute of a Class or Interface
    @attribute modifier Modifier of this Attribute
    @attribute type     Type of this Attribute
    @attribute name     Name of this Attribute
    @attribute value    Value of this Attribute
  */
  CDAttribute implements CDField = Modifier? MCType Name ";";

  /** ASTCDConstructor represents a Constructor of a Class or Interface
    @attribute name           Name of this Constructor
    @attribute cDParameters   List of Parameters of this Constructor
    @attribute exceptions     List of Exceptions thrown by this Constructor
  */
  CDConstructor implements CDMethOrConstr =
    Modifier
     Name "(" (CDParameter || ",")* ")"
    ("throws" exception:(MCQualifiedName || "," )+)?
    ";";


  /** ASTCDMethod represents a Method of a Class or Interface
      @attribute modifier       Modifier of this Method
      @attribute returnType     Return-Type of the return value of this Method
      @attribute name           Name of this Method
      @attribute cDParameters   List of Parameters of this Method
      @attribute exceptions     List of Exceptions thrown by this Method
  */
  CDMethod implements CDMethOrConstr =
    Modifier
    MCReturnType
     Name "(" (CDParameter || ",")* ")"
    ("throws" exception:(MCQualifiedName || ",")+)?
    ";";


  /** ASTCDParameter represents a Parameter of a Constructor or Method
    @attribute mctype Type of this Parameter
    @attribute ellipsis Optional indicator for a variable Parameter length
    @attribute name Name of this Parameter
  */
  CDParameter implements CDField =
  MCType (Ellipsis:["..."])? Name;

  Modifier =
    (["abstract"]
      | ["final"]
      | ["static"]
      | ["private"] | [private:"-"]
      | ["protected"] | [protected:"#"]
      | ["public"] | [public:"+"]
      | ["derived"] | [derived:"/"] )*;


}
