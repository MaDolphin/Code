/* generated from model TravelCosts */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package travelcosts._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTTravelExpenseReport extends ASTCNode  implements travelcosts._ast.ASTTravelCostsNode {

    /* generated by template core.Attribute*/
 protected  String name ;

    /* generated by template core.Attribute*/
 protected  Optional<travelcosts._ast.ASTTravelNumber> travelNumber = Optional.empty();

    /* generated by template core.Attribute*/
 protected  travelcosts._ast.ASTArrival arrival ;

    /* generated by template core.Attribute*/
 protected  Optional<travelcosts._ast.ASTAllWorkDays> allWorkDays = Optional.empty();

    /* generated by template core.Attribute*/
 protected  java.util.List<travelcosts._ast.ASTWorkDay> workDays = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  travelcosts._ast.ASTDeparture departure ;

    /* generated by template core.Attribute*/
 protected  travelcosts._ast.ASTCostItems costItems ;

    /* generated by template core.Attribute*/
 protected  travelcosts._symboltable.ITravelCostsScope enclosingScope ;


    /* generated by template core.Constructor*/
 protected  ASTTravelExpenseReport()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)  {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTTravelExpenseReport comp;
    if ((o instanceof ASTTravelExpenseReport)) {
      comp = (ASTTravelExpenseReport) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing travelNumber   
    if ( this.travelNumber.isPresent() != comp.travelNumber.isPresent() ||
      (this.travelNumber.isPresent() && !this.travelNumber.get().deepEquals(comp.travelNumber.get(), forceSameOrder)) ) {
      return false;
    }
     // comparing arrival
     if ( (this.arrival == null && comp.arrival != null) ||
        (this.arrival != null && !this.arrival.deepEquals(comp.arrival, forceSameOrder)) ) {
        return false;
     }
    // comparing allWorkDays   
    if ( this.allWorkDays.isPresent() != comp.allWorkDays.isPresent() ||
      (this.allWorkDays.isPresent() && !this.allWorkDays.get().deepEquals(comp.allWorkDays.get(), forceSameOrder)) ) {
      return false;
    }
    // comparing workDays
    if (this.workDays.size() != comp.workDays.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<travelcosts._ast.ASTWorkDay> it1 = this.workDays.iterator();
        Iterator<travelcosts._ast.ASTWorkDay> it2 = comp.workDays.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<travelcosts._ast.ASTWorkDay> it1 = this.workDays.iterator();
        while (it1.hasNext()) {
          travelcosts._ast.ASTWorkDay oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<travelcosts._ast.ASTWorkDay> it2 = comp.workDays.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
     // comparing departure
     if ( (this.departure == null && comp.departure != null) ||
        (this.departure != null && !this.departure.deepEquals(comp.departure, forceSameOrder)) ) {
        return false;
     }
     // comparing costItems
     if ( (this.costItems == null && comp.costItems != null) ||
        (this.costItems != null && !this.costItems.deepEquals(comp.costItems, forceSameOrder)) ) {
        return false;
     }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)  {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithComments*/

      ASTTravelExpenseReport comp;
    if ((o instanceof ASTTravelExpenseReport)) {
      comp = (ASTTravelExpenseReport) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing travelNumber
    if ( this.travelNumber.isPresent() != comp.travelNumber.isPresent() ||
      (this.travelNumber.isPresent() && !this.travelNumber.get().deepEqualsWithComments(comp.travelNumber.get(), forceSameOrder)) ) {
      return false;
    }
      // comparing arrival
      if ( (this.arrival == null && comp.arrival != null) ||
        (this.arrival != null && !this.arrival.deepEqualsWithComments(comp.arrival, forceSameOrder)) ) {
        return false;
      }
    // comparing allWorkDays
    if ( this.allWorkDays.isPresent() != comp.allWorkDays.isPresent() ||
      (this.allWorkDays.isPresent() && !this.allWorkDays.get().deepEqualsWithComments(comp.allWorkDays.get(), forceSameOrder)) ) {
      return false;
    }
    // comparing workDays
    if (this.workDays.size() != comp.workDays.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<travelcosts._ast.ASTWorkDay> it1 = this.workDays.iterator();
        Iterator<travelcosts._ast.ASTWorkDay> it2 = comp.workDays.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<travelcosts._ast.ASTWorkDay> it1 = this.workDays.iterator();
        while (it1.hasNext()) {
          travelcosts._ast.ASTWorkDay oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<travelcosts._ast.ASTWorkDay> it2 = comp.workDays.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
      // comparing departure
      if ( (this.departure == null && comp.departure != null) ||
        (this.departure != null && !this.departure.deepEqualsWithComments(comp.departure, forceSameOrder)) ) {
        return false;
      }
      // comparing costItems
      if ( (this.costItems == null && comp.costItems != null) ||
        (this.costItems != null && !this.costItems.deepEqualsWithComments(comp.costItems, forceSameOrder)) ) {
        return false;
      }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)  {
      /* generated by template data.EqualAttributes*/

      ASTTravelExpenseReport comp;
    if ((o instanceof ASTTravelExpenseReport)) {
      comp = (ASTTravelExpenseReport) o;
    } else {
      return false;
    }
	// comparing name 
    if ( (this.name == null && comp.name != null) 
      || (this.name != null && !this.name.equals(comp.name)) ) {
      return false;
    }
    return true;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)  {
      /* generated by template data.EqualsWithComments*/

      ASTTravelExpenseReport comp;
    if ((o instanceof ASTTravelExpenseReport)) {
      comp = (ASTTravelExpenseReport) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTTravelExpenseReport deepClone ()  {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTTravelExpenseReport deepClone (ASTTravelExpenseReport result)  {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

      result.setName(getName());
    if (isPresentTravelNumber()){
      result.setTravelNumber(getTravelNumber().deepClone());
    } else {
      result.setTravelNumberAbsent();
    }
    result.setArrival(getArrival().deepClone());
    if (isPresentAllWorkDays()){
      result.setAllWorkDays(getAllWorkDays().deepClone());
    } else {
      result.setAllWorkDaysAbsent();
    }
      getWorkDayList().forEach(s -> result.workDays.add(s.deepClone()));
    result.setDeparture(getDeparture().deepClone());
    result.setCostItems(getCostItems().deepClone());
      result.setEnclosingScope(getEnclosingScope());
    
    return result;

}

    /* generated by template core.Method*/
 public  String getName ()  {
      /* generated by template methods.Get*/

return this.name;

}

    /* generated by template core.Method*/
 public  travelcosts._ast.ASTTravelNumber getTravelNumber ()  {
      /* generated by template methods.opt.Get*/

if (isPresentTravelNumber()) {
return this.travelNumber.get();
}
Log.error("0xA7003x423 TravelNumber can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentTravelNumber ()  {
      /* generated by template methods.opt.IsPresent*/

return this.travelNumber.isPresent();

}

    /* generated by template core.Method*/
 public  travelcosts._ast.ASTArrival getArrival ()  {
      /* generated by template methods.Get*/

return this.arrival;

}

    /* generated by template core.Method*/
 public  travelcosts._ast.ASTAllWorkDays getAllWorkDays ()  {
      /* generated by template methods.opt.Get*/

if (isPresentAllWorkDays()) {
return this.allWorkDays.get();
}
Log.error("0xA7003x156 AllWorkDays can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentAllWorkDays ()  {
      /* generated by template methods.opt.IsPresent*/

return this.allWorkDays.isPresent();

}

    /* generated by template core.Method*/
 public  boolean containsWorkDay (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllWorkDays (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyWorkDays ()  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<travelcosts._ast.ASTWorkDay> iteratorWorkDays ()  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeWorkDays ()  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().size();

}

    /* generated by template core.Method*/
 public  travelcosts._ast.ASTWorkDay[] toArrayWorkDays (travelcosts._ast.ASTWorkDay[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayWorkDays ()  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<travelcosts._ast.ASTWorkDay> spliteratorWorkDays ()  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<travelcosts._ast.ASTWorkDay> streamWorkDays ()  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().stream();

}

    /* generated by template core.Method*/
 public  Stream<travelcosts._ast.ASTWorkDay> parallelStreamWorkDays ()  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().parallelStream();

}

    /* generated by template core.Method*/
 public  travelcosts._ast.ASTWorkDay getWorkDay (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfWorkDay (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfWorkDay (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsWorkDays (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeWorkDays ()  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<travelcosts._ast.ASTWorkDay> listIteratorWorkDays ()  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<travelcosts._ast.ASTWorkDay> listIteratorWorkDays (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<travelcosts._ast.ASTWorkDay> subListWorkDays (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<travelcosts._ast.ASTWorkDay> getWorkDayList ()  {
      /* generated by template methods.Get*/

return this.workDays;

}

    /* generated by template core.Method*/
 public  travelcosts._ast.ASTDeparture getDeparture ()  {
      /* generated by template methods.Get*/

return this.departure;

}

    /* generated by template core.Method*/
 public  travelcosts._ast.ASTCostItems getCostItems ()  {
      /* generated by template methods.Get*/

return this.costItems;

}

    /* generated by template core.Method*/
 public  void setName (String name)  {
      /* generated by template methods.Set*/

this.name = name;

}

    /* generated by template core.Method*/
 public  void setTravelNumber (travelcosts._ast.ASTTravelNumber travelNumber)  {
      /* generated by template methods.opt.Set*/

this.travelNumber = Optional.ofNullable(travelNumber);

}

    /* generated by template core.Method*/
 public  void setTravelNumberAbsent ()  {
      /* generated by template methods.opt.SetAbsent*/

this.travelNumber = Optional.empty();

}

    /* generated by template core.Method*/
 public  void setArrival (travelcosts._ast.ASTArrival arrival)  {
      /* generated by template methods.Set*/

this.arrival = arrival;

}

    /* generated by template core.Method*/
 public  void setAllWorkDays (travelcosts._ast.ASTAllWorkDays allWorkDays)  {
      /* generated by template methods.opt.Set*/

this.allWorkDays = Optional.ofNullable(allWorkDays);

}

    /* generated by template core.Method*/
 public  void setAllWorkDaysAbsent ()  {
      /* generated by template methods.opt.SetAbsent*/

this.allWorkDays = Optional.empty();

}

    /* generated by template core.Method*/
 public  void clearWorkDays ()  {
      /* generated by template methods.MethodDelegate*/

this.getWorkDayList().clear();

}

    /* generated by template core.Method*/
 public  boolean addWorkDay (travelcosts._ast.ASTWorkDay element)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllWorkDays (Collection<? extends travelcosts._ast.ASTWorkDay> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeWorkDay (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllWorkDays (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllWorkDays (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfWorkDay (Predicate<? super travelcosts._ast.ASTWorkDay> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachWorkDays (Consumer<? super travelcosts._ast.ASTWorkDay> action)  {
      /* generated by template methods.MethodDelegate*/

this.getWorkDayList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addWorkDay (int index,travelcosts._ast.ASTWorkDay element)  {
      /* generated by template methods.MethodDelegate*/

this.getWorkDayList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllWorkDays (int index,Collection<? extends travelcosts._ast.ASTWorkDay> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  travelcosts._ast.ASTWorkDay removeWorkDay (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().remove(index);

}

    /* generated by template core.Method*/
 public  travelcosts._ast.ASTWorkDay setWorkDay (int index,travelcosts._ast.ASTWorkDay element)  {
      /* generated by template methods.MethodDelegate*/

return this.getWorkDayList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllWorkDays (UnaryOperator<travelcosts._ast.ASTWorkDay> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getWorkDayList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortWorkDays (Comparator<? super travelcosts._ast.ASTWorkDay> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getWorkDayList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setWorkDayList (List<travelcosts._ast.ASTWorkDay> workDays)  {
      /* generated by template methods.Set*/

this.workDays = workDays;

}

    /* generated by template core.Method*/
 public  void setDeparture (travelcosts._ast.ASTDeparture departure)  {
      /* generated by template methods.Set*/

this.departure = departure;

}

    /* generated by template core.Method*/
 public  void setCostItems (travelcosts._ast.ASTCostItems costItems)  {
      /* generated by template methods.Set*/

this.costItems = costItems;

}

    /* generated by template core.Method*/
 public  void accept (travelcosts._visitor.TravelCostsVisitor visitor)  {
      /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof travelcosts._visitor.TravelCostsVisitor) {
    accept((travelcosts._visitor.TravelCostsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x620 AST node type ASTTravelExpenseReport expected a visitor of type travelcosts._visitor.TravelCostsVisitor, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof travelcosts._visitor.TravelCostsVisitor) {
    accept((travelcosts._visitor.TravelCostsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x620 AST node type ASTTravelExpenseReport expected a visitor of type travelcosts._visitor.TravelCostsVisitor, but got de.monticore.mcbasics._visitor.MCBasicsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof travelcosts._visitor.TravelCostsVisitor) {
    accept((travelcosts._visitor.TravelCostsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x620 AST node type ASTTravelExpenseReport expected a visitor of type travelcosts._visitor.TravelCostsVisitor, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTTravelExpenseReport _construct ()  {
      return travelcosts._ast.TravelCostsNodeFactory.createASTTravelExpenseReport();
}

    /* generated by template core.Method*/
 public  Collection<de.monticore.ast.ASTNode> get_Children ()  {
      /* generated by template _ast.ast_class.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if (isPresentTravelNumber()) {
          result.add(getTravelNumber());
        }
        if ( getArrival() != null ) {
          result.add(getArrival());
        }
        if (isPresentAllWorkDays()) {
          result.add(getAllWorkDays());
        }
        result.addAll(getWorkDayList());
        if ( getDeparture() != null ) {
          result.add(getDeparture());
        }
        if ( getCostItems() != null ) {
          result.add(getCostItems());
        }
    return result;

}

    /* generated by template core.Method*/
 public  travelcosts._symboltable.ITravelCostsScope getEnclosingScope ()  {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (travelcosts._symboltable.ITravelCostsScope enclosingScope)  {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof travelcosts._symboltable.ITravelCostsScope){
    this.enclosingScope = (travelcosts._symboltable.ITravelCostsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x950The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type travelcosts._symboltable.ITravelCostsScope. Please call the Method setEnclosingScope with a parameter form type travelcosts._symboltable.ITravelCostsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof travelcosts._symboltable.ITravelCostsScope){
    this.enclosingScope = (travelcosts._symboltable.ITravelCostsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x460The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type travelcosts._symboltable.ITravelCostsScope. Please call the Method setEnclosingScope with a parameter form type travelcosts._symboltable.ITravelCostsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof travelcosts._symboltable.ITravelCostsScope){
    this.enclosingScope = (travelcosts._symboltable.ITravelCostsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x117The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type travelcosts._symboltable.ITravelCostsScope. Please call the Method setEnclosingScope with a parameter form type travelcosts._symboltable.ITravelCostsScope");
  }
}

}
