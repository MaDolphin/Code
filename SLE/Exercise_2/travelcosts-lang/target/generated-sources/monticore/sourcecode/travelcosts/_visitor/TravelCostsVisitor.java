/* generated from model TravelCosts */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package travelcosts._visitor;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;

/* generated by template core.Annotations*/
// empty template

 public  interface TravelCostsVisitor extends de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor {



  default /* generated by template core.Method*/
 public  travelcosts._visitor.TravelCostsVisitor getRealThis ()  {
      return this;
}

  default /* generated by template core.Method*/
 public  void setRealThis (travelcosts._visitor.TravelCostsVisitor realThis)  {
          throw new UnsupportedOperationException("0xA7011x709 The setter for realThis is not implemented. You might want to implement a wrapper class to allow setting/getting realThis.");

}

  default /* generated by template core.Method*/
 public  void endVisit (de.monticore.ast.ASTNode node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void visit (de.monticore.ast.ASTNode node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTTravelExpenseReport node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTTravelExpenseReport node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTTravelExpenseReport node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTTravelExpenseReport node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (node.isPresentTravelNumber()) {
        node.getTravelNumber().accept(getRealThis());
      }
      if (null != node.getArrival()) {
        node.getArrival().accept(getRealThis());
      }
      if (node.isPresentAllWorkDays()) {
        node.getAllWorkDays().accept(getRealThis());
      }
    {
      Iterator<travelcosts._ast.ASTWorkDay> iter_workDays = node.getWorkDayList().iterator();
      while (iter_workDays.hasNext()) {
        iter_workDays.next().accept(getRealThis());
      }
    }
      if (null != node.getDeparture()) {
        node.getDeparture().accept(getRealThis());
      }
      if (null != node.getCostItems()) {
        node.getCostItems().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTTravelNumber node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTTravelNumber node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTTravelNumber node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTTravelNumber node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (null != node.getTravelNo()) {
        node.getTravelNo().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTArrival node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTArrival node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTArrival node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTArrival node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (null != node.getDuration()) {
        node.getDuration().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTWorkDay node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTWorkDay node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTWorkDay node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTWorkDay node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (null != node.getDuration()) {
        node.getDuration().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTAllWorkDays node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTAllWorkDays node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTAllWorkDays node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTAllWorkDays node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (null != node.getBeginTime()) {
        node.getBeginTime().accept(getRealThis());
      }
      if (null != node.getEndTime()) {
        node.getEndTime().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTDeparture node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTDeparture node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTDeparture node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTDeparture node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (null != node.getDuration()) {
        node.getDuration().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTCostItems node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTCostItems node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTCostItems node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTCostItems node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<travelcosts._ast.ASTCostItem> iter_costItems = node.getCostItemList().iterator();
      while (iter_costItems.hasNext()) {
        iter_costItems.next().accept(getRealThis());
      }
    }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTCostItem node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTCostItem node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTCostItem node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTCostItem node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (node.isPresentId()) {
        node.getId().accept(getRealThis());
      }
      if (null != node.getAmount()) {
        node.getAmount().accept(getRealThis());
      }
      if (null != node.getCost()) {
        node.getCost().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTHotelCost node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTHotelCost node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTHotelCost node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTHotelCost node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.



}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTTransportCost node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTTransportCost node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTTransportCost node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTTransportCost node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (node.isPresentDescription()) {
        node.getDescription().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTExtraCost node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTExtraCost node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTExtraCost node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTExtraCost node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (null != node.getDescription()) {
        node.getDescription().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTDescription node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTDescription node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTDescription node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTDescription node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (node.isPresentLong()) {
        node.getLong().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTISODate node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTISODate node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTISODate node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTISODate node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (node.isPresentYear()) {
        node.getYear().accept(getRealThis());
      }
      if (null != node.getMonth()) {
        node.getMonth().accept(getRealThis());
      }
      if (null != node.getDay()) {
        node.getDay().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTTime node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTTime node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTTime node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTTime node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (node.isPresentLeadingZero()) {
        node.getLeadingZero().accept(getRealThis());
      }
      if (null != node.getHours()) {
        node.getHours().accept(getRealThis());
      }
      if (node.isPresentMinutes()) {
        node.getMinutes().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTDuration node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTDuration node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTDuration node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (travelcosts._ast.ASTDuration node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (null != node.getStartDate()) {
        node.getStartDate().accept(getRealThis());
      }
      if (null != node.getStartTime()) {
        node.getStartTime().accept(getRealThis());
      }
      if (node.isPresentEndDate()) {
        node.getEndDate().accept(getRealThis());
      }
      if (node.isPresentEndTime()) {
        node.getEndTime().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTCost node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTCost node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTCost node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTTravelCostsNode node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTTravelCostsNode node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTTravelCostsNode node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void visit (travelcosts._ast.ASTTravelMeans node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (travelcosts._ast.ASTTravelMeans node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (travelcosts._ast.ASTTravelMeans node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getRealThis().endVisit(node);

}

}
