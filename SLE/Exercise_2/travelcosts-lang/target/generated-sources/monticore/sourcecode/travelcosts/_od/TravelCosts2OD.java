/* generated by template od.DiagramVisitor*/




package travelcosts._od;

import travelcosts._visitor.TravelCostsVisitor;
import travelcosts._ast.ASTTravelCostsNode;
import de.monticore.prettyprint.IndentPrinter;
import de.se_rwth.commons.Names;
import de.se_rwth.commons.StringTransformations;
import de.monticore.generating.templateengine.reporting.commons.ReportingRepository;
import java.util.Iterator;

public class TravelCosts2OD implements TravelCostsVisitor {

  private TravelCostsVisitor realThis = this;

  protected IndentPrinter pp;

  protected ReportingRepository reporting;

  protected boolean printEmptyOptional = false;

  protected boolean printEmptyList = false;

  public TravelCosts2OD(IndentPrinter printer, ReportingRepository reporting) {
    this.reporting = reporting;
    this.pp = printer;
  }


      @Override
      public void handle(travelcosts._ast.ASTTravelExpenseReport node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTTravelExpenseReport");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        printAttribute("name", "\"" + String.valueOf(node.getName()) + "\"");
        if (node.isPresentTravelNumber()) {
     		  pp.print("travelNumber");
   			  pp.print(" = ");
          node.getTravelNumber().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("travelNumber = absent;");
        }
        if (null != node.getArrival()) {
      		pp.print("arrival");
          pp.print(" = ");
          node.getArrival().accept(getRealThis());
          pp.println(";");
        }
        if (node.isPresentAllWorkDays()) {
     		  pp.print("allWorkDays");
   			  pp.print(" = ");
          node.getAllWorkDays().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("allWorkDays = absent;");
        }
        {
        Iterator<travelcosts._ast.ASTWorkDay> iter_workDay = node.getWorkDayList().iterator();
        boolean isEmpty = true;
        if (iter_workDay.hasNext()) {
       	  pp.print("workDay");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getWorkDayList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("workDay");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_workDay.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_workDay.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        if (null != node.getDeparture()) {
      		pp.print("departure");
          pp.print(" = ");
          node.getDeparture().accept(getRealThis());
          pp.println(";");
        }
        if (null != node.getCostItems()) {
      		pp.print("costItems");
          pp.print(" = ");
          node.getCostItems().accept(getRealThis());
          pp.println(";");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTTravelNumber node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTTravelNumber");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (null != node.getTravelNo()) {
      		pp.print("travelNo");
          pp.print(" = ");
          node.getTravelNo().accept(getRealThis());
          pp.println(";");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTArrival node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTArrival");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (null != node.getDuration()) {
      		pp.print("duration");
          pp.print(" = ");
          node.getDuration().accept(getRealThis());
          pp.println(";");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTWorkDay node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTWorkDay");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (null != node.getDuration()) {
      		pp.print("duration");
          pp.print(" = ");
          node.getDuration().accept(getRealThis());
          pp.println(";");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTAllWorkDays node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTAllWorkDays");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (null != node.getBeginTime()) {
      		pp.print("beginTime");
          pp.print(" = ");
          node.getBeginTime().accept(getRealThis());
          pp.println(";");
        }
        if (null != node.getEndTime()) {
      		pp.print("endTime");
          pp.print(" = ");
          node.getEndTime().accept(getRealThis());
          pp.println(";");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTDeparture node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTDeparture");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (null != node.getDuration()) {
      		pp.print("duration");
          pp.print(" = ");
          node.getDuration().accept(getRealThis());
          pp.println(";");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTCostItems node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTCostItems");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        {
        Iterator<travelcosts._ast.ASTCostItem> iter_costItem = node.getCostItemList().iterator();
        boolean isEmpty = true;
        if (iter_costItem.hasNext()) {
       	  pp.print("costItem");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getCostItemList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("costItem");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_costItem.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_costItem.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTCostItem node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTCostItem");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (node.isPresentId()) {
     		  pp.print("id");
   			  pp.print(" = ");
          node.getId().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("id = absent;");
        }
        if (null != node.getAmount()) {
      		pp.print("amount");
          pp.print(" = ");
          node.getAmount().accept(getRealThis());
          pp.println(";");
        }
        if (null != node.getCost()) {
      		pp.print("cost");
          pp.print(" = ");
          node.getCost().accept(getRealThis());
          pp.println(";");
        }
        printAttribute("currency", String.valueOf(node.getCurrency()));
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTHotelCost node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTHotelCost");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTTransportCost node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTTransportCost");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        printAttribute("travelMeans", String.valueOf(node.getTravelMeans()));
        if (node.isPresentDescription()) {
     		  pp.print("description");
   			  pp.print(" = ");
          node.getDescription().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("description = absent;");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTExtraCost node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTExtraCost");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (null != node.getDescription()) {
      		pp.print("description");
          pp.print(" = ");
          node.getDescription().accept(getRealThis());
          pp.println(";");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTDescription node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTDescription");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (node.isPresentShort()) {
          printAttribute("r__short", "\"" + String.valueOf(node.getShort()) + "\"");
        } else if (printEmptyOptional) {
          pp.println("r__short = absent;");
        }
        if (node.isPresentLong()) {
     		  pp.print("r__long");
   			  pp.print(" = ");
          node.getLong().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("r__long = absent;");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTISODate node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTISODate");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (node.isPresentYear()) {
     		  pp.print("year");
   			  pp.print(" = ");
          node.getYear().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("year = absent;");
        }
        if (null != node.getMonth()) {
      		pp.print("month");
          pp.print(" = ");
          node.getMonth().accept(getRealThis());
          pp.println(";");
        }
        if (null != node.getDay()) {
      		pp.print("day");
          pp.print(" = ");
          node.getDay().accept(getRealThis());
          pp.println(";");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTTime node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTTime");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (node.isPresentLeadingZero()) {
     		  pp.print("leadingZero");
   			  pp.print(" = ");
          node.getLeadingZero().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("leadingZero = absent;");
        }
        if (null != node.getHours()) {
      		pp.print("hours");
          pp.print(" = ");
          node.getHours().accept(getRealThis());
          pp.println(";");
        }
        if (node.isPresentMinutes()) {
     		  pp.print("minutes");
   			  pp.print(" = ");
          node.getMinutes().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("minutes = absent;");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(travelcosts._ast.ASTDuration node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "travelcosts._ast.ASTDuration");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (null != node.getStartDate()) {
      		pp.print("startDate");
          pp.print(" = ");
          node.getStartDate().accept(getRealThis());
          pp.println(";");
        }
        if (null != node.getStartTime()) {
      		pp.print("startTime");
          pp.print(" = ");
          node.getStartTime().accept(getRealThis());
          pp.println(";");
        }
        if (node.isPresentEndDate()) {
     		  pp.print("endDate");
   			  pp.print(" = ");
          node.getEndDate().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("endDate = absent;");
        }
        if (node.isPresentEndTime()) {
     		  pp.print("endTime");
   			  pp.print(" = ");
          node.getEndTime().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("endTime = absent;");
        }
        pp.unindent();
        pp.print("}");
     }


  private void printAttribute(String name, String value) {
    pp.print(name);
    pp.print(" = ");
    pp.print(value);
    pp.println(";");
  }

  private void printObject(String objName, String objType) {
    pp.print(objName);
    pp.print(":");
    pp.print(Names.getSimpleName(objType));
    pp.println(" {");
  }

  public String printObjectDiagram(String modelName, ASTTravelCostsNode node) {
    pp.clearBuffer();
    pp.setIndentLength(2);
    pp.print("objectdiagram ");
    pp.print(modelName);
    pp.println(" {");
    pp.indent();
    node.accept(getRealThis());
    pp.print(";");
    pp.unindent();
    pp.println("}");
    return pp.getContent();
  }

  @Override
  public void setRealThis(TravelCostsVisitor realThis) {
    this.realThis = realThis;
  }

  @Override
  public TravelCostsVisitor getRealThis() {
    return realThis;
  }

  /**
   * @return the printEmptyOptional
   */
  public boolean isPrintEmptyOptional() {
    return this.printEmptyOptional;
  }


  /**
   * @param printEmptyOptional the printEmptyOptional to set
   */
  public void setPrintEmptyOptional(boolean printEmptyOptional) {
    this.printEmptyOptional = printEmptyOptional;
  }


  /**
   * @return the printEmptyList
   */
  public boolean isPrintEmptyList() {
    return this.printEmptyList;
  }


  /**
   * @param printEmptyList the printEmptyList to set
   */
  public void setPrintEmptyList(boolean printEmptyList) {
    this.printEmptyList = printEmptyList;
  }

}

