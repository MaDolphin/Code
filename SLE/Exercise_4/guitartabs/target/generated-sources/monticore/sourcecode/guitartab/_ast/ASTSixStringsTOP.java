/* generated from model GuitarTab */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package guitartab._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 abstract  public  class ASTSixStringsTOP extends ASTCNode  implements guitartab._ast.ASTGuitarTabNode {

    /* generated by template core.Attribute*/
 protected  java.util.List<guitartab._ast.ASTGuitarString> guitarStrings = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  java.util.List<String> linebreaks = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  Optional<guitartab._ast.ASTLengthLine> lengthLine = Optional.empty();

    /* generated by template core.Attribute*/
 protected  guitartab._symboltable.IGuitarTabScope enclosingScope ;


    /* generated by template core.Constructor*/
 protected  ASTSixStringsTOP()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)  {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTSixStrings comp;
    if ((o instanceof ASTSixStrings)) {
      comp = (ASTSixStrings) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing guitarStrings
    if (this.guitarStrings.size() != comp.guitarStrings.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<guitartab._ast.ASTGuitarString> it1 = this.guitarStrings.iterator();
        Iterator<guitartab._ast.ASTGuitarString> it2 = comp.guitarStrings.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<guitartab._ast.ASTGuitarString> it1 = this.guitarStrings.iterator();
        while (it1.hasNext()) {
          guitartab._ast.ASTGuitarString oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<guitartab._ast.ASTGuitarString> it2 = comp.guitarStrings.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing lengthLine   
    if ( this.lengthLine.isPresent() != comp.lengthLine.isPresent() ||
      (this.lengthLine.isPresent() && !this.lengthLine.get().deepEquals(comp.lengthLine.get(), forceSameOrder)) ) {
      return false;
    }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)  {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithComments*/

      ASTSixStrings comp;
    if ((o instanceof ASTSixStrings)) {
      comp = (ASTSixStrings) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing guitarStrings
    if (this.guitarStrings.size() != comp.guitarStrings.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<guitartab._ast.ASTGuitarString> it1 = this.guitarStrings.iterator();
        Iterator<guitartab._ast.ASTGuitarString> it2 = comp.guitarStrings.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<guitartab._ast.ASTGuitarString> it1 = this.guitarStrings.iterator();
        while (it1.hasNext()) {
          guitartab._ast.ASTGuitarString oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<guitartab._ast.ASTGuitarString> it2 = comp.guitarStrings.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing lengthLine
    if ( this.lengthLine.isPresent() != comp.lengthLine.isPresent() ||
      (this.lengthLine.isPresent() && !this.lengthLine.get().deepEqualsWithComments(comp.lengthLine.get(), forceSameOrder)) ) {
      return false;
    }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)  {
      /* generated by template data.EqualAttributes*/

      ASTSixStrings comp;
    if ((o instanceof ASTSixStrings)) {
      comp = (ASTSixStrings) o;
    } else {
      return false;
    }
	// comparing linebreaks 
    if ( (this.linebreaks == null && comp.linebreaks != null) 
      || (this.linebreaks != null && !this.linebreaks.equals(comp.linebreaks)) ) {
      return false;
    }
    return true;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)  {
      /* generated by template data.EqualsWithComments*/

      ASTSixStrings comp;
    if ((o instanceof ASTSixStrings)) {
      comp = (ASTSixStrings) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTSixStrings deepClone ()  {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTSixStrings deepClone (ASTSixStrings result)  {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

      getGuitarStringList().forEach(s -> result.guitarStrings.add(s.deepClone()));
      for ( int i = 0; i < this.getLinebreakList().size() ; i++ ) {
      result.addLinebreak(getLinebreak(i));
      }
    if (isPresentLengthLine()){
      result.setLengthLine(getLengthLine().deepClone());
    } else {
      result.setLengthLineAbsent();
    }
      result.setEnclosingScope(getEnclosingScope());
    
    return result;

}

    /* generated by template core.Method*/
 public  boolean containsGuitarString (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllGuitarStrings (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyGuitarStrings ()  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<guitartab._ast.ASTGuitarString> iteratorGuitarStrings ()  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeGuitarStrings ()  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().size();

}

    /* generated by template core.Method*/
 public  guitartab._ast.ASTGuitarString[] toArrayGuitarStrings (guitartab._ast.ASTGuitarString[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayGuitarStrings ()  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<guitartab._ast.ASTGuitarString> spliteratorGuitarStrings ()  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<guitartab._ast.ASTGuitarString> streamGuitarStrings ()  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().stream();

}

    /* generated by template core.Method*/
 public  Stream<guitartab._ast.ASTGuitarString> parallelStreamGuitarStrings ()  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().parallelStream();

}

    /* generated by template core.Method*/
 public  guitartab._ast.ASTGuitarString getGuitarString (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfGuitarString (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfGuitarString (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsGuitarStrings (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeGuitarStrings ()  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<guitartab._ast.ASTGuitarString> listIteratorGuitarStrings ()  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<guitartab._ast.ASTGuitarString> listIteratorGuitarStrings (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<guitartab._ast.ASTGuitarString> subListGuitarStrings (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<guitartab._ast.ASTGuitarString> getGuitarStringList ()  {
      /* generated by template methods.Get*/

return this.guitarStrings;

}

    /* generated by template core.Method*/
 public  boolean containsLinebreak (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllLinebreaks (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyLinebreaks ()  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<String> iteratorLinebreaks ()  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeLinebreaks ()  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().size();

}

    /* generated by template core.Method*/
 public  String[] toArrayLinebreaks (String[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayLinebreaks ()  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<String> spliteratorLinebreaks ()  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<String> streamLinebreaks ()  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().stream();

}

    /* generated by template core.Method*/
 public  Stream<String> parallelStreamLinebreaks ()  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().parallelStream();

}

    /* generated by template core.Method*/
 public  String getLinebreak (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfLinebreak (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfLinebreak (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsLinebreaks (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeLinebreaks ()  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<String> listIteratorLinebreaks ()  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<String> listIteratorLinebreaks (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<String> subListLinebreaks (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<String> getLinebreakList ()  {
      /* generated by template methods.Get*/

return this.linebreaks;

}

    /* generated by template core.Method*/
 public  guitartab._ast.ASTLengthLine getLengthLine ()  {
      /* generated by template methods.opt.Get*/

if (isPresentLengthLine()) {
return this.lengthLine.get();
}
Log.error("0xA7003x933 LengthLine can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentLengthLine ()  {
      /* generated by template methods.opt.IsPresent*/

return this.lengthLine.isPresent();

}

    /* generated by template core.Method*/
 public  void clearGuitarStrings ()  {
      /* generated by template methods.MethodDelegate*/

this.getGuitarStringList().clear();

}

    /* generated by template core.Method*/
 public  boolean addGuitarString (guitartab._ast.ASTGuitarString element)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllGuitarStrings (Collection<? extends guitartab._ast.ASTGuitarString> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeGuitarString (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllGuitarStrings (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllGuitarStrings (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfGuitarString (Predicate<? super guitartab._ast.ASTGuitarString> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachGuitarStrings (Consumer<? super guitartab._ast.ASTGuitarString> action)  {
      /* generated by template methods.MethodDelegate*/

this.getGuitarStringList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addGuitarString (int index,guitartab._ast.ASTGuitarString element)  {
      /* generated by template methods.MethodDelegate*/

this.getGuitarStringList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllGuitarStrings (int index,Collection<? extends guitartab._ast.ASTGuitarString> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  guitartab._ast.ASTGuitarString removeGuitarString (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().remove(index);

}

    /* generated by template core.Method*/
 public  guitartab._ast.ASTGuitarString setGuitarString (int index,guitartab._ast.ASTGuitarString element)  {
      /* generated by template methods.MethodDelegate*/

return this.getGuitarStringList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllGuitarStrings (UnaryOperator<guitartab._ast.ASTGuitarString> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getGuitarStringList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortGuitarStrings (Comparator<? super guitartab._ast.ASTGuitarString> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getGuitarStringList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setGuitarStringList (List<guitartab._ast.ASTGuitarString> guitarStrings)  {
      /* generated by template methods.Set*/

this.guitarStrings = guitarStrings;

}

    /* generated by template core.Method*/
 public  void clearLinebreaks ()  {
      /* generated by template methods.MethodDelegate*/

this.getLinebreakList().clear();

}

    /* generated by template core.Method*/
 public  boolean addLinebreak (String element)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllLinebreaks (Collection<? extends String> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeLinebreak (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllLinebreaks (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllLinebreaks (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfLinebreak (Predicate<? super String> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachLinebreaks (Consumer<? super String> action)  {
      /* generated by template methods.MethodDelegate*/

this.getLinebreakList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addLinebreak (int index,String element)  {
      /* generated by template methods.MethodDelegate*/

this.getLinebreakList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllLinebreaks (int index,Collection<? extends String> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  String removeLinebreak (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().remove(index);

}

    /* generated by template core.Method*/
 public  String setLinebreak (int index,String element)  {
      /* generated by template methods.MethodDelegate*/

return this.getLinebreakList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllLinebreaks (UnaryOperator<String> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getLinebreakList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortLinebreaks (Comparator<? super String> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getLinebreakList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setLinebreakList (List<String> linebreaks)  {
      /* generated by template methods.Set*/

this.linebreaks = linebreaks;

}

    /* generated by template core.Method*/
 public  void setLengthLine (guitartab._ast.ASTLengthLine lengthLine)  {
      /* generated by template methods.opt.Set*/

this.lengthLine = Optional.ofNullable(lengthLine);

}

    /* generated by template core.Method*/
 public  void setLengthLineAbsent ()  {
      /* generated by template methods.opt.SetAbsent*/

this.lengthLine = Optional.empty();

}

    /* generated by template core.Method*/
 public  void accept (guitartab._visitor.GuitarTabVisitor visitor)  {
      /* generated by template _ast.ast_class.Accept*/

    // We allow a down cast here, because the subclass ASTSixStrings must exist
    // and only this subclass may exist in the AST and hence, only this class may
    // be handled by a visitor. All other cases are invalid an throw an exception!
    // This decision was made during MC Sprint Review on 16.03.2015.
    if (this instanceof ASTSixStrings) {
      visitor.handle((ASTSixStrings) this);
    } else {
      throw new UnsupportedOperationException("0xA7010x889 Only handwritten class ASTSixStrings is supported for the visitor");
    }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof guitartab._visitor.GuitarTabVisitor) {
    accept((guitartab._visitor.GuitarTabVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x346 AST node type ASTSixStrings expected a visitor of type guitartab._visitor.GuitarTabVisitor, but got de.monticore.mcbasics._visitor.MCBasicsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTSixStrings _construct ()  {
      return guitartab._ast.GuitarTabNodeFactory.createASTSixStrings();
}

    /* generated by template core.Method*/
 public  Collection<de.monticore.ast.ASTNode> get_Children ()  {
      /* generated by template _ast.ast_class.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        result.addAll(getGuitarStringList());
        if (isPresentLengthLine()) {
          result.add(getLengthLine());
        }
    return result;

}

    /* generated by template core.Method*/
 public  guitartab._symboltable.IGuitarTabScope getEnclosingScope ()  {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (guitartab._symboltable.IGuitarTabScope enclosingScope)  {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof guitartab._symboltable.IGuitarTabScope){
    this.enclosingScope = (guitartab._symboltable.IGuitarTabScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x968The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type guitartab._symboltable.IGuitarTabScope. Please call the Method setEnclosingScope with a parameter form type guitartab._symboltable.IGuitarTabScope");
  }
}

}
