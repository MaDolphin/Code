/* generated by template od.DiagramVisitor*/




package guitartab._od;

import guitartab._visitor.GuitarTabVisitor;
import guitartab._ast.ASTGuitarTabNode;
import de.monticore.prettyprint.IndentPrinter;
import de.se_rwth.commons.Names;
import de.se_rwth.commons.StringTransformations;
import de.monticore.generating.templateengine.reporting.commons.ReportingRepository;
import java.util.Iterator;

public class GuitarTab2OD implements GuitarTabVisitor {

  private GuitarTabVisitor realThis = this;

  protected IndentPrinter pp;

  protected ReportingRepository reporting;

  protected boolean printEmptyOptional = false;

  protected boolean printEmptyList = false;

  public GuitarTab2OD(IndentPrinter printer, ReportingRepository reporting) {
    this.reporting = reporting;
    this.pp = printer;
  }


      @Override
      public void handle(guitartab._ast.ASTTab node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "guitartab._ast.ASTTab");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        {
        Iterator<guitartab._ast.ASTComment> iter_comment = node.getCommentList().iterator();
        boolean isEmpty = true;
        if (iter_comment.hasNext()) {
       	  pp.print("comment");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getCommentList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("comment");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_comment.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_comment.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        {
        Iterator<guitartab._ast.ASTSixStrings> iter_sixStrings = node.getSixStringsList().iterator();
        boolean isEmpty = true;
        if (iter_sixStrings.hasNext()) {
       	  pp.print("sixStrings");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getSixStringsList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("sixStrings");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_sixStrings.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_sixStrings.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        printAttribute("linebreak", String.valueOf(node.getLinebreakList()));
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(guitartab._ast.ASTComment node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "guitartab._ast.ASTComment");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        printAttribute("name", String.valueOf(node.getNameList()));
        printAttribute("wS", String.valueOf(node.getWSList()));
        printAttribute("linebreak", "\"" + String.valueOf(node.getLinebreak()) + "\"");
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(guitartab._ast.ASTSixStrings node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "guitartab._ast.ASTSixStrings");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        {
        Iterator<guitartab._ast.ASTGuitarString> iter_guitarString = node.getGuitarStringList().iterator();
        boolean isEmpty = true;
        if (iter_guitarString.hasNext()) {
       	  pp.print("guitarString");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getGuitarStringList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("guitarString");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_guitarString.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_guitarString.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        printAttribute("linebreak", String.valueOf(node.getLinebreakList()));
        if (node.isPresentLengthLine()) {
     		  pp.print("lengthLine");
   			  pp.print(" = ");
          node.getLengthLine().accept(getRealThis());
          pp.println(";");
        } else if (printEmptyOptional) {
          pp.println("lengthLine = absent;");
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(guitartab._ast.ASTGuitarString node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "guitartab._ast.ASTGuitarString");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        printAttribute("content", String.valueOf(node.getContentList()));
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(guitartab._ast.ASTLengthLine node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "guitartab._ast.ASTLengthLine");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        printAttribute("content", String.valueOf(node.getContentList()));
        pp.unindent();
        pp.print("}");
     }


  private void printAttribute(String name, String value) {
    pp.print(name);
    pp.print(" = ");
    pp.print(value);
    pp.println(";");
  }

  private void printObject(String objName, String objType) {
    pp.print(objName);
    pp.print(":");
    pp.print(Names.getSimpleName(objType));
    pp.println(" {");
  }

  public String printObjectDiagram(String modelName, ASTGuitarTabNode node) {
    pp.clearBuffer();
    pp.setIndentLength(2);
    pp.print("objectdiagram ");
    pp.print(modelName);
    pp.println(" {");
    pp.indent();
    node.accept(getRealThis());
    pp.print(";");
    pp.unindent();
    pp.println("}");
    return pp.getContent();
  }

  @Override
  public void setRealThis(GuitarTabVisitor realThis) {
    this.realThis = realThis;
  }

  @Override
  public GuitarTabVisitor getRealThis() {
    return realThis;
  }

  /**
   * @return the printEmptyOptional
   */
  public boolean isPrintEmptyOptional() {
    return this.printEmptyOptional;
  }


  /**
   * @param printEmptyOptional the printEmptyOptional to set
   */
  public void setPrintEmptyOptional(boolean printEmptyOptional) {
    this.printEmptyOptional = printEmptyOptional;
  }


  /**
   * @return the printEmptyList
   */
  public boolean isPrintEmptyList() {
    return this.printEmptyList;
  }


  /**
   * @param printEmptyList the printEmptyList to set
   */
  public void setPrintEmptyList(boolean printEmptyList) {
    this.printEmptyList = printEmptyList;
  }

}

