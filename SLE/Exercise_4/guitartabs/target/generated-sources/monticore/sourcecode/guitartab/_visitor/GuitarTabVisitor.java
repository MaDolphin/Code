/* generated from model GuitarTab */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package guitartab._visitor;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;

/* generated by template core.Annotations*/
// empty template

 public  interface GuitarTabVisitor extends de.monticore.mcbasics._visitor.MCBasicsVisitor {



  default /* generated by template core.Method*/
 public  guitartab._visitor.GuitarTabVisitor getRealThis ()  {
      return this;
}

  default /* generated by template core.Method*/
 public  void setRealThis (guitartab._visitor.GuitarTabVisitor realThis)  {
          throw new UnsupportedOperationException("0xA7011x709 The setter for realThis is not implemented. You might want to implement a wrapper class to allow setting/getting realThis.");

}

  default /* generated by template core.Method*/
 public  void endVisit (de.monticore.ast.ASTNode node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void visit (de.monticore.ast.ASTNode node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTTab node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (guitartab._ast.ASTTab node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (guitartab._ast.ASTTab node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (guitartab._ast.ASTTab node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<guitartab._ast.ASTComment> iter_comments = node.getCommentList().iterator();
      while (iter_comments.hasNext()) {
        iter_comments.next().accept(getRealThis());
      }
    }
    {
      Iterator<guitartab._ast.ASTSixStrings> iter_sixStringss = node.getSixStringsList().iterator();
      while (iter_sixStringss.hasNext()) {
        iter_sixStringss.next().accept(getRealThis());
      }
    }

}

  default /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTComment node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (guitartab._ast.ASTComment node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (guitartab._ast.ASTComment node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (guitartab._ast.ASTComment node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.



}

  default /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTSixStrings node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (guitartab._ast.ASTSixStrings node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (guitartab._ast.ASTSixStrings node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (guitartab._ast.ASTSixStrings node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<guitartab._ast.ASTGuitarString> iter_guitarStrings = node.getGuitarStringList().iterator();
      while (iter_guitarStrings.hasNext()) {
        iter_guitarStrings.next().accept(getRealThis());
      }
    }
      if (node.isPresentLengthLine()) {
        node.getLengthLine().accept(getRealThis());
      }

}

  default /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTGuitarString node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (guitartab._ast.ASTGuitarString node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (guitartab._ast.ASTGuitarString node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (guitartab._ast.ASTGuitarString node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.



}

  default /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTLengthLine node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (guitartab._ast.ASTLengthLine node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (guitartab._ast.ASTLengthLine node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  getRealThis().traverse(node);
  getRealThis().endVisit(node);

}

  default /* generated by template core.Method*/
 public  void traverse (guitartab._ast.ASTLengthLine node)  {
      /* generated by template _visitor.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.



}

  default /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTGuitarTabNode node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void endVisit (guitartab._ast.ASTGuitarTabNode node)  {
      /* generated by template core.EmptyBody*/
// empty body

}

  default /* generated by template core.Method*/
 public  void handle (guitartab._ast.ASTGuitarTabNode node)  {
      /* generated by template _visitor.Handle*/

  getRealThis().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getRealThis().endVisit(node);

}

}
