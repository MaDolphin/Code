/* generated by template parser.MCParser*/



package guitartab._parser;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;

import java.util.Optional;
import de.monticore.antlr4.MCConcreteParser;
import de.monticore.antlr4.MCErrorListener;

import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;

public class GuitarTabParser extends MCConcreteParser {

  protected GuitarTabAntlrParser create(String filename) throws IOException {
    GuitarTabAntlrLexer lexer = new GuitarTabAntlrLexer(new  ANTLRFileStream(filename, StandardCharsets.UTF_8.name()));
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    GuitarTabAntlrParser parser = new GuitarTabAntlrParser(tokens);
    lexer.setMCParser(parser);  
    lexer.removeErrorListeners();
    lexer.addErrorListener(new MCErrorListener(parser));
    parser.setFilename(filename);
    setError(false);
    return parser;
  }
  
  protected GuitarTabAntlrParser create(Reader reader) throws IOException {
    GuitarTabAntlrLexer lexer = new GuitarTabAntlrLexer(new ANTLRInputStream(reader));
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    GuitarTabAntlrParser parser = new GuitarTabAntlrParser(tokens);
    lexer.setMCParser(parser);  
    lexer.removeErrorListeners();
    lexer.addErrorListener(new MCErrorListener(parser));
    parser.setFilename("StringReader");
    setError(false);
    return parser;
  }
  
  /**
   * @see de.monticore.antlr4.MCConcreteParser#parse(java.lang.String)
   */
  @Override
  public Optional<guitartab._ast.ASTTab> parse(String fileName) throws IOException {
    return parseTab(fileName);
  }
  
  /**
   * @see de.monticore.antlr4.MCConcreteParser#parse(java.io.Reader)
   */
  @Override
  public Optional<guitartab._ast.ASTTab> parse(Reader reader) throws IOException {
    return parseTab(reader);
  }
  
  public Optional<guitartab._ast.ASTTab> parse_String(String str) throws IOException {
    return parse_StringTab(str);
  }
 
    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<guitartab._ast.ASTTab> parseTab(String filename) throws IOException {   
    GuitarTabAntlrParser parser = create(filename);    
	guitartab._ast.ASTTab ast;
    ast = parser.tab_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<guitartab._ast.ASTTab> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<guitartab._ast.ASTTab> parseTab(Reader reader) throws IOException {
 	GuitarTabAntlrParser parser = create(reader);
	guitartab._ast.ASTTab ast;
    ast = parser.tab_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<guitartab._ast.ASTTab> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<guitartab._ast.ASTTab> parse_StringTab(String str) throws IOException {
    return parseTab(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<guitartab._ast.ASTComment> parseComment(String filename) throws IOException {   
    GuitarTabAntlrParser parser = create(filename);    
	guitartab._ast.ASTComment ast;
    ast = parser.comment_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<guitartab._ast.ASTComment> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<guitartab._ast.ASTComment> parseComment(Reader reader) throws IOException {
 	GuitarTabAntlrParser parser = create(reader);
	guitartab._ast.ASTComment ast;
    ast = parser.comment_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<guitartab._ast.ASTComment> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<guitartab._ast.ASTComment> parse_StringComment(String str) throws IOException {
    return parseComment(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<guitartab._ast.ASTSixStrings> parseSixStrings(String filename) throws IOException {   
    GuitarTabAntlrParser parser = create(filename);    
	guitartab._ast.ASTSixStrings ast;
    ast = parser.sixStrings_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<guitartab._ast.ASTSixStrings> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<guitartab._ast.ASTSixStrings> parseSixStrings(Reader reader) throws IOException {
 	GuitarTabAntlrParser parser = create(reader);
	guitartab._ast.ASTSixStrings ast;
    ast = parser.sixStrings_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<guitartab._ast.ASTSixStrings> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<guitartab._ast.ASTSixStrings> parse_StringSixStrings(String str) throws IOException {
    return parseSixStrings(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<guitartab._ast.ASTGuitarString> parseGuitarString(String filename) throws IOException {   
    GuitarTabAntlrParser parser = create(filename);    
	guitartab._ast.ASTGuitarString ast;
    ast = parser.guitarString_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<guitartab._ast.ASTGuitarString> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<guitartab._ast.ASTGuitarString> parseGuitarString(Reader reader) throws IOException {
 	GuitarTabAntlrParser parser = create(reader);
	guitartab._ast.ASTGuitarString ast;
    ast = parser.guitarString_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<guitartab._ast.ASTGuitarString> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<guitartab._ast.ASTGuitarString> parse_StringGuitarString(String str) throws IOException {
    return parseGuitarString(new StringReader(str));
  }
  

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the file
   */
  public Optional<guitartab._ast.ASTLengthLine> parseLengthLine(String filename) throws IOException {   
    GuitarTabAntlrParser parser = create(filename);    
	guitartab._ast.ASTLengthLine ast;
    ast = parser.lengthLine_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<guitartab._ast.ASTLengthLine> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the content of the reader
   * */
  public  Optional<guitartab._ast.ASTLengthLine> parseLengthLine(Reader reader) throws IOException {
 	GuitarTabAntlrParser parser = create(reader);
	guitartab._ast.ASTLengthLine ast;
    ast = parser.lengthLine_eof().ret;
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<guitartab._ast.ASTLengthLine> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException if something went wrong parsing the string
   * */
  public  Optional<guitartab._ast.ASTLengthLine> parse_StringLengthLine(String str) throws IOException {
    return parseLengthLine(new StringReader(str));
  }
  


}
