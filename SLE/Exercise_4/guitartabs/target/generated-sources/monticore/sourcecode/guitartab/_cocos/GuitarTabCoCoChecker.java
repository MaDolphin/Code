/* generated from model GuitarTab */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package guitartab._cocos;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;

/* generated by template core.Annotations*/
// empty template

 public  class GuitarTabCoCoChecker  implements guitartab._visitor.GuitarTabInheritanceVisitor {

    /* generated by template core.Attribute*/
 private  guitartab._visitor.GuitarTabVisitor realThis = this;

    /* generated by template core.Attribute*/
 private  List<guitartab._cocos.GuitarTabCoCoChecker> guitartab__cocos_GuitarTabCoCoChecker = new ArrayList<>();

    /* generated by template core.Attribute*/
 private  Collection<guitartab._cocos.GuitarTabASTTabCoCo> guitartab__ast_ASTTabCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<guitartab._cocos.GuitarTabASTCommentCoCo> guitartab__ast_ASTCommentCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<guitartab._cocos.GuitarTabASTSixStringsCoCo> guitartab__ast_ASTSixStringsCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<guitartab._cocos.GuitarTabASTGuitarStringCoCo> guitartab__ast_ASTGuitarStringCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<guitartab._cocos.GuitarTabASTLengthLineCoCo> guitartab__ast_ASTLengthLineCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<guitartab._cocos.GuitarTabASTGuitarTabNodeCoCo> guitartab__ast_ASTGuitarTabNodeCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  List<de.monticore.mcbasics._cocos.MCBasicsCoCoChecker> de_monticore_mcbasics__cocos_MCBasicsCoCoChecker = new ArrayList<>(Arrays.asList(new de.monticore.mcbasics._cocos.MCBasicsCoCoChecker()));


    /* generated by template core.Constructor*/
 public  GuitarTabCoCoChecker()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  guitartab._visitor.GuitarTabVisitor getRealThis ()  {
      /* generated by template methods.Get*/

return this.realThis;

}

    /* generated by template core.Method*/
 public  void setRealThis (guitartab._visitor.GuitarTabVisitor realThis)  {
      /* generated by template methods.Set*/

this.realThis = realThis;

}

    /* generated by template core.Method*/
 public  void addChecker (guitartab._cocos.GuitarTabCoCoChecker checker)  {
      this.guitartab__cocos_GuitarTabCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (guitartab._ast.ASTGuitarTabNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  guitartab._cocos.GuitarTabCoCoChecker addCoCo (guitartab._cocos.GuitarTabASTTabCoCo coco)  {
      guitartab__ast_ASTTabCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTTab node)  {
      for (guitartab._cocos.GuitarTabASTTabCoCo coco : guitartab__ast_ASTTabCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
guitartab__cocos_GuitarTabCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  guitartab._cocos.GuitarTabCoCoChecker addCoCo (guitartab._cocos.GuitarTabASTCommentCoCo coco)  {
      guitartab__ast_ASTCommentCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTComment node)  {
      for (guitartab._cocos.GuitarTabASTCommentCoCo coco : guitartab__ast_ASTCommentCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
guitartab__cocos_GuitarTabCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  guitartab._cocos.GuitarTabCoCoChecker addCoCo (guitartab._cocos.GuitarTabASTSixStringsCoCo coco)  {
      guitartab__ast_ASTSixStringsCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTSixStrings node)  {
      for (guitartab._cocos.GuitarTabASTSixStringsCoCo coco : guitartab__ast_ASTSixStringsCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
guitartab__cocos_GuitarTabCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  guitartab._cocos.GuitarTabCoCoChecker addCoCo (guitartab._cocos.GuitarTabASTGuitarStringCoCo coco)  {
      guitartab__ast_ASTGuitarStringCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTGuitarString node)  {
      for (guitartab._cocos.GuitarTabASTGuitarStringCoCo coco : guitartab__ast_ASTGuitarStringCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
guitartab__cocos_GuitarTabCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  guitartab._cocos.GuitarTabCoCoChecker addCoCo (guitartab._cocos.GuitarTabASTLengthLineCoCo coco)  {
      guitartab__ast_ASTLengthLineCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTLengthLine node)  {
      for (guitartab._cocos.GuitarTabASTLengthLineCoCo coco : guitartab__ast_ASTLengthLineCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
guitartab__cocos_GuitarTabCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  guitartab._cocos.GuitarTabCoCoChecker addCoCo (guitartab._cocos.GuitarTabASTGuitarTabNodeCoCo coco)  {
      guitartab__ast_ASTGuitarTabNodeCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (guitartab._ast.ASTGuitarTabNode node)  {
      for (guitartab._cocos.GuitarTabASTGuitarTabNodeCoCo coco : guitartab__ast_ASTGuitarTabNodeCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
guitartab__cocos_GuitarTabCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  void addChecker (de.monticore.mcbasics._cocos.MCBasicsCoCoChecker checker)  {
      this.de_monticore_mcbasics__cocos_MCBasicsCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (de.monticore.mcbasics._ast.ASTMCBasicsNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  guitartab._cocos.GuitarTabCoCoChecker addCoCo (de.monticore.mcbasics._cocos.MCBasicsASTMCBasicsNodeCoCo coco)  {
      de_monticore_mcbasics__cocos_MCBasicsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.mcbasics._ast.ASTMCBasicsNode node)  {
      de_monticore_mcbasics__cocos_MCBasicsCoCoChecker.stream().forEach(c -> c.visit(node));
}

}
