/* (c) https://github.com/MontiCore/monticore */


grammar Automata extends de.monticore.MCBasics {

/** A ASTAutomaton represents a finite automata
    @attribute name Name of the automata
    @attribute states List of states
    @attribute transitions List of transitions
*/
symbol scope Automaton =
  // Exercise 0.2a
  "aut" Name "{" (State | Transition )* "}" ;

/** A ASTState represents a state of a finite automata
    @attribute name Name of state
    @attribute initial True if state is initial state
    @attribute final True if state is a final state
    @attribute states List of sub states
    @attribute transitions List of transitions
*/
symbol scope State =
  "state" Name
  
  (("<<" ["initial"] ">>" ) | ("<<" ["final"] ">>" ))*

  // Exercise 0.2b
  ( ("{" State* "}") | ";") ;


/** A ASTTransition represents a transition
    @attribute from Name of the state from which the transitions starts
    @attribute input Activation signal for this transition
    @attribute to Name of the state to which the transitions goes
*/ 
Transition =
  from:Name "-" input:Name ">" to:Name ";" ;
  
}
