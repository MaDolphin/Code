/* generated from model Automata */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package automata._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class AutomataGlobalScope extends automata._symboltable.AutomataScope  implements automata._symboltable.IAutomataGlobalScope {

    /* generated by template core.Attribute*/
 protected  de.monticore.io.paths.ModelPath modelPath ;

    /* generated by template core.Attribute*/
 protected  AutomataLanguage automataLanguage ;

    /* generated by template core.Attribute*/
 protected  final  Map<String,Set<AutomataModelLoader>> modelName2ModelLoaderCache  = new HashMap<>();

    /* generated by template core.Attribute*/
 protected  List<automata._symboltable.IStateSymbolResolvingDelegate> adaptedStateSymbolResolvingDelegate  = new ArrayList<automata._symboltable.IStateSymbolResolvingDelegate>();

    /* generated by template core.Attribute*/
 protected  List<automata._symboltable.IAutomatonSymbolResolvingDelegate> adaptedAutomatonSymbolResolvingDelegate  = new ArrayList<automata._symboltable.IAutomatonSymbolResolvingDelegate>();


    /* generated by template core.Constructor*/
 public  AutomataGlobalScope(de.monticore.io.paths.ModelPath modelPath,AutomataLanguage language)  {
    this.modelPath = Log.errorIfNull(modelPath);
    this.automataLanguage = Log.errorIfNull(language);
}


    /* generated by template core.Method*/
 public  de.monticore.io.paths.ModelPath getModelPath ()  {
      /* generated by template methods.Get*/

return this.modelPath;

}

    /* generated by template core.Method*/
 public  AutomataLanguage getAutomataLanguage ()  {
      /* generated by template methods.Get*/

return this.automataLanguage;

}

    /* generated by template core.Method*/
 public  String getName ()  {
      Log.error("0xA6101x284 Global scopes do not have names.");
    return null;
}

    /* generated by template core.Method*/
 public  boolean isPresentName ()  {
      return false;
}

    /* generated by template core.Method*/
 public  void cache (String calculatedModelName)  {
      /* generated by template _symboltable.globalscope.CacheMethod*/

  AutomataModelLoader modelLoader = this.getAutomataLanguage().getModelLoader() ;
  if (modelName2ModelLoaderCache.containsKey(calculatedModelName)) {
    modelName2ModelLoaderCache.get(calculatedModelName).add(modelLoader);
  } else {
    final Set<AutomataModelLoader> ml = new LinkedHashSet<>();
    ml.add(modelLoader);
    modelName2ModelLoaderCache.put(calculatedModelName, ml);
  }
}

    /* generated by template core.Method*/
 public  boolean continueWithModelLoader (String calculatedModelName,AutomataModelLoader modelLoader)  {
          return !modelName2ModelLoaderCache.containsKey(calculatedModelName)
      || !modelName2ModelLoaderCache.get(calculatedModelName).contains(modelLoader);
}

    /* generated by template core.Method*/
 public  boolean containsAdaptedStateSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllAdaptedStateSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyAdaptedStateSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<automata._symboltable.IStateSymbolResolvingDelegate> iteratorAdaptedStateSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeAdaptedStateSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().size();

}

    /* generated by template core.Method*/
 public  automata._symboltable.IStateSymbolResolvingDelegate[] toArrayAdaptedStateSymbolResolvingDelegate (automata._symboltable.IStateSymbolResolvingDelegate[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayAdaptedStateSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<automata._symboltable.IStateSymbolResolvingDelegate> spliteratorAdaptedStateSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<automata._symboltable.IStateSymbolResolvingDelegate> streamAdaptedStateSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().stream();

}

    /* generated by template core.Method*/
 public  Stream<automata._symboltable.IStateSymbolResolvingDelegate> parallelStreamAdaptedStateSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().parallelStream();

}

    /* generated by template core.Method*/
 public  automata._symboltable.IStateSymbolResolvingDelegate getAdaptedStateSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfAdaptedStateSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfAdaptedStateSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsAdaptedStateSymbolResolvingDelegate (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeAdaptedStateSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<automata._symboltable.IStateSymbolResolvingDelegate> listIteratorAdaptedStateSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<automata._symboltable.IStateSymbolResolvingDelegate> listIteratorAdaptedStateSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<automata._symboltable.IStateSymbolResolvingDelegate> subListAdaptedStateSymbolResolvingDelegate (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<automata._symboltable.IStateSymbolResolvingDelegate> getAdaptedStateSymbolResolvingDelegateList ()  {
      /* generated by template methods.Get*/

return this.adaptedStateSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  void clearAdaptedStateSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedStateSymbolResolvingDelegateList().clear();

}

    /* generated by template core.Method*/
 public  boolean addAdaptedStateSymbolResolvingDelegate (automata._symboltable.IStateSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedStateSymbolResolvingDelegate (Collection<? extends automata._symboltable.IStateSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeAdaptedStateSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllAdaptedStateSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllAdaptedStateSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfAdaptedStateSymbolResolvingDelegate (Predicate<? super automata._symboltable.IStateSymbolResolvingDelegate> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachAdaptedStateSymbolResolvingDelegate (Consumer<? super automata._symboltable.IStateSymbolResolvingDelegate> action)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedStateSymbolResolvingDelegateList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addAdaptedStateSymbolResolvingDelegate (int index,automata._symboltable.IStateSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedStateSymbolResolvingDelegateList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedStateSymbolResolvingDelegate (int index,Collection<? extends automata._symboltable.IStateSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  automata._symboltable.IStateSymbolResolvingDelegate removeAdaptedStateSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().remove(index);

}

    /* generated by template core.Method*/
 public  automata._symboltable.IStateSymbolResolvingDelegate setAdaptedStateSymbolResolvingDelegate (int index,automata._symboltable.IStateSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedStateSymbolResolvingDelegateList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllAdaptedStateSymbolResolvingDelegate (UnaryOperator<automata._symboltable.IStateSymbolResolvingDelegate> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedStateSymbolResolvingDelegateList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortAdaptedStateSymbolResolvingDelegate (Comparator<? super automata._symboltable.IStateSymbolResolvingDelegate> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedStateSymbolResolvingDelegateList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setAdaptedStateSymbolResolvingDelegateList (List<automata._symboltable.IStateSymbolResolvingDelegate> adaptedStateSymbolResolvingDelegate)  {
      /* generated by template methods.Set*/

this.adaptedStateSymbolResolvingDelegate = adaptedStateSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  boolean containsAdaptedAutomatonSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllAdaptedAutomatonSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<automata._symboltable.IAutomatonSymbolResolvingDelegate> iteratorAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().size();

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomatonSymbolResolvingDelegate[] toArrayAdaptedAutomatonSymbolResolvingDelegate (automata._symboltable.IAutomatonSymbolResolvingDelegate[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<automata._symboltable.IAutomatonSymbolResolvingDelegate> spliteratorAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<automata._symboltable.IAutomatonSymbolResolvingDelegate> streamAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().stream();

}

    /* generated by template core.Method*/
 public  Stream<automata._symboltable.IAutomatonSymbolResolvingDelegate> parallelStreamAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().parallelStream();

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomatonSymbolResolvingDelegate getAdaptedAutomatonSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfAdaptedAutomatonSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfAdaptedAutomatonSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsAdaptedAutomatonSymbolResolvingDelegate (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<automata._symboltable.IAutomatonSymbolResolvingDelegate> listIteratorAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<automata._symboltable.IAutomatonSymbolResolvingDelegate> listIteratorAdaptedAutomatonSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<automata._symboltable.IAutomatonSymbolResolvingDelegate> subListAdaptedAutomatonSymbolResolvingDelegate (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<automata._symboltable.IAutomatonSymbolResolvingDelegate> getAdaptedAutomatonSymbolResolvingDelegateList ()  {
      /* generated by template methods.Get*/

return this.adaptedAutomatonSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  void clearAdaptedAutomatonSymbolResolvingDelegate ()  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedAutomatonSymbolResolvingDelegateList().clear();

}

    /* generated by template core.Method*/
 public  boolean addAdaptedAutomatonSymbolResolvingDelegate (automata._symboltable.IAutomatonSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedAutomatonSymbolResolvingDelegate (Collection<? extends automata._symboltable.IAutomatonSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeAdaptedAutomatonSymbolResolvingDelegate (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllAdaptedAutomatonSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllAdaptedAutomatonSymbolResolvingDelegate (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfAdaptedAutomatonSymbolResolvingDelegate (Predicate<? super automata._symboltable.IAutomatonSymbolResolvingDelegate> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachAdaptedAutomatonSymbolResolvingDelegate (Consumer<? super automata._symboltable.IAutomatonSymbolResolvingDelegate> action)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedAutomatonSymbolResolvingDelegateList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addAdaptedAutomatonSymbolResolvingDelegate (int index,automata._symboltable.IAutomatonSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedAutomatonSymbolResolvingDelegateList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllAdaptedAutomatonSymbolResolvingDelegate (int index,Collection<? extends automata._symboltable.IAutomatonSymbolResolvingDelegate> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomatonSymbolResolvingDelegate removeAdaptedAutomatonSymbolResolvingDelegate (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().remove(index);

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomatonSymbolResolvingDelegate setAdaptedAutomatonSymbolResolvingDelegate (int index,automata._symboltable.IAutomatonSymbolResolvingDelegate element)  {
      /* generated by template methods.MethodDelegate*/

return this.getAdaptedAutomatonSymbolResolvingDelegateList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllAdaptedAutomatonSymbolResolvingDelegate (UnaryOperator<automata._symboltable.IAutomatonSymbolResolvingDelegate> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedAutomatonSymbolResolvingDelegateList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortAdaptedAutomatonSymbolResolvingDelegate (Comparator<? super automata._symboltable.IAutomatonSymbolResolvingDelegate> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getAdaptedAutomatonSymbolResolvingDelegateList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setAdaptedAutomatonSymbolResolvingDelegateList (List<automata._symboltable.IAutomatonSymbolResolvingDelegate> adaptedAutomatonSymbolResolvingDelegate)  {
      /* generated by template methods.Set*/

this.adaptedAutomatonSymbolResolvingDelegate = adaptedAutomatonSymbolResolvingDelegate;

}

    /* generated by template core.Method*/
 public  boolean isAutomatonSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.automatonSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setAutomatonSymbolsAlreadyResolved (boolean automatonSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.automatonSymbolsAlreadyResolved = automatonSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  boolean isStateSymbolsAlreadyResolved ()  {
      /* generated by template methods.Get*/

return this.stateSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  void setStateSymbolsAlreadyResolved (boolean stateSymbolsAlreadyResolved)  {
      /* generated by template methods.Set*/

this.stateSymbolsAlreadyResolved = stateSymbolsAlreadyResolved;

}

    /* generated by template core.Method*/
 public  automata._symboltable.IAutomataScope getEnclosingScope ()  {
      Log.error("0xA6100x189 GlobalScope AutomataGlobalScope has no EnclosingScope, so you cannot call methodgetEnclosingScope.");
    return null;
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (automata._symboltable.IAutomataScope enclosingScope)  {
      Log.error("0xA6100x752 GlobalScope AutomataGlobalScope has no EnclosingScope, so you cannot call methodsetEnclosingScope.");
}

    /* generated by template core.Method*/
 public  List<automata._symboltable.AutomatonSymbol> resolveAdaptedAutomaton (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<automata._symboltable.AutomatonSymbol> predicate)  {
      /* generated by template _symboltable.globalscope.ResolveAdapted*/

List<automata._symboltable.AutomatonSymbol> adaptedSymbols = new ArrayList<automata._symboltable.AutomatonSymbol>();
for (automata._symboltable.IAutomatonSymbolResolvingDelegate symDel : adaptedAutomatonSymbolResolvingDelegate) {
adaptedSymbols.addAll(symDel.resolveAdaptedAutomatonSymbol(foundSymbols, name, modifier, predicate));
}
return adaptedSymbols;
}

    /* generated by template core.Method*/
 public  List<automata._symboltable.StateSymbol> resolveAdaptedState (boolean foundSymbols,String name,de.monticore.symboltable.modifiers.AccessModifier modifier,java.util.function.Predicate<automata._symboltable.StateSymbol> predicate)  {
      /* generated by template _symboltable.globalscope.ResolveAdapted*/

List<automata._symboltable.StateSymbol> adaptedSymbols = new ArrayList<automata._symboltable.StateSymbol>();
for (automata._symboltable.IStateSymbolResolvingDelegate symDel : adaptedStateSymbolResolvingDelegate) {
adaptedSymbols.addAll(symDel.resolveAdaptedStateSymbol(foundSymbols, name, modifier, predicate));
}
return adaptedSymbols;
}

}
