/* generated from model CalendarsWithAppointments */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package calendarswithappointments._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTCalendarsWithAppointmentsBuilder extends de.monticore.ast.ASTNodeBuilder<ASTCalendarsWithAppointmentsBuilder>  {

    /* generated by template core.Attribute*/
 protected  ASTCalendarsWithAppointmentsBuilder realBuilder ;

    /* generated by template core.Attribute*/
 protected  String name ;

    /* generated by template core.Attribute*/
 protected  java.util.List<calendarswithappointments._ast.ASTI> is = new java.util.ArrayList<>();


    /* generated by template core.Constructor*/
 protected  ASTCalendarsWithAppointmentsBuilder()  {
    this.realBuilder = (ASTCalendarsWithAppointmentsBuilder) this;
}


    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointments build ()  {
      /* generated by template _ast.builder.BuildMethod*/

        if (!isValid()) {
            if (name == null) {
                Log.error("0xA7222 name of type String must not be null");
            }
          throw new IllegalStateException();
        }
        ASTCalendarsWithAppointments value;
        /* generated by template _ast.ast_class.builder.ASTCNodeInit*/

    value = new ASTCalendarsWithAppointments();
    value.setName(this.name);
    value.setIList(this.is);
    if (this.sourcePositionEnd.isPresent()) {
      value.set_SourcePositionEnd(this.sourcePositionEnd.get());
    } else {
      value.set_SourcePositionEndAbsent();
    }
    if (this.sourcePositionStart.isPresent()) {
      value.set_SourcePositionStart(this.sourcePositionStart.get());
    } else {
      value.set_SourcePositionStartAbsent();
    }
    value.set_PreCommentList(this.precomments);
    value.set_PostCommentList(this.postcomments);

        return value;
}

    /* generated by template core.Method*/
 public  boolean isValid ()  {
      /* generated by template _ast.builder.IsValidMethod*/

        if (name == null) {
            return false;
        }
        return true;

}

    /* generated by template core.Method*/
 public  String getName ()  {
      /* generated by template methods.Get*/

return this.name;

}

    /* generated by template core.Method*/
 public  boolean containsI (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllIs (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<calendarswithappointments._ast.ASTI> iteratorIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().size();

}

    /* generated by template core.Method*/
 public  calendarswithappointments._ast.ASTI[] toArrayIs (calendarswithappointments._ast.ASTI[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<calendarswithappointments._ast.ASTI> spliteratorIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<calendarswithappointments._ast.ASTI> streamIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().stream();

}

    /* generated by template core.Method*/
 public  Stream<calendarswithappointments._ast.ASTI> parallelStreamIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().parallelStream();

}

    /* generated by template core.Method*/
 public  calendarswithappointments._ast.ASTI getI (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfI (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfI (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsIs (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<calendarswithappointments._ast.ASTI> listIteratorIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<calendarswithappointments._ast.ASTI> listIteratorIs (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<calendarswithappointments._ast.ASTI> subListIs (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<calendarswithappointments._ast.ASTI> getIList ()  {
      /* generated by template methods.Get*/

return this.is;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder setName (String name)  {
      /* generated by template _ast.builder.Set*/

    this.name = name;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder clearIs ()  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().clear();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder addI (calendarswithappointments._ast.ASTI element)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().add(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder addAllIs (Collection<? extends calendarswithappointments._ast.ASTI> collection)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().addAll(collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder removeI (Object element)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().remove(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder removeAllIs (Collection<?> collection)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().removeAll(collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder retainAllIs (Collection<?> collection)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().retainAll(collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder removeIfI (Predicate<? super calendarswithappointments._ast.ASTI> filter)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().removeIf(filter);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder forEachIs (Consumer<? super calendarswithappointments._ast.ASTI> action)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().forEach(action);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder addI (int index,calendarswithappointments._ast.ASTI element)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().add(index, element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder addAllIs (int index,Collection<? extends calendarswithappointments._ast.ASTI> collection)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().addAll(index, collection);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder removeI (int index)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().remove(index);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder setI (int index,calendarswithappointments._ast.ASTI element)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().set(index, element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder replaceAllIs (UnaryOperator<calendarswithappointments._ast.ASTI> operator)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().replaceAll(operator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder sortIs (Comparator<? super calendarswithappointments._ast.ASTI> comparator)  {
      /* generated by template _ast.builder.MethodDelegate*/

    this.getIList().sort(comparator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder setIList (List<calendarswithappointments._ast.ASTI> is)  {
      /* generated by template _ast.builder.Set*/

    this.is = is;
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder set_SourcePositionEnd (SourcePosition end)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_SourcePositionEnd(end);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder set_SourcePositionEndAbsent ()  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_SourcePositionEndAbsent();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder set_SourcePositionStart (SourcePosition start)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_SourcePositionStart(start);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder set_SourcePositionStartAbsent ()  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_SourcePositionStartAbsent();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder clear_PreComments ()  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.clear_PreComments();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder add_PreComment (Comment precomment)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.add_PreComment(precomment);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder add_PreComment (int index,Comment precomment)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.add_PreComment(index, precomment);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder addAll_PreComments (Collection<Comment> precomments)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.addAll_PreComments(precomments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder addAll_PreComments (int index,Collection<Comment> precomments)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.addAll_PreComments(index, precomments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder remove_PreComment (Object element)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.remove_PreComment(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder remove_PreComment (int index)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.remove_PreComment(index);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder removeAll_PreComments (Collection<?> element)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.removeAll_PreComments(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder retainAll_PreComments (Collection<?> element)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.retainAll_PreComments(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder removeIf_PreComment (Predicate<? super Comment> filter)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.removeIf_PreComment(filter);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder forEach_PreComments (Consumer<? super Comment> action)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.forEach_PreComments(action);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder replaceAll_PreComments (UnaryOperator<Comment> operator)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.replaceAll_PreComments(operator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder sort_PreComments (Comparator<? super Comment> comparator)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.sort_PreComments(comparator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder set_PreCommentList (List<Comment> preComments)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_PreCommentList(preComments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder set_PreComment (int index,Comment precomment)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_PreComment(index, precomment);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder clear_PostComments ()  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.clear_PostComments();
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder add_PostComment (Comment postcomment)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.add_PostComment(postcomment);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder add_PostComment (int index,Comment postcomment)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.add_PostComment(index, postcomment);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder addAll_PostComments (Collection<Comment> postcomments)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.addAll_PostComments(postcomments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder addAll_PostComments (int index,Collection<Comment> postcomments)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.addAll_PostComments(index, postcomments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder remove_PostComment (Object element)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.remove_PostComment(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder remove_PostComment (int index)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.remove_PostComment(index);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder removeAll_PostComments (Collection<?> element)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.removeAll_PostComments(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder retainAll_PostComments (Collection<?> element)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.retainAll_PostComments(element);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder removeIf_PostComment (Predicate<? super Comment> filter)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.removeIf_PostComment(filter);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder forEach_PostComments (Consumer<? super Comment> action)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.forEach_PostComments(action);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder replaceAll_PostComments (UnaryOperator<Comment> operator)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.replaceAll_PostComments(operator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder sort_PostComments (Comparator<? super Comment> comparator)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.sort_PostComments(comparator);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder set_PostCommentList (List<Comment> postComments)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_PostCommentList(postComments);
    return this.realBuilder;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointmentsBuilder set_PostComment (int index,Comment postcomment)  {
      /* generated by template _ast.ast_class.builder.ASTCNodeMethodDelegate*/

    super.set_PostComment(index, postcomment);
    return this.realBuilder;

}

}
