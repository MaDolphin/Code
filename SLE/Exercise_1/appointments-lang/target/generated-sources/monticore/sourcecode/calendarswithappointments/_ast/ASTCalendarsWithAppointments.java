/* generated from model CalendarsWithAppointments */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package calendarswithappointments._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTCalendarsWithAppointments extends ASTCNode  implements calendarswithappointments._ast.ASTCalendarsWithAppointmentsNode {

    /* generated by template core.Attribute*/
 protected  String name ;

    /* generated by template core.Attribute*/
 protected  java.util.List<calendarswithappointments._ast.ASTI> is = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope enclosingScope ;


    /* generated by template core.Constructor*/
 protected  ASTCalendarsWithAppointments()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)  {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTCalendarsWithAppointments comp;
    if ((o instanceof ASTCalendarsWithAppointments)) {
      comp = (ASTCalendarsWithAppointments) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing is
    if (this.is.size() != comp.is.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<calendarswithappointments._ast.ASTI> it1 = this.is.iterator();
        Iterator<calendarswithappointments._ast.ASTI> it2 = comp.is.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<calendarswithappointments._ast.ASTI> it1 = this.is.iterator();
        while (it1.hasNext()) {
          calendarswithappointments._ast.ASTI oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<calendarswithappointments._ast.ASTI> it2 = comp.is.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)  {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithComments*/

      ASTCalendarsWithAppointments comp;
    if ((o instanceof ASTCalendarsWithAppointments)) {
      comp = (ASTCalendarsWithAppointments) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing is
    if (this.is.size() != comp.is.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<calendarswithappointments._ast.ASTI> it1 = this.is.iterator();
        Iterator<calendarswithappointments._ast.ASTI> it2 = comp.is.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<calendarswithappointments._ast.ASTI> it1 = this.is.iterator();
        while (it1.hasNext()) {
          calendarswithappointments._ast.ASTI oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<calendarswithappointments._ast.ASTI> it2 = comp.is.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)  {
      /* generated by template data.EqualAttributes*/

      ASTCalendarsWithAppointments comp;
    if ((o instanceof ASTCalendarsWithAppointments)) {
      comp = (ASTCalendarsWithAppointments) o;
    } else {
      return false;
    }
	// comparing name 
    if ( (this.name == null && comp.name != null) 
      || (this.name != null && !this.name.equals(comp.name)) ) {
      return false;
    }
    return true;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)  {
      /* generated by template data.EqualsWithComments*/

      ASTCalendarsWithAppointments comp;
    if ((o instanceof ASTCalendarsWithAppointments)) {
      comp = (ASTCalendarsWithAppointments) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointments deepClone ()  {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTCalendarsWithAppointments deepClone (ASTCalendarsWithAppointments result)  {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

      result.setName(getName());
      getIList().forEach(s -> result.is.add(s.deepClone()));
      result.setEnclosingScope(getEnclosingScope());
    
    return result;

}

    /* generated by template core.Method*/
 public  String getName ()  {
      /* generated by template methods.Get*/

return this.name;

}

    /* generated by template core.Method*/
 public  boolean containsI (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllIs (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<calendarswithappointments._ast.ASTI> iteratorIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().size();

}

    /* generated by template core.Method*/
 public  calendarswithappointments._ast.ASTI[] toArrayIs (calendarswithappointments._ast.ASTI[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<calendarswithappointments._ast.ASTI> spliteratorIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<calendarswithappointments._ast.ASTI> streamIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().stream();

}

    /* generated by template core.Method*/
 public  Stream<calendarswithappointments._ast.ASTI> parallelStreamIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().parallelStream();

}

    /* generated by template core.Method*/
 public  calendarswithappointments._ast.ASTI getI (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfI (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfI (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsIs (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<calendarswithappointments._ast.ASTI> listIteratorIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<calendarswithappointments._ast.ASTI> listIteratorIs (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<calendarswithappointments._ast.ASTI> subListIs (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<calendarswithappointments._ast.ASTI> getIList ()  {
      /* generated by template methods.Get*/

return this.is;

}

    /* generated by template core.Method*/
 public  void setName (String name)  {
      /* generated by template methods.Set*/

this.name = name;

}

    /* generated by template core.Method*/
 public  void clearIs ()  {
      /* generated by template methods.MethodDelegate*/

this.getIList().clear();

}

    /* generated by template core.Method*/
 public  boolean addI (calendarswithappointments._ast.ASTI element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllIs (Collection<? extends calendarswithappointments._ast.ASTI> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeI (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllIs (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllIs (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfI (Predicate<? super calendarswithappointments._ast.ASTI> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachIs (Consumer<? super calendarswithappointments._ast.ASTI> action)  {
      /* generated by template methods.MethodDelegate*/

this.getIList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addI (int index,calendarswithappointments._ast.ASTI element)  {
      /* generated by template methods.MethodDelegate*/

this.getIList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllIs (int index,Collection<? extends calendarswithappointments._ast.ASTI> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  calendarswithappointments._ast.ASTI removeI (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().remove(index);

}

    /* generated by template core.Method*/
 public  calendarswithappointments._ast.ASTI setI (int index,calendarswithappointments._ast.ASTI element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllIs (UnaryOperator<calendarswithappointments._ast.ASTI> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getIList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortIs (Comparator<? super calendarswithappointments._ast.ASTI> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getIList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setIList (List<calendarswithappointments._ast.ASTI> is)  {
      /* generated by template methods.Set*/

this.is = is;

}

    /* generated by template core.Method*/
 public  void accept (calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor visitor)  {
      /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template core.Method*/
 public  void accept (calendars._visitor.CalendarsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) {
    accept((calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x021 AST node type ASTCalendarsWithAppointments expected a visitor of type calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor, but got calendars._visitor.CalendarsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (appointments._visitor.AppointmentsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) {
    accept((calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x021 AST node type ASTCalendarsWithAppointments expected a visitor of type calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor, but got appointments._visitor.AppointmentsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) {
    accept((calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x021 AST node type ASTCalendarsWithAppointments expected a visitor of type calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) {
    accept((calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x021 AST node type ASTCalendarsWithAppointments expected a visitor of type calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor, but got de.monticore.mcbasics._visitor.MCBasicsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) {
    accept((calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x021 AST node type ASTCalendarsWithAppointments expected a visitor of type calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTCalendarsWithAppointments _construct ()  {
      return calendarswithappointments._ast.CalendarsWithAppointmentsNodeFactory.createASTCalendarsWithAppointments();
}

    /* generated by template core.Method*/
 public  Collection<de.monticore.ast.ASTNode> get_Children ()  {
      /* generated by template _ast.ast_class.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        result.addAll(getIList());
    return result;

}

    /* generated by template core.Method*/
 public  calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope getEnclosingScope ()  {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope enclosingScope)  {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (calendars._symboltable.ICalendarsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope){
    this.enclosingScope = (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x656The EnclosingScope form type calendars._symboltable.ICalendarsScope could not be casted to the type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope. Please call the Method setEnclosingScope with a parameter form type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (appointments._symboltable.IAppointmentsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope){
    this.enclosingScope = (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x396The EnclosingScope form type appointments._symboltable.IAppointmentsScope could not be casted to the type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope. Please call the Method setEnclosingScope with a parameter form type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope){
    this.enclosingScope = (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x178The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope. Please call the Method setEnclosingScope with a parameter form type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope){
    this.enclosingScope = (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x527The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope. Please call the Method setEnclosingScope with a parameter form type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope){
    this.enclosingScope = (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x054The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope. Please call the Method setEnclosingScope with a parameter form type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope");
  }
}

}
