/* generated from model CalendarsWithAppointments */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package calendarswithappointments._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTI extends ASTCNode  implements calendars._ast.ASTAppointments,calendarswithappointments._ast.ASTCalendarsWithAppointmentsNode {

    /* generated by template core.Attribute*/
 protected  appointments._ast.ASTAppointment appointment ;

    /* generated by template core.Attribute*/
 protected  calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope enclosingScope ;


    /* generated by template core.Constructor*/
 protected  ASTI()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)  {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTI comp;
    if ((o instanceof ASTI)) {
      comp = (ASTI) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
     // comparing appointment
     if ( (this.appointment == null && comp.appointment != null) ||
        (this.appointment != null && !this.appointment.deepEquals(comp.appointment, forceSameOrder)) ) {
        return false;
     }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)  {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithComments*/

      ASTI comp;
    if ((o instanceof ASTI)) {
      comp = (ASTI) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
      // comparing appointment
      if ( (this.appointment == null && comp.appointment != null) ||
        (this.appointment != null && !this.appointment.deepEqualsWithComments(comp.appointment, forceSameOrder)) ) {
        return false;
      }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)  {
      /* generated by template data.EqualAttributes*/

    return o instanceof ASTI;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)  {
      /* generated by template data.EqualsWithComments*/

      ASTI comp;
    if ((o instanceof ASTI)) {
      comp = (ASTI) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTI deepClone ()  {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTI deepClone (ASTI result)  {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

    result.setAppointment(getAppointment().deepClone());
      result.setEnclosingScope(getEnclosingScope());
    
    return result;

}

    /* generated by template core.Method*/
 public  appointments._ast.ASTAppointment getAppointment ()  {
      /* generated by template methods.Get*/

return this.appointment;

}

    /* generated by template core.Method*/
 public  void setAppointment (appointments._ast.ASTAppointment appointment)  {
      /* generated by template methods.Set*/

this.appointment = appointment;

}

    /* generated by template core.Method*/
 public  void accept (calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor visitor)  {
      /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template core.Method*/
 public  void accept (calendars._visitor.CalendarsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) {
    accept((calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x425 AST node type ASTI expected a visitor of type calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor, but got calendars._visitor.CalendarsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (appointments._visitor.AppointmentsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) {
    accept((calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x425 AST node type ASTI expected a visitor of type calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor, but got appointments._visitor.AppointmentsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) {
    accept((calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x425 AST node type ASTI expected a visitor of type calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) {
    accept((calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x425 AST node type ASTI expected a visitor of type calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor, but got de.monticore.mcbasics._visitor.MCBasicsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) {
    accept((calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x425 AST node type ASTI expected a visitor of type calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTI _construct ()  {
      return calendarswithappointments._ast.CalendarsWithAppointmentsNodeFactory.createASTI();
}

    /* generated by template core.Method*/
 public  Collection<de.monticore.ast.ASTNode> get_Children ()  {
      /* generated by template _ast.ast_class.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if ( getAppointment() != null ) {
          result.add(getAppointment());
        }
    return result;

}

    /* generated by template core.Method*/
 public  calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope getEnclosingScope ()  {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope enclosingScope)  {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (calendars._symboltable.ICalendarsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope){
    this.enclosingScope = (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x793The EnclosingScope form type calendars._symboltable.ICalendarsScope could not be casted to the type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope. Please call the Method setEnclosingScope with a parameter form type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (appointments._symboltable.IAppointmentsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope){
    this.enclosingScope = (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x851The EnclosingScope form type appointments._symboltable.IAppointmentsScope could not be casted to the type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope. Please call the Method setEnclosingScope with a parameter form type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope){
    this.enclosingScope = (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x782The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope. Please call the Method setEnclosingScope with a parameter form type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope){
    this.enclosingScope = (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x343The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope. Please call the Method setEnclosingScope with a parameter form type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope){
    this.enclosingScope = (calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x976The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope. Please call the Method setEnclosingScope with a parameter form type calendarswithappointments._symboltable.ICalendarsWithAppointmentsScope");
  }
}

}
