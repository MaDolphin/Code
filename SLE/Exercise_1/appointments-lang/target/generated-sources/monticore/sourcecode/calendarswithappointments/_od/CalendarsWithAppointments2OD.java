/* generated by template od.DiagramVisitor*/




package calendarswithappointments._od;

import calendarswithappointments._visitor.CalendarsWithAppointmentsVisitor;
import calendarswithappointments._ast.ASTCalendarsWithAppointmentsNode;
import de.monticore.prettyprint.IndentPrinter;
import de.se_rwth.commons.Names;
import de.se_rwth.commons.StringTransformations;
import de.monticore.generating.templateengine.reporting.commons.ReportingRepository;
import java.util.Iterator;

public class CalendarsWithAppointments2OD implements CalendarsWithAppointmentsVisitor {

  private CalendarsWithAppointmentsVisitor realThis = this;

  protected IndentPrinter pp;

  protected ReportingRepository reporting;

  protected boolean printEmptyOptional = false;

  protected boolean printEmptyList = false;

  public CalendarsWithAppointments2OD(IndentPrinter printer, ReportingRepository reporting) {
    this.reporting = reporting;
    this.pp = printer;
  }


      @Override
      public void handle(calendarswithappointments._ast.ASTCalendarsWithAppointments node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "calendarswithappointments._ast.ASTCalendarsWithAppointments");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        printAttribute("name", "\"" + String.valueOf(node.getName()) + "\"");
        {
        Iterator<calendarswithappointments._ast.ASTI> iter_i = node.getIList().iterator();
        boolean isEmpty = true;
        if (iter_i.hasNext()) {
       	  pp.print("i");
   			  pp.print(" = [");
   			  pp.println("// *size: " + node.getIList().size());
				  pp.indent();
   			  isEmpty = false;
        } else if (printEmptyList) {
          pp.print("i");
          pp.println(" = [];");
        }
          boolean isFirst = true;
          while (iter_i.hasNext()) {
            if (!isFirst) {
              pp.println(",");
            }
            isFirst = false;
            iter_i.next().accept(getRealThis());
          }
          if (!isEmpty) {
            pp.println("];");
            pp.unindent();
          }
        }
        pp.unindent();
        pp.print("}");
     }


      @Override
      public void handle(calendarswithappointments._ast.ASTI node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "calendarswithappointments._ast.ASTI");
        pp.indent();
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
          pp.println("enclosingScope = " + scopeName + ";");
        if (null != node.getAppointment()) {
      		pp.print("appointment");
          pp.print(" = ");
          node.getAppointment().accept(getRealThis());
          pp.println(";");
        }
        pp.unindent();
        pp.print("}");
     }


  private void printAttribute(String name, String value) {
    pp.print(name);
    pp.print(" = ");
    pp.print(value);
    pp.println(";");
  }

  private void printObject(String objName, String objType) {
    pp.print(objName);
    pp.print(":");
    pp.print(Names.getSimpleName(objType));
    pp.println(" {");
  }

  public String printObjectDiagram(String modelName, ASTCalendarsWithAppointmentsNode node) {
    pp.clearBuffer();
    pp.setIndentLength(2);
    pp.print("objectdiagram ");
    pp.print(modelName);
    pp.println(" {");
    pp.indent();
    node.accept(getRealThis());
    pp.print(";");
    pp.unindent();
    pp.println("}");
    return pp.getContent();
  }

  @Override
  public void setRealThis(CalendarsWithAppointmentsVisitor realThis) {
    this.realThis = realThis;
  }

  @Override
  public CalendarsWithAppointmentsVisitor getRealThis() {
    return realThis;
  }

  /**
   * @return the printEmptyOptional
   */
  public boolean isPrintEmptyOptional() {
    return this.printEmptyOptional;
  }


  /**
   * @param printEmptyOptional the printEmptyOptional to set
   */
  public void setPrintEmptyOptional(boolean printEmptyOptional) {
    this.printEmptyOptional = printEmptyOptional;
  }


  /**
   * @return the printEmptyList
   */
  public boolean isPrintEmptyList() {
    return this.printEmptyList;
  }


  /**
   * @param printEmptyList the printEmptyList to set
   */
  public void setPrintEmptyList(boolean printEmptyList) {
    this.printEmptyList = printEmptyList;
  }

}

