/* generated from model Appointments */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package appointments._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class AppointmentsSymTabMill  {

    /* generated by template core.Attribute*/
 protected  static  AppointmentsSymTabMill mill ;

    /* generated by template core.Attribute*/
 protected  static  AppointmentsSymTabMill appointmentsModelLoader ;

    /* generated by template core.Attribute*/
 protected  static  AppointmentsSymTabMill appointmentsSymbolTableCreator ;

    /* generated by template core.Attribute*/
 protected  static  AppointmentsSymTabMill appointmentsSymbolTableCreatorDelegator ;

    /* generated by template core.Attribute*/
 protected  static  AppointmentsSymTabMill appointmentsGlobalScope ;

    /* generated by template core.Attribute*/
 protected  static  AppointmentsSymTabMill appointmentsArtifactScope ;

    /* generated by template core.Attribute*/
 protected  static  AppointmentsSymTabMill appointmentsScope ;


    /* generated by template core.Constructor*/
 protected  AppointmentsSymTabMill()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 protected  static  AppointmentsSymTabMill getMill ()  {
      /* generated by template _symboltable.symTabMill.GetMill*/

  if (mill == null) {
    mill = new AppointmentsSymTabMill();
  }
  return mill;
}

    /* generated by template core.Method*/
 public  static  void initMe (AppointmentsSymTabMill a)  {
      /* generated by template _symboltable.symTabMill.InitMe*/

  mill = a;
  appointmentsModelLoader = mill;
  appointmentsSymbolTableCreator = mill;
  appointmentsSymbolTableCreatorDelegator = mill;
  appointmentsGlobalScope = mill;
  appointmentsArtifactScope = mill;
  appointmentsScope = mill;

}

    /* generated by template core.Method*/
 public  static  void init ()  {
      mill = new AppointmentsSymTabMill();
}

    /* generated by template core.Method*/
 public  static  void reset ()  {
      /* generated by template _symboltable.symTabMill.Reset*/

  mill = null;
  appointmentsModelLoader = null;
  appointmentsSymbolTableCreator = null;
  appointmentsSymbolTableCreatorDelegator = null;
  appointmentsGlobalScope = null;
  appointmentsArtifactScope = null;
  appointmentsScope = null;
  de.monticore.literals.mccommonliterals._symboltable.MCCommonLiteralsSymTabMill.reset();
  de.monticore.mcbasics._symboltable.MCBasicsSymTabMill.reset();
  de.monticore.literals.mcliteralsbasis._symboltable.MCLiteralsBasisSymTabMill.reset();

}

    /* generated by template core.Method*/
 protected  AppointmentsModelLoaderBuilder _appointmentsModelLoaderBuilder ()  {
      return new AppointmentsModelLoaderBuilder();
}

    /* generated by template core.Method*/
 public  static  AppointmentsModelLoaderBuilder appointmentsModelLoaderBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (appointmentsModelLoader == null) {
    appointmentsModelLoader = getMill();
  }
  return appointmentsModelLoader._appointmentsModelLoaderBuilder();
}

    /* generated by template core.Method*/
 protected  AppointmentsSymbolTableCreatorBuilder _appointmentsSymbolTableCreatorBuilder ()  {
      return new AppointmentsSymbolTableCreatorBuilder();
}

    /* generated by template core.Method*/
 public  static  AppointmentsSymbolTableCreatorBuilder appointmentsSymbolTableCreatorBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (appointmentsSymbolTableCreator == null) {
    appointmentsSymbolTableCreator = getMill();
  }
  return appointmentsSymbolTableCreator._appointmentsSymbolTableCreatorBuilder();
}

    /* generated by template core.Method*/
 protected  AppointmentsSymbolTableCreatorDelegatorBuilder _appointmentsSymbolTableCreatorDelegatorBuilder ()  {
      return new AppointmentsSymbolTableCreatorDelegatorBuilder();
}

    /* generated by template core.Method*/
 public  static  AppointmentsSymbolTableCreatorDelegatorBuilder appointmentsSymbolTableCreatorDelegatorBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (appointmentsSymbolTableCreatorDelegator == null) {
    appointmentsSymbolTableCreatorDelegator = getMill();
  }
  return appointmentsSymbolTableCreatorDelegator._appointmentsSymbolTableCreatorDelegatorBuilder();
}

    /* generated by template core.Method*/
 protected  AppointmentsGlobalScopeBuilder _appointmentsGlobalScopeBuilder ()  {
      return new AppointmentsGlobalScopeBuilder();
}

    /* generated by template core.Method*/
 public  static  AppointmentsGlobalScopeBuilder appointmentsGlobalScopeBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (appointmentsGlobalScope == null) {
    appointmentsGlobalScope = getMill();
  }
  return appointmentsGlobalScope._appointmentsGlobalScopeBuilder();
}

    /* generated by template core.Method*/
 protected  AppointmentsArtifactScopeBuilder _appointmentsArtifactScopeBuilder ()  {
      return new AppointmentsArtifactScopeBuilder();
}

    /* generated by template core.Method*/
 public  static  AppointmentsArtifactScopeBuilder appointmentsArtifactScopeBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (appointmentsArtifactScope == null) {
    appointmentsArtifactScope = getMill();
  }
  return appointmentsArtifactScope._appointmentsArtifactScopeBuilder();
}

    /* generated by template core.Method*/
 protected  AppointmentsScopeBuilder _appointmentsScopeBuilder ()  {
      return new AppointmentsScopeBuilder();
}

    /* generated by template core.Method*/
 public  static  AppointmentsScopeBuilder appointmentsScopeBuilder ()  {
      /* generated by template _symboltable.symTabMill.BuilderMethod*/

  if (appointmentsScope == null) {
    appointmentsScope = getMill();
  }
  return appointmentsScope._appointmentsScopeBuilder();
}

}
