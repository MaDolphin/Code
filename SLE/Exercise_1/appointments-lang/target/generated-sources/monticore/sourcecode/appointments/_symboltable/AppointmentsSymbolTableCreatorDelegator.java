/* generated from model Appointments */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package appointments._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class AppointmentsSymbolTableCreatorDelegator extends appointments._visitor.AppointmentsDelegatorVisitor  {

    /* generated by template core.Attribute*/
 protected  Deque<appointments._symboltable.IAppointmentsScope> scopeStack = new java.util.ArrayDeque<>();

    /* generated by template core.Attribute*/
 protected  final  AppointmentsSymbolTableCreator symbolTable ;

    /* generated by template core.Attribute*/
 protected  appointments._symboltable.IAppointmentsGlobalScope globalScope ;


    /* generated by template core.Constructor*/
 public  AppointmentsSymbolTableCreatorDelegator(appointments._symboltable.IAppointmentsGlobalScope globalScope)  {
    /* generated by template _symboltable.symboltablecreatordelegator.Constructor*/

  this.scopeStack.push(globalScope);
  this.globalScope = globalScope;
  MCLiteralsBasisSTCForAppointments mCLiteralsBasisSymbolTableCreator = new MCLiteralsBasisSTCForAppointments(scopeStack);
  setMCLiteralsBasisVisitor(mCLiteralsBasisSymbolTableCreator);

  MCCommonLiteralsSTCForAppointments mCCommonLiteralsSymbolTableCreator = new MCCommonLiteralsSTCForAppointments(scopeStack);
  setMCCommonLiteralsVisitor(mCCommonLiteralsSymbolTableCreator);

  symbolTable = new AppointmentsSymbolTableCreator(scopeStack);
  setAppointmentsVisitor(symbolTable);
}


    /* generated by template core.Method*/
 public  appointments._symboltable.AppointmentsArtifactScope createFromAST (appointments._ast.ASTAppointment rootNode)  {
      /* generated by template _symboltable.symboltablecreatordelegator.CreateFromAST*/

  appointments._symboltable.AppointmentsArtifactScope as =  symbolTable.createFromAST(rootNode);
  if (as.isPresentName()){
    if (!as.getPackageName().isEmpty()){
      globalScope.cache(as.getPackageName() + "." + as.getName());
    } else {
      globalScope.cache(as.getName());
    }
  }
  return as;
}

}
