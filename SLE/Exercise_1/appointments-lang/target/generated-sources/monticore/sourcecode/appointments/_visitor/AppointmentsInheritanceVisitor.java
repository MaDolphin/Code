/* generated from model Appointments */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package appointments._visitor;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;

/* generated by template core.Annotations*/
// empty template

 public  interface AppointmentsInheritanceVisitor extends appointments._visitor.AppointmentsVisitor,de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsInheritanceVisitor {



  default /* generated by template core.Method*/
 public  void handle (appointments._ast.ASTAppointment node)  {
      /* generated by template _visitor.inheritance.Handle*/

  getRealThis().visit((ASTNode) node);
  getRealThis().visit((appointments._ast.ASTAppointmentsNode) node);
  AppointmentsVisitor.super.handle(node);
  getRealThis().endVisit((appointments._ast.ASTAppointmentsNode) node);
  getRealThis().endVisit((ASTNode) node);
}

  default /* generated by template core.Method*/
 public  void handle (appointments._ast.ASTStart node)  {
      /* generated by template _visitor.inheritance.Handle*/

  getRealThis().visit((ASTNode) node);
  getRealThis().visit((appointments._ast.ASTAppointmentsNode) node);
  AppointmentsVisitor.super.handle(node);
  getRealThis().endVisit((appointments._ast.ASTAppointmentsNode) node);
  getRealThis().endVisit((ASTNode) node);
}

  default /* generated by template core.Method*/
 public  void handle (appointments._ast.ASTEnd node)  {
      /* generated by template _visitor.inheritance.Handle*/

  getRealThis().visit((ASTNode) node);
  getRealThis().visit((appointments._ast.ASTAppointmentsNode) node);
  AppointmentsVisitor.super.handle(node);
  getRealThis().endVisit((appointments._ast.ASTAppointmentsNode) node);
  getRealThis().endVisit((ASTNode) node);
}

  default /* generated by template core.Method*/
 public  void handle (appointments._ast.ASTDate node)  {
      /* generated by template _visitor.inheritance.Handle*/

  getRealThis().visit((ASTNode) node);
  getRealThis().visit((appointments._ast.ASTAppointmentsNode) node);
  AppointmentsVisitor.super.handle(node);
  getRealThis().endVisit((appointments._ast.ASTAppointmentsNode) node);
  getRealThis().endVisit((ASTNode) node);
}

  default /* generated by template core.Method*/
 public  void handle (appointments._ast.ASTTime node)  {
      /* generated by template _visitor.inheritance.Handle*/

  getRealThis().visit((ASTNode) node);
  getRealThis().visit((appointments._ast.ASTAppointmentsNode) node);
  AppointmentsVisitor.super.handle(node);
  getRealThis().endVisit((appointments._ast.ASTAppointmentsNode) node);
  getRealThis().endVisit((ASTNode) node);
}

  default /* generated by template core.Method*/
 public  void handle (appointments._ast.ASTBreak node)  {
      /* generated by template _visitor.inheritance.Handle*/

  getRealThis().visit((ASTNode) node);
  getRealThis().visit((appointments._ast.ASTAppointmentsNode) node);
  AppointmentsVisitor.super.handle(node);
  getRealThis().endVisit((appointments._ast.ASTAppointmentsNode) node);
  getRealThis().endVisit((ASTNode) node);
}

  default /* generated by template core.Method*/
 public  void handle (appointments._ast.ASTAppointmentsNode node)  {
      /* generated by template _visitor.inheritance.Handle*/

  getRealThis().visit((ASTNode) node);
  getRealThis().visit((appointments._ast.ASTAppointmentsNode) node);
  AppointmentsVisitor.super.handle(node);
  getRealThis().endVisit((appointments._ast.ASTAppointmentsNode) node);
  getRealThis().endVisit((ASTNode) node);
}

}
