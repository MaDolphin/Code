/* generated from model AppointmentsFlexibilized */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package appointmentsflexibilized._symboltable;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class AppointmentsFlexibilizedSymbolTableCreator  implements appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor {

    /* generated by template core.Attribute*/
 protected  Deque<appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope> scopeStack = new java.util.ArrayDeque<>();

    /* generated by template core.Attribute*/
 private  appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor realThis = this;

    /* generated by template core.Attribute*/
 protected  appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope firstCreatedScope ;


    /* generated by template core.Constructor*/
 public  AppointmentsFlexibilizedSymbolTableCreator(appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope enclosingScope)  {
    putOnStack(Log.errorIfNull(enclosingScope));
}

    /* generated by template core.Constructor*/
 public  AppointmentsFlexibilizedSymbolTableCreator(Deque<? extends appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope> scopeStack)  {
    this.scopeStack = Log.errorIfNull((Deque<appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope>)scopeStack);
}


    /* generated by template core.Method*/
 public  appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor getRealThis ()  {
      /* generated by template methods.Get*/

return this.realThis;

}

    /* generated by template core.Method*/
 public  void setRealThis (appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor realThis)  {
      /* generated by template methods.Set*/

this.realThis = realThis;

}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope getFirstCreatedScope ()  {
      /* generated by template methods.Get*/

return this.firstCreatedScope;

}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._symboltable.AppointmentsFlexibilizedArtifactScope createFromAST (appointmentsflexibilized._ast.ASTAppointment rootNode)  {
      /* generated by template _symboltable.symboltablecreator.CreateFromAST*/

  Log.errorIfNull(rootNode, "0xA7004x869 Error by creating of the AppointmentsFlexibilizedSymbolTableCreator symbol table: top ast node is null");
  appointmentsflexibilized._symboltable.AppointmentsFlexibilizedArtifactScope artifactScope = new appointmentsflexibilized._symboltable.AppointmentsFlexibilizedArtifactScope(Optional.empty(), "", new ArrayList<>());
  putOnStack(artifactScope);
  rootNode.accept(getRealThis());
  return artifactScope;
}

    /* generated by template core.Method*/
 public  void putOnStack (appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope scope)  {
      /* generated by template _symboltable.symboltablecreator.PutOnStack*/
  Log.errorIfNull(scope);

if (scope.getEnclosingScope() == null && getCurrentScope().isPresent()) {
    scope.setEnclosingScope(getCurrentScope().get());
    getCurrentScope().get().addSubScope(scope);
} else if (scope.getEnclosingScope() != null && getCurrentScope().isPresent()) {
    if (scope.getEnclosingScope() != getCurrentScope().get()) {
      Log.warn("0xA1043 The enclosing scope is not the same as the current scope on the stack.");
    }
  }

  if (firstCreatedScope == null) {
    firstCreatedScope = scope;
  }

  scopeStack.addLast(scope);
}

    /* generated by template core.Method*/
 public  final  Optional<appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope> getCurrentScope ()  {
      return Optional.ofNullable(scopeStack.peekLast());
}

    /* generated by template core.Method*/
 public  final  Optional<appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope> removeCurrentScope ()  {
      return Optional.ofNullable(scopeStack.pollLast());
}

    /* generated by template core.Method*/
 protected  void setAppointmentScopeStack (Deque<appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope> scopeStack)  {
      this.scopeStack = scopeStack;
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope createScope (boolean shadowing)  {
      /* generated by template _symboltable.symboltablecreator.CreateScope*/

  appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope scope = appointmentsflexibilized._symboltable.AppointmentsFlexibilizedSymTabMill.appointmentsFlexibilizedScopeBuilder().build();
  scope.setShadowing(shadowing);
  return scope;
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTAppointment node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTStart node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTEnd node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTDate node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTTime node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTBreak node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTParticipants node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTFrequency node)  {
      /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
  if (getCurrentScope().isPresent()) {
    node.setEnclosingScope(getCurrentScope().get());
  }
  else {
    Log.error("Could not set enclosing scope of ASTNode \"" + node
              + "\", because no scope is set yet!");
  }
}

}
