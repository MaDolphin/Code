/* generated from model AppointmentsFlexibilized */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package appointmentsflexibilized._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTStart extends ASTCNode  implements appointmentsflexibilized._ast.ASTI,appointmentsflexibilized._ast.ASTAppointmentsFlexibilizedNode {

    /* generated by template core.Attribute*/
 protected  Optional<appointmentsflexibilized._ast.ASTDate> date = Optional.empty();

    /* generated by template core.Attribute*/
 protected  appointmentsflexibilized._ast.ASTTime time ;

    /* generated by template core.Attribute*/
 protected  appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope enclosingScope ;


    /* generated by template core.Constructor*/
 protected  ASTStart()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)  {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTStart comp;
    if ((o instanceof ASTStart)) {
      comp = (ASTStart) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing date   
    if ( this.date.isPresent() != comp.date.isPresent() ||
      (this.date.isPresent() && !this.date.get().deepEquals(comp.date.get(), forceSameOrder)) ) {
      return false;
    }
     // comparing time
     if ( (this.time == null && comp.time != null) ||
        (this.time != null && !this.time.deepEquals(comp.time, forceSameOrder)) ) {
        return false;
     }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)  {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithComments*/

      ASTStart comp;
    if ((o instanceof ASTStart)) {
      comp = (ASTStart) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing date
    if ( this.date.isPresent() != comp.date.isPresent() ||
      (this.date.isPresent() && !this.date.get().deepEqualsWithComments(comp.date.get(), forceSameOrder)) ) {
      return false;
    }
      // comparing time
      if ( (this.time == null && comp.time != null) ||
        (this.time != null && !this.time.deepEqualsWithComments(comp.time, forceSameOrder)) ) {
        return false;
      }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)  {
      /* generated by template data.EqualAttributes*/

    return o instanceof ASTStart;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)  {
      /* generated by template data.EqualsWithComments*/

      ASTStart comp;
    if ((o instanceof ASTStart)) {
      comp = (ASTStart) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTStart deepClone ()  {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTStart deepClone (ASTStart result)  {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

    if (isPresentDate()){
      result.setDate(getDate().deepClone());
    } else {
      result.setDateAbsent();
    }
    result.setTime(getTime().deepClone());
      result.setEnclosingScope(getEnclosingScope());
    
    return result;

}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._ast.ASTDate getDate ()  {
      /* generated by template methods.opt.Get*/

if (isPresentDate()) {
return this.date.get();
}
Log.error("0xA7003x290 Date can't return a value. It is empty.");
// Normally this statement is not reachable
throw new IllegalStateException();

}

    /* generated by template core.Method*/
 public  boolean isPresentDate ()  {
      /* generated by template methods.opt.IsPresent*/

return this.date.isPresent();

}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._ast.ASTTime getTime ()  {
      /* generated by template methods.Get*/

return this.time;

}

    /* generated by template core.Method*/
 public  void setDate (appointmentsflexibilized._ast.ASTDate date)  {
      /* generated by template methods.opt.Set*/

this.date = Optional.ofNullable(date);

}

    /* generated by template core.Method*/
 public  void setDateAbsent ()  {
      /* generated by template methods.opt.SetAbsent*/

this.date = Optional.empty();

}

    /* generated by template core.Method*/
 public  void setTime (appointmentsflexibilized._ast.ASTTime time)  {
      /* generated by template methods.Set*/

this.time = time;

}

    /* generated by template core.Method*/
 public  void accept (appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor visitor)  {
      /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) {
    accept((appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x574 AST node type ASTStart expected a visitor of type appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) {
    accept((appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x574 AST node type ASTStart expected a visitor of type appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor, but got de.monticore.mcbasics._visitor.MCBasicsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) {
    accept((appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x574 AST node type ASTStart expected a visitor of type appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTStart _construct ()  {
      return appointmentsflexibilized._ast.AppointmentsFlexibilizedNodeFactory.createASTStart();
}

    /* generated by template core.Method*/
 public  Collection<de.monticore.ast.ASTNode> get_Children ()  {
      /* generated by template _ast.ast_class.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if (isPresentDate()) {
          result.add(getDate());
        }
        if ( getTime() != null ) {
          result.add(getTime());
        }
    return result;

}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope getEnclosingScope ()  {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope enclosingScope)  {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope){
    this.enclosingScope = (appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x455The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope. Please call the Method setEnclosingScope with a parameter form type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope){
    this.enclosingScope = (appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x653The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope. Please call the Method setEnclosingScope with a parameter form type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope){
    this.enclosingScope = (appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x478The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope. Please call the Method setEnclosingScope with a parameter form type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope");
  }
}

}
