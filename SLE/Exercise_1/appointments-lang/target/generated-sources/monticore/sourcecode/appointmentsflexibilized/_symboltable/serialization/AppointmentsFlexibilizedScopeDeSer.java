/* generated from model AppointmentsFlexibilized */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package appointmentsflexibilized._symboltable.serialization;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;

/* generated by template core.Annotations*/
// empty template

 public  class AppointmentsFlexibilizedScopeDeSer  implements de.monticore.symboltable.serialization.IDeSer<appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope,appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope> {



    /* generated by template core.Method*/
 public  void store (appointmentsflexibilized._symboltable.AppointmentsFlexibilizedArtifactScope as,appointmentsflexibilized._symboltable.AppointmentsFlexibilizedLanguage lang,String symbolPath)  {
      store(as, java.nio.file.Paths.get(symbolPath, as.getFilePath(lang).toString()));
}

    /* generated by template core.Method*/
 public  String getSerializedKind ()  {
      return "appointmentsflexibilized._symboltable.AppointmentsFlexibilizedScope";
}

    /* generated by template core.Method*/
 public  String getSerializedASKind ()  {
      return "appointmentsflexibilized._symboltable.AppointmentsFlexibilizedArtifactScope";
}

    /* generated by template core.Method*/
 public  String serialize (appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope toSerialize)  {
      /* generated by template _symboltable.serialization.symbolDeSer.Serialize*/

  appointmentsflexibilized._symboltable.serialization.AppointmentsFlexibilizedSymbolTablePrinter symbolTablePrinter = new appointmentsflexibilized._symboltable.serialization.AppointmentsFlexibilizedSymbolTablePrinter();
  toSerialize.accept(symbolTablePrinter);
  return symbolTablePrinter.getSerializedString();
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope deserialize (String serialized,appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope enclosingScope)  {
      /* generated by template _symboltable.serialization.symbolDeSer.DeserializeString*/
  de.monticore.symboltable.serialization.json.JsonObject symbol =
    de.monticore.symboltable.serialization.JsonParser.parseJsonObject(serialized);
  return deserialize(symbol,enclosingScope);
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope deserialize (de.monticore.symboltable.serialization.json.JsonObject scopeJson,appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope enclosingScope)  {
      /* generated by template _symboltable.serialization.scopeDeSer.DeserializeJsonObject*/

  String kind = scopeJson.getStringMember(de.monticore.symboltable.serialization.JsonConstants.KIND);
  if (this.getSerializedKind().equals(kind)) {
    return deserializeAppointmentsFlexibilizedScope(scopeJson,enclosingScope);
  }
  else if (this.getSerializedASKind().equals(kind)) {
    return deserializeAppointmentsFlexibilizedArtifactScope(scopeJson,enclosingScope);
  }
  Log.error("Cannot deserialize \""+scopeJson+"\" with DeSer for kind \""+this.getSerializedKind()+"\"!");
  return null;
}

    /* generated by template core.Method*/
 protected  appointmentsflexibilized._symboltable.AppointmentsFlexibilizedScope deserializeAppointmentsFlexibilizedScope (de.monticore.symboltable.serialization.json.JsonObject scopeJson,appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope enclosingScope)  {
      /* generated by template _symboltable.serialization.scopeDeSer.DeserializeScope*/

  boolean isShadowingScope = false;
  if (scopeJson.hasBooleanMember(de.monticore.symboltable.serialization.JsonConstants.IS_SHADOWING_SCOPE)) {
    isShadowingScope = scopeJson.getBooleanMember(de.monticore.symboltable.serialization.JsonConstants.IS_SHADOWING_SCOPE);
  }
  boolean exportsSymbols = true;
  if (scopeJson.hasBooleanMember(de.monticore.symboltable.serialization.JsonConstants.EXPORTS_SYMBOLS)) { 
    exportsSymbols = scopeJson.getBooleanMember(de.monticore.symboltable.serialization.JsonConstants.EXPORTS_SYMBOLS);
  }  

  appointmentsflexibilized._symboltable.AppointmentsFlexibilizedScope scope = new appointmentsflexibilized._symboltable.AppointmentsFlexibilizedScope(isShadowingScope);
  if (scopeJson.hasStringMember(de.monticore.symboltable.serialization.JsonConstants.NAME)) {
    scope.setName(scopeJson.getStringMember(de.monticore.symboltable.serialization.JsonConstants.NAME));
  }
  scope.setExportingSymbols(exportsSymbols);

  addSymbols(scopeJson, scope);
  addAndLinkSubScopes(scopeJson, scope);
  deserializeAdditionalAttributes(scope,scopeJson,enclosingScope);
  return scope;
}

    /* generated by template core.Method*/
 protected  appointmentsflexibilized._symboltable.AppointmentsFlexibilizedArtifactScope deserializeAppointmentsFlexibilizedArtifactScope (de.monticore.symboltable.serialization.json.JsonObject scopeJson,appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope enclosingScope)  {
      /* generated by template _symboltable.serialization.scopeDeSer.DeserializeArtifactScope*/

  String name = scopeJson.getStringMember(de.monticore.symboltable.serialization.JsonConstants.NAME);
  String packageName = scopeJson.getStringMember(de.monticore.symboltable.serialization.JsonConstants.PACKAGE);
  List<de.monticore.symboltable.ImportStatement> imports = de.monticore.symboltable.serialization.JsonUtil.deserializeImports(scopeJson);
  boolean exportsSymbols = scopeJson.getBooleanMember(de.monticore.symboltable.serialization.JsonConstants.EXPORTS_SYMBOLS);

  appointmentsflexibilized._symboltable.AppointmentsFlexibilizedArtifactScope scope = new appointmentsflexibilized._symboltable.AppointmentsFlexibilizedArtifactScope(packageName, imports);
  scope.setName(name);
  scope.setExportingSymbols(exportsSymbols);
  addSymbols(scopeJson, scope);
  addAndLinkSubScopes(scopeJson, scope);
  deserializeAdditionalAttributes(scope,scopeJson, enclosingScope);
  return scope;
}

    /* generated by template core.Method*/
 protected  void deserializeAdditionalAttributes (appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope scope,de.monticore.symboltable.serialization.json.JsonObject scopeJson,appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope enclosingScope)  {
      /* generated by template core.EmptyBody*/
// empty body

}

    /* generated by template core.Method*/
 protected  void addSymbols (de.monticore.symboltable.serialization.json.JsonObject scopeJson,appointmentsflexibilized._symboltable.AppointmentsFlexibilizedScope scope)  {
      /* generated by template _symboltable.serialization.scopeDeSer.AddSymbols*/


}

    /* generated by template core.Method*/
 protected  void addAndLinkSubScopes (de.monticore.symboltable.serialization.json.JsonObject scopeJson,appointmentsflexibilized._symboltable.AppointmentsFlexibilizedScope scope)  {
      /* generated by template _symboltable.serialization.scopeDeSer.AddAndLinkSubScopes*/

  if (scopeJson.hasMember(de.monticore.symboltable.serialization.JsonConstants.SUBSCOPES)) {
    List<de.monticore.symboltable.serialization.json.JsonElement> elements = scopeJson.getArrayMember(de.monticore.symboltable.serialization.JsonConstants.SUBSCOPES);
    for (de.monticore.symboltable.serialization.json.JsonElement subScopeJson : elements) {
  de.monticore.symboltable.serialization.json.JsonObject s = subScopeJson.getAsJsonObject();
      appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope subScope = deserialize(s, scope);
      addAndLinkSpanningSymbol(s, subScope, scope);
      subScope.setEnclosingScope(scope);
      scope.addSubScope(subScope);
    }
  }
}

    /* generated by template core.Method*/
 protected  void addAndLinkSpanningSymbol (de.monticore.symboltable.serialization.json.JsonObject subScopeJson,appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope subScope,appointmentsflexibilized._symboltable.AppointmentsFlexibilizedScope scope)  {
      /* generated by template _symboltable.serialization.scopeDeSer.AddAndLinkSpanningSymbol*/

  if (subScopeJson.hasMember(de.monticore.symboltable.serialization.JsonConstants.SCOPE_SPANNING_SYMBOL)) {
de.monticore.symboltable.serialization.json.JsonObject symbolRef = subScopeJson.getObjectMember(de.monticore.symboltable.serialization.JsonConstants.SCOPE_SPANNING_SYMBOL);
    String spanningSymbolName = symbolRef.getStringMember(de.monticore.symboltable.serialization.JsonConstants.NAME);
    String spanningSymbolKind = symbolRef.getStringMember(de.monticore.symboltable.serialization.JsonConstants.KIND);
  } else {
    Log.error("Unknown kind of scope spanning symbol: "+de.monticore.symboltable.serialization.JsonConstants.SCOPE_SPANNING_SYMBOL);
  }
}

}
