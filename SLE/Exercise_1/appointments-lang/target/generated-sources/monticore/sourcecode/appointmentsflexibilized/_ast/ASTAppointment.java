/* generated from model AppointmentsFlexibilized */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package appointmentsflexibilized._ast;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;


 public  class ASTAppointment extends ASTCNode  implements appointmentsflexibilized._ast.ASTAppointmentsFlexibilizedNode {

    /* generated by template core.Attribute*/
 protected  String string ;

    /* generated by template core.Attribute*/
 protected  java.util.List<appointmentsflexibilized._ast.ASTI> is = new java.util.ArrayList<>();

    /* generated by template core.Attribute*/
 protected  appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope enclosingScope ;


    /* generated by template core.Constructor*/
 protected  ASTAppointment()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  boolean deepEquals (Object o)  {
           return deepEquals(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEquals (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithOrder*/

      ASTAppointment comp;
    if ((o instanceof ASTAppointment)) {
      comp = (ASTAppointment) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing is
    if (this.is.size() != comp.is.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<appointmentsflexibilized._ast.ASTI> it1 = this.is.iterator();
        Iterator<appointmentsflexibilized._ast.ASTI> it2 = comp.is.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<appointmentsflexibilized._ast.ASTI> it1 = this.is.iterator();
        while (it1.hasNext()) {
          appointmentsflexibilized._ast.ASTI oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<appointmentsflexibilized._ast.ASTI> it2 = comp.is.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o)  {
           return deepEqualsWithComments(o, true);
}

    /* generated by template core.Method*/
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)  {
      /* generated by template data.DeepEqualsWithComments*/

      ASTAppointment comp;
    if ((o instanceof ASTAppointment)) {
      comp = (ASTAppointment) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing is
    if (this.is.size() != comp.is.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<appointmentsflexibilized._ast.ASTI> it1 = this.is.iterator();
        Iterator<appointmentsflexibilized._ast.ASTI> it2 = comp.is.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<appointmentsflexibilized._ast.ASTI> it1 = this.is.iterator();
        while (it1.hasNext()) {
          appointmentsflexibilized._ast.ASTI oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<appointmentsflexibilized._ast.ASTI> it2 = comp.is.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

}

    /* generated by template core.Method*/
 public  boolean equalAttributes (Object o)  {
      /* generated by template data.EqualAttributes*/

      ASTAppointment comp;
    if ((o instanceof ASTAppointment)) {
      comp = (ASTAppointment) o;
    } else {
      return false;
    }
	// comparing string 
    if ( (this.string == null && comp.string != null) 
      || (this.string != null && !this.string.equals(comp.string)) ) {
      return false;
    }
    return true;


}

    /* generated by template core.Method*/
 public  boolean equalsWithComments (Object o)  {
      /* generated by template data.EqualsWithComments*/

      ASTAppointment comp;
    if ((o instanceof ASTAppointment)) {
      comp = (ASTAppointment) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template core.Method*/
 public  ASTAppointment deepClone ()  {
          return deepClone(_construct());
}

    /* generated by template core.Method*/
 public  ASTAppointment deepClone (ASTAppointment result)  {
      /* generated by template data.DeepCloneWithParameters*/

    super.deepClone(result);

      result.setString(getString());
      getIList().forEach(s -> result.is.add(s.deepClone()));
      result.setEnclosingScope(getEnclosingScope());
    
    return result;

}

    /* generated by template core.Method*/
 public  String getString ()  {
      /* generated by template methods.Get*/

return this.string;

}

    /* generated by template core.Method*/
 public  boolean containsI (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().contains(element);

}

    /* generated by template core.Method*/
 public  boolean containsAllIs (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().containsAll(collection);

}

    /* generated by template core.Method*/
 public  boolean isEmptyIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().isEmpty();

}

    /* generated by template core.Method*/
 public  Iterator<appointmentsflexibilized._ast.ASTI> iteratorIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().iterator();

}

    /* generated by template core.Method*/
 public  int sizeIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().size();

}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._ast.ASTI[] toArrayIs (appointmentsflexibilized._ast.ASTI[] array)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().toArray(array);

}

    /* generated by template core.Method*/
 public  Object[] toArrayIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().toArray();

}

    /* generated by template core.Method*/
 public  Spliterator<appointmentsflexibilized._ast.ASTI> spliteratorIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().spliterator();

}

    /* generated by template core.Method*/
 public  Stream<appointmentsflexibilized._ast.ASTI> streamIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().stream();

}

    /* generated by template core.Method*/
 public  Stream<appointmentsflexibilized._ast.ASTI> parallelStreamIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().parallelStream();

}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._ast.ASTI getI (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().get(index);

}

    /* generated by template core.Method*/
 public  int indexOfI (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().indexOf(element);

}

    /* generated by template core.Method*/
 public  int lastIndexOfI (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().lastIndexOf(element);

}

    /* generated by template core.Method*/
 public  boolean equalsIs (Object o)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().equals(o);

}

    /* generated by template core.Method*/
 public  int hashCodeIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().hashCode();

}

    /* generated by template core.Method*/
 public  ListIterator<appointmentsflexibilized._ast.ASTI> listIteratorIs ()  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().listIterator();

}

    /* generated by template core.Method*/
 public  ListIterator<appointmentsflexibilized._ast.ASTI> listIteratorIs (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().listIterator(index);

}

    /* generated by template core.Method*/
 public  List<appointmentsflexibilized._ast.ASTI> subListIs (int start,int end)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().subList(start, end);

}

    /* generated by template core.Method*/
 public  List<appointmentsflexibilized._ast.ASTI> getIList ()  {
      /* generated by template methods.Get*/

return this.is;

}

    /* generated by template core.Method*/
 public  void setString (String string)  {
      /* generated by template methods.Set*/

this.string = string;

}

    /* generated by template core.Method*/
 public  void clearIs ()  {
      /* generated by template methods.MethodDelegate*/

this.getIList().clear();

}

    /* generated by template core.Method*/
 public  boolean addI (appointmentsflexibilized._ast.ASTI element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().add(element);

}

    /* generated by template core.Method*/
 public  boolean addAllIs (Collection<? extends appointmentsflexibilized._ast.ASTI> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().addAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeI (Object element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().remove(element);

}

    /* generated by template core.Method*/
 public  boolean removeAllIs (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().removeAll(collection);

}

    /* generated by template core.Method*/
 public  boolean retainAllIs (Collection<?> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().retainAll(collection);

}

    /* generated by template core.Method*/
 public  boolean removeIfI (Predicate<? super appointmentsflexibilized._ast.ASTI> filter)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().removeIf(filter);

}

    /* generated by template core.Method*/
 public  void forEachIs (Consumer<? super appointmentsflexibilized._ast.ASTI> action)  {
      /* generated by template methods.MethodDelegate*/

this.getIList().forEach(action);

}

    /* generated by template core.Method*/
 public  void addI (int index,appointmentsflexibilized._ast.ASTI element)  {
      /* generated by template methods.MethodDelegate*/

this.getIList().add(index, element);

}

    /* generated by template core.Method*/
 public  boolean addAllIs (int index,Collection<? extends appointmentsflexibilized._ast.ASTI> collection)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().addAll(index, collection);

}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._ast.ASTI removeI (int index)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().remove(index);

}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._ast.ASTI setI (int index,appointmentsflexibilized._ast.ASTI element)  {
      /* generated by template methods.MethodDelegate*/

return this.getIList().set(index, element);

}

    /* generated by template core.Method*/
 public  void replaceAllIs (UnaryOperator<appointmentsflexibilized._ast.ASTI> operator)  {
      /* generated by template methods.MethodDelegate*/

this.getIList().replaceAll(operator);

}

    /* generated by template core.Method*/
 public  void sortIs (Comparator<? super appointmentsflexibilized._ast.ASTI> comparator)  {
      /* generated by template methods.MethodDelegate*/

this.getIList().sort(comparator);

}

    /* generated by template core.Method*/
 public  void setIList (List<appointmentsflexibilized._ast.ASTI> is)  {
      /* generated by template methods.Set*/

this.is = is;

}

    /* generated by template core.Method*/
 public  void accept (appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor visitor)  {
      /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) {
    accept((appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x660 AST node type ASTAppointment expected a visitor of type appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) {
    accept((appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x660 AST node type ASTAppointment expected a visitor of type appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor, but got de.monticore.mcbasics._visitor.MCBasicsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor visitor)  {
      /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) {
    accept((appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x660 AST node type ASTAppointment expected a visitor of type appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template core.Method*/
 protected  ASTAppointment _construct ()  {
      return appointmentsflexibilized._ast.AppointmentsFlexibilizedNodeFactory.createASTAppointment();
}

    /* generated by template core.Method*/
 public  Collection<de.monticore.ast.ASTNode> get_Children ()  {
      /* generated by template _ast.ast_class.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        result.addAll(getIList());
    return result;

}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope getEnclosingScope ()  {
      /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope enclosingScope)  {
      /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope){
    this.enclosingScope = (appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x016The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope. Please call the Method setEnclosingScope with a parameter form type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope){
    this.enclosingScope = (appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x650The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope. Please call the Method setEnclosingScope with a parameter form type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope");
  }
}

    /* generated by template core.Method*/
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)  {
      /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope){
    this.enclosingScope = (appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x062The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope. Please call the Method setEnclosingScope with a parameter form type appointmentsflexibilized._symboltable.IAppointmentsFlexibilizedScope");
  }
}

}
