/* generated from model AppointmentsFlexibilized */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package appointmentsflexibilized._cocos;

/* generated by template core.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;
import de.monticore.ast.ASTCNode;

/* generated by template core.Annotations*/
// empty template

 public  class AppointmentsFlexibilizedCoCoChecker  implements appointmentsflexibilized._visitor.AppointmentsFlexibilizedInheritanceVisitor {

    /* generated by template core.Attribute*/
 private  appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor realThis = this;

    /* generated by template core.Attribute*/
 private  List<appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker> appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker = new ArrayList<>();

    /* generated by template core.Attribute*/
 private  Collection<appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTAppointmentCoCo> appointmentsflexibilized__ast_ASTAppointmentCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTStartCoCo> appointmentsflexibilized__ast_ASTStartCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTEndCoCo> appointmentsflexibilized__ast_ASTEndCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTDateCoCo> appointmentsflexibilized__ast_ASTDateCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTTimeCoCo> appointmentsflexibilized__ast_ASTTimeCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTBreakCoCo> appointmentsflexibilized__ast_ASTBreakCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTParticipantsCoCo> appointmentsflexibilized__ast_ASTParticipantsCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTFrequencyCoCo> appointmentsflexibilized__ast_ASTFrequencyCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTICoCo> appointmentsflexibilized__ast_ASTICoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  Collection<appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTAppointmentsFlexibilizedNodeCoCo> appointmentsflexibilized__ast_ASTAppointmentsFlexibilizedNodeCoCos = new LinkedHashSet<>();

    /* generated by template core.Attribute*/
 private  List<de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsCoCoChecker> de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker = new ArrayList<>(Arrays.asList(new de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsCoCoChecker()));

    /* generated by template core.Attribute*/
 private  List<de.monticore.mcbasics._cocos.MCBasicsCoCoChecker> de_monticore_mcbasics__cocos_MCBasicsCoCoChecker = new ArrayList<>(Arrays.asList(new de.monticore.mcbasics._cocos.MCBasicsCoCoChecker()));

    /* generated by template core.Attribute*/
 private  List<de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisCoCoChecker> de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker = new ArrayList<>(Arrays.asList(new de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisCoCoChecker()));


    /* generated by template core.Constructor*/
 public  AppointmentsFlexibilizedCoCoChecker()  {
    /* generated by template core.EmptyBody*/
// empty body

}


    /* generated by template core.Method*/
 public  appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor getRealThis ()  {
      /* generated by template methods.Get*/

return this.realThis;

}

    /* generated by template core.Method*/
 public  void setRealThis (appointmentsflexibilized._visitor.AppointmentsFlexibilizedVisitor realThis)  {
      /* generated by template methods.Set*/

this.realThis = realThis;

}

    /* generated by template core.Method*/
 public  void addChecker (appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker checker)  {
      this.appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (appointmentsflexibilized._ast.ASTAppointmentsFlexibilizedNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTAppointmentCoCo coco)  {
      appointmentsflexibilized__ast_ASTAppointmentCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTAppointment node)  {
      for (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTAppointmentCoCo coco : appointmentsflexibilized__ast_ASTAppointmentCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTStartCoCo coco)  {
      appointmentsflexibilized__ast_ASTStartCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTStart node)  {
      for (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTStartCoCo coco : appointmentsflexibilized__ast_ASTStartCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTEndCoCo coco)  {
      appointmentsflexibilized__ast_ASTEndCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTEnd node)  {
      for (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTEndCoCo coco : appointmentsflexibilized__ast_ASTEndCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTDateCoCo coco)  {
      appointmentsflexibilized__ast_ASTDateCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTDate node)  {
      for (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTDateCoCo coco : appointmentsflexibilized__ast_ASTDateCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTTimeCoCo coco)  {
      appointmentsflexibilized__ast_ASTTimeCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTTime node)  {
      for (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTTimeCoCo coco : appointmentsflexibilized__ast_ASTTimeCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTBreakCoCo coco)  {
      appointmentsflexibilized__ast_ASTBreakCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTBreak node)  {
      for (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTBreakCoCo coco : appointmentsflexibilized__ast_ASTBreakCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTParticipantsCoCo coco)  {
      appointmentsflexibilized__ast_ASTParticipantsCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTParticipants node)  {
      for (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTParticipantsCoCo coco : appointmentsflexibilized__ast_ASTParticipantsCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTFrequencyCoCo coco)  {
      appointmentsflexibilized__ast_ASTFrequencyCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTFrequency node)  {
      for (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTFrequencyCoCo coco : appointmentsflexibilized__ast_ASTFrequencyCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTICoCo coco)  {
      appointmentsflexibilized__ast_ASTICoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTI node)  {
      for (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTICoCo coco : appointmentsflexibilized__ast_ASTICoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTAppointmentsFlexibilizedNodeCoCo coco)  {
      appointmentsflexibilized__ast_ASTAppointmentsFlexibilizedNodeCoCos.add(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (appointmentsflexibilized._ast.ASTAppointmentsFlexibilizedNode node)  {
      for (appointmentsflexibilized._cocos.AppointmentsFlexibilizedASTAppointmentsFlexibilizedNodeCoCo coco : appointmentsflexibilized__ast_ASTAppointmentsFlexibilizedNodeCoCos) {
coco.check(node);
}
// and delegate to all registered checkers of the same language as well
appointmentsflexibilized__cocos_AppointmentsFlexibilizedCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  void addChecker (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsCoCoChecker checker)  {
      this.de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNullLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTNullLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBooleanLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTCharLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTCharLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTStringLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNatLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTNatLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNatLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicLongLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicLongLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicFloatLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicFloatLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicDoubleLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicDoubleLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNumericLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNumericLiteralCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTMCCommonLiteralsNodeCoCo coco)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode node)  {
      de_monticore_literals_mccommonliterals__cocos_MCCommonLiteralsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  void addChecker (de.monticore.mcbasics._cocos.MCBasicsCoCoChecker checker)  {
      this.de_monticore_mcbasics__cocos_MCBasicsCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (de.monticore.mcbasics._ast.ASTMCBasicsNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.mcbasics._cocos.MCBasicsASTMCBasicsNodeCoCo coco)  {
      de_monticore_mcbasics__cocos_MCBasicsCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.mcbasics._ast.ASTMCBasicsNode node)  {
      de_monticore_mcbasics__cocos_MCBasicsCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  void addChecker (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisCoCoChecker checker)  {
      this.de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker.add(checker);
}

    /* generated by template core.Method*/
 public  void checkAll (de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode node)  {
      node.accept(getRealThis());
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTLiteralCoCo coco)  {
      de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mcliteralsbasis._ast.ASTLiteral node)  {
      de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker.stream().forEach(c -> c.visit(node));
}

    /* generated by template core.Method*/
 public  appointmentsflexibilized._cocos.AppointmentsFlexibilizedCoCoChecker addCoCo (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTMCLiteralsBasisNodeCoCo coco)  {
      de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker.stream().findFirst().get().addCoCo(coco);
return this;
}

    /* generated by template core.Method*/
 public  void visit (de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode node)  {
      de_monticore_literals_mcliteralsbasis__cocos_MCLiteralsBasisCoCoChecker.stream().forEach(c -> c.visit(node));
}

}
